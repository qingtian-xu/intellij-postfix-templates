######## hutool-aop-5.8.10.postfixTemplates ######## 
######## cn.hutool.aop.ProxyUtil
.proxy : ht>使用切面代理对象
	java.lang.Object [cn.hutool.aop.ProxyUtil]  →  cn.hutool.aop.ProxyUtil.proxy($expr$, $arg$) 

.newProxyInstance : ht>创建动态代理对象
	java.lang.reflect.InvocationHandler [cn.hutool.aop.ProxyUtil]  →  cn.hutool.aop.ProxyUtil.newProxyInstance($expr$, $arg$) 
	java.lang.ClassLoader [cn.hutool.aop.ProxyUtil]  →  cn.hutool.aop.ProxyUtil.newProxyInstance($expr$, $arg$) 



######## hutool-bloomfilter-5.8.10.postfixTemplates ######## 
######## cn.hutool.bloomfilter.BloomFilterUtil
.createBitMap : ht>创建BitMap实现的布隆过滤器
	INT [cn.hutool.bloomfilter.BloomFilterUtil]  →  cn.hutool.bloomfilter.BloomFilterUtil.createBitMap($expr$) 

.createBitSet : ht>创建一个BitSet实现的布隆过滤器,过滤器的容量为c*n个bit
	INT [cn.hutool.bloomfilter.BloomFilterUtil]  →  cn.hutool.bloomfilter.BloomFilterUtil.createBitSet($expr$, $arg$) 



######## hutool-cache-5.8.10.postfixTemplates ######## 
######## cn.hutool.cache.CacheUtil
.newLFUCache : ht>创建LFU(leastfrequentlyused)最少使用率缓存
	INT [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newLFUCache($expr$, $arg$) 

.newLRUCache : ht>创建LRU(leastrecentlyused)最近最久未使用缓存
	INT [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newLRUCache($expr$, $arg$) 

.newWeakCache : ht>创建弱引用缓存
	LONG [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newWeakCache($expr$) 

.newFIFOCache : ht>创建FIFO(firstinfirstout)先进先出缓存
	INT [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newFIFOCache($expr$, $arg$) 

.newTimedCache : ht>创建定时缓存
	LONG [cn.hutool.cache.CacheUtil]  →  cn.hutool.cache.CacheUtil.newTimedCache($expr$) 



######## hutool-captcha-5.8.10.postfixTemplates ######## 
######## cn.hutool.captcha.CaptchaUtil
.createShearCaptcha : ht>创建扭曲干扰的验证码,默认5位验证码
	INT [cn.hutool.captcha.CaptchaUtil]  →  cn.hutool.captcha.CaptchaUtil.createShearCaptcha($expr$, $arg$) 

.createLineCaptcha : ht>创建线干扰的验证码
	INT [cn.hutool.captcha.CaptchaUtil]  →  cn.hutool.captcha.CaptchaUtil.createLineCaptcha($expr$, $arg$) 

.createCircleCaptcha : ht>创建圆圈干扰的验证码
	INT [cn.hutool.captcha.CaptchaUtil]  →  cn.hutool.captcha.CaptchaUtil.createCircleCaptcha($expr$, $arg$) 

.createGifCaptcha : ht>创建GIF验证码
	INT [cn.hutool.captcha.CaptchaUtil]  →  cn.hutool.captcha.CaptchaUtil.createGifCaptcha($expr$, $arg$) 



######## hutool-core-5.8.10.postfixTemplates ######## 
######## cn.hutool.core.util.HashUtil
.cityHash32 : ht>CityHash算法32-bit实现
	ARRAY [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.cityHash32($expr$) 

.murmur32 : ht>MurmurHash算法32-bit实现
	ARRAY [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.murmur32($expr$) 

.fnvHash : ht>改进的32位FNV算法1
	ARRAY [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.fnvHash($expr$) 
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.fnvHash($expr$) 

.murmur128 : ht>MurmurHash算法128-bit实现
	ARRAY [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.murmur128($expr$) 

.apHash : ht>AP算法
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.apHash($expr$) 

.rsHash : ht>RS算法hash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.rsHash($expr$) 

.additiveHash : ht>加法hash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.additiveHash($expr$, $arg$) 

.djbHash : ht>DJB算法
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.djbHash($expr$) 

.identityHashCode : ht>根据对象的内存地址生成相应的Hash值
	java.lang.Object [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.identityHashCode($expr$) 

.zobrist : ht>ZobristHashing
	ARRAY [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.zobrist($expr$, $arg$) 

.metroHash64 : ht>MetroHash算法64-bit实现
	ARRAY [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.metroHash64($expr$, $arg$) 

.tianlHash : ht>TianLHash算法
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.tianlHash($expr$) 

.hfHash : ht>HFHash算法
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.hfHash($expr$) 

.metroHash128 : ht>MetroHash算法128-bit实现
	ARRAY [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.metroHash128($expr$, $arg$) 

.universal : ht>UniversalHashing
	ARRAY [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.universal($expr$, $arg$) 

.javaDefaultHash : ht>JAVA自己带的算法
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.javaDefaultHash($expr$) 

.pjwHash : ht>PJW算法
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.pjwHash($expr$) 

.bernstein : ht>Bernstein'shash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.bernstein($expr$) 

.murmur64 : ht>MurmurHash算法64-bit实现
	ARRAY [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.murmur64($expr$) 

.hfIpHash : ht>HFIPHash算法
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.hfIpHash($expr$) 

.cityHash64 : ht>CityHash算法64-bit实现
	ARRAY [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.cityHash64($expr$, $arg$) 

.elfHash : ht>ELF算法
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.elfHash($expr$) 

.jsHash : ht>JS算法
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.jsHash($expr$) 

.cityHash128 : ht>CityHash算法128-bit实现
	ARRAY [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.cityHash128($expr$, $arg$) 

.rotatingHash : ht>旋转hash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.rotatingHash($expr$, $arg$) 

.intHash : ht>ThomasWang的算法,整数hash
	INT [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.intHash($expr$) 

.dekHash : ht>DEK算法
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.dekHash($expr$) 

.sdbmHash : ht>SDBM算法
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.sdbmHash($expr$) 

.mixHash : ht>混合hash算法,输出64位的值
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.mixHash($expr$) 

.oneByOneHash : ht>一次一个hash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.oneByOneHash($expr$) 

.bkdrHash : ht>BKDR算法
	java.lang.String [cn.hutool.core.util.HashUtil]  →  cn.hutool.core.util.HashUtil.bkdrHash($expr$) 



######## cn.hutool.core.exceptions.ExceptionUtil
.stacktraceToString : ht>堆栈转为完整字符串
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.stacktraceToString($expr$, $arg$) 

.wrapAndThrow : ht>包装异常并重新抛出此异常
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.wrapAndThrow($expr$) 

.getMessage : ht>获得完整消息,包括异常名,消息格式为:{SimpleClassName}:{ThrowableMessage}
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.getMessage($expr$) 

.getSimpleMessage : ht>获得消息,调用异常类的getMessage方法
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.getSimpleMessage($expr$) 

.unwrap : ht>剥离反射引发的InvocationTargetException、UndeclaredThrowableException中间异常,返回业务本身的异常
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.unwrap($expr$) 

.isCausedBy : ht>判断是否由指定异常类引起
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.isCausedBy($expr$, $arg$) 

.getStackElement : ht>获取指定层的堆栈信息
	java.lang.String [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.getStackElement($expr$, $arg$) 
	INT [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.getStackElement($expr$) 

.wrapRuntime : ht>将指定的消息包装为运行时异常
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.wrapRuntime($expr$) 
	java.lang.String [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.wrapRuntime($expr$) 

.getThrowableList : ht>获取异常链上所有异常的集合,如果Throwable对象没有cause,返回只有一个节点的List
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.getThrowableList($expr$) 

.wrapRuntimeAndThrow : ht>将消息包装为运行时异常并抛出
	java.lang.String [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.wrapRuntimeAndThrow($expr$) 

.isFromOrSuppressedThrowable : ht>判断指定异常是否来自或者包含指定异常
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.isFromOrSuppressedThrowable($expr$, $arg$) 

.convertFromOrSuppressedThrowable : ht>转化指定异常为来自或者包含指定异常
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.convertFromOrSuppressedThrowable($expr$, $arg$) 

.stacktraceToOneLineString : ht>堆栈转为单行完整字符串
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.stacktraceToOneLineString($expr$, $arg$) 

.getRootCause : ht>获取异常链中最尾端的异常,即异常最早发生的异常对象
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.getRootCause($expr$) 

.wrap : ht>包装一个异常
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.wrap($expr$, $arg$) 

.getRootCauseMessage : ht>获取异常链中最尾端的异常的消息,消息格式为:{SimpleClassName}:{ThrowableMessage}
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.getRootCauseMessage($expr$) 

.getCausedBy : ht>获取由指定异常类引起的异常
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.getCausedBy($expr$, $arg$) 



######## cn.hutool.core.collection.ListUtil
.sub : ht>截取集合的部分
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.sub($expr$, $arg$) 

.swapElement : ht>将指定元素交换到指定元素位置,其他元素的索引值不变
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.swapElement($expr$, $arg$) 

.toList : ht>新建一个ArrayList
	ARRAY [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.toList($expr$) 
	java.util.Iterator [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.toList($expr$) 
	java.util.Enumeration [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.toList($expr$) 
	java.util.Collection [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.toList($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.toList($expr$) 

.sort : ht>针对List排序,排序会修改原List
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.sort($expr$, $arg$) 

.reverse : ht>反序给定List,会在原List基础上直接修改
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.reverse($expr$) 

.list : ht>新建一个List
	BOOLEAN [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.list($expr$, $arg$) 

.toLinkedList : ht>新建LinkedList
	ARRAY [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.toLinkedList($expr$) 

.setOrPadding : ht>在指定位置设置元素。当index小于List的长度时,替换指定位置的值,否则追加null直到到达index后,设置值
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.setOrPadding($expr$, $arg$) 

.splitAvg : ht>将集合平均分成多个list,返回这个集合的列表
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.splitAvg($expr$, $arg$) 

.lastIndexOf : ht>获取匹配规则定义中匹配到元素的最后位置
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.lastIndexOf($expr$, $arg$) 

.sortByPinyin : ht>根据汉字的拼音顺序排序
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.sortByPinyin($expr$) 

.unmodifiable : ht>将对应List转换为不可修改的List
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.unmodifiable($expr$) 

.split : ht>对集合按照指定长度分段,每一个段为单独的集合,返回这个集合的列表
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.split($expr$, $arg$) 

.partition : ht>通过传入分区长度,将指定列表分区为不同的块,每块区域的长度相同(最后一块可能小于长度)
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.partition($expr$, $arg$) 

.swapTo : ht>将指定元素交换到指定索引位置,其他元素的索引值不变
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.swapTo($expr$, $arg$) 

.sortByProperty : ht>根据Bean的属性排序
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.sortByProperty($expr$, $arg$) 

.of : ht>数组转为一个不可变List
	ARRAY [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.of($expr$) 

.indexOfAll : ht>获取匹配规则定义中匹配到元素的所有位置
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.indexOfAll($expr$, $arg$) 

.toCopyOnWriteArrayList : ht>新建一个CopyOnWriteArrayList
	java.util.Collection [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.toCopyOnWriteArrayList($expr$) 

.setOrAppend : ht>设置或增加元素。当index小于List的长度时,替换指定位置的值,否则在尾部追加
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.setOrAppend($expr$, $arg$) 

.page : ht>对指定List分页取值
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.page($expr$, $arg$) 
	INT [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.page($expr$, $arg$) 

.reverseNew : ht>反序给定List,会创建一个新的List,原List数据不变
	java.util.List [cn.hutool.core.collection.ListUtil]  →  cn.hutool.core.collection.ListUtil.reverseNew($expr$) 



######## cn.hutool.core.util.ZipUtil
.zip : ht>对文件或文件目录进行压缩
	java.util.zip.ZipOutputStream [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.zip($expr$, $arg$) 
	java.io.OutputStream [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.zip($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.zip($expr$, $arg$) 
	java.io.File [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.zip($expr$, $arg$) 

.listFileNames : ht>获取Zip文件中指定目录下的所有文件,只显示文件,不显示目录
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.listFileNames($expr$, $arg$) 

.read : ht>读取并处理Zip文件中的每一个ZipEntry
	java.util.zip.ZipInputStream [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.read($expr$, $arg$) 
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.read($expr$, $arg$) 

.unGzip : ht>Gzip解压处理
	ARRAY [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.unGzip($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.unGzip($expr$, $arg$) 

.gzip : ht>Gzip压缩处理
	ARRAY [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.gzip($expr$) 
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.gzip($expr$, $arg$) 
	java.io.File [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.gzip($expr$) 
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.gzip($expr$, $arg$) 

.unzip : ht>解压
	java.util.zip.ZipInputStream [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.unzip($expr$, $arg$) 
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.unzip($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.unzip($expr$, $arg$) 
	java.io.File [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.unzip($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.unzip($expr$, $arg$) 

.toZipFile : ht>将Zip文件转换为ZipFile
	java.io.File [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.toZipFile($expr$, $arg$) 

.unzipFileBytes : ht>从Zip文件中提取指定的文件为bytes
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.unzipFileBytes($expr$, $arg$) 
	java.io.File [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.unzipFileBytes($expr$, $arg$) 

.getZipOutputStream : ht>获得ZipOutputStream
	java.io.OutputStream [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.getZipOutputStream($expr$, $arg$) 

.zlib : ht>打成Zlib压缩包
	ARRAY [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.zlib($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.zlib($expr$, $arg$) 
	java.io.File [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.zlib($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.zlib($expr$, $arg$) 

.get : ht>获取压缩包中的指定文件流
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.get($expr$, $arg$) 
	java.io.File [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.get($expr$, $arg$) 

.getStream : ht>获取指定ZipEntry的流,用于读取这个entry的内容
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.getStream($expr$, $arg$) 

.unZlib : ht>Zlib解压缩处理
	ARRAY [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.unZlib($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.unZlib($expr$, $arg$) 

.append : ht>在zip文件中添加新文件或目录
	java.nio.file.Path [cn.hutool.core.util.ZipUtil]  →  cn.hutool.core.util.ZipUtil.append($expr$, $arg$) 



######## cn.hutool.core.compiler.CompilerUtil
.compile : ht>编译指定的源码文件
	ARRAY [cn.hutool.core.compiler.CompilerUtil]  →  cn.hutool.core.compiler.CompilerUtil.compile($expr$) 

.getFileManager : ht>获取StandardJavaFileManager
	javax.tools.DiagnosticListener [cn.hutool.core.compiler.CompilerUtil]  →  cn.hutool.core.compiler.CompilerUtil.getFileManager($expr$) 

.getCompiler : ht>获取JavaSourceCompiler
	java.lang.ClassLoader [cn.hutool.core.compiler.CompilerUtil]  →  cn.hutool.core.compiler.CompilerUtil.getCompiler($expr$) 

.getTask : ht>新建编译任务
	javax.tools.JavaFileManager [cn.hutool.core.compiler.CompilerUtil]  →  cn.hutool.core.compiler.CompilerUtil.getTask($expr$, $arg$) 



######## cn.hutool.core.lang.caller.CallerUtil
.getCaller : ht>获得调用者,指定第几级调用者
	INT [cn.hutool.core.lang.caller.CallerUtil]  →  cn.hutool.core.lang.caller.CallerUtil.getCaller($expr$) 

.isCalledBy : ht>是否被指定类调用
	java.lang.Class [cn.hutool.core.lang.caller.CallerUtil]  →  cn.hutool.core.lang.caller.CallerUtil.isCalledBy($expr$) 

.getCallerMethodName : ht>获取调用此方法的方法名
	BOOLEAN [cn.hutool.core.lang.caller.CallerUtil]  →  cn.hutool.core.lang.caller.CallerUtil.getCallerMethodName($expr$) 



######## cn.hutool.core.net.SSLUtil
.createSSLContext : ht>创建SSLContext
	java.lang.String [cn.hutool.core.net.SSLUtil]  →  cn.hutool.core.net.SSLUtil.createSSLContext($expr$, $arg$) 



######## cn.hutool.core.util.RandomUtil
.weightRandom : ht>带有权重的随机生成器
	ARRAY [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.weightRandom($expr$) 
	java.lang.Iterable [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.weightRandom($expr$) 

.randomInt : ht>获得指定范围内的随机数
	INT [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomInt($expr$, $arg$) 

.randomNumbers : ht>获得一个只包含数字的字符串
	INT [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomNumbers($expr$) 

.randomString : ht>获得一个随机的字符串(只包含数字和字符)
	java.lang.String [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomString($expr$, $arg$) 
	INT [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomString($expr$) 

.randomEles : ht>随机获得列表中的一定量元素
	java.util.List [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomEles($expr$, $arg$) 

.randomChar : ht>随机字符
	java.lang.String [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomChar($expr$) 

.randomDouble : ht>获得指定范围内的随机数
	DOUBLE [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomDouble($expr$, $arg$) 
	INT [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomDouble($expr$, $arg$) 

.getSecureRandom : ht>获取SHA1PRNG的SecureRandom,类提供加密的强随机数生成器(RNG)
	ARRAY [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.getSecureRandom($expr$) 

.randomDate : ht>以给定日期为基准,随机产生一个日期
	java.util.Date [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomDate($expr$, $arg$) 

.randomBigDecimal : ht>获得指定范围内的随机数
	java.math.BigDecimal [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomBigDecimal($expr$, $arg$) 

.randomEleList : ht>随机获得列表中的一定量的元素,返回List
	java.util.List [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomEleList($expr$, $arg$) 

.randomEleSet : ht>随机获得列表中的一定量的不重复元素,返回Set
	java.util.Collection [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomEleSet($expr$, $arg$) 

.randomStringUpper : ht>获得一个随机的字符串(只包含数字和大写字符)
	INT [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomStringUpper($expr$) 

.getRandom : ht>获取随机数产生器
	BOOLEAN [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.getRandom($expr$) 

.randomStringWithoutStr : ht>获得一个随机的字符串(只包含数字和小写字母)并排除指定字符串
	INT [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomStringWithoutStr($expr$, $arg$) 

.randomDay : ht>以当天为基准,随机产生一个日期
	INT [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomDay($expr$, $arg$) 

.createSecureRandom : ht>创建SecureRandom,类提供加密的强随机数生成器(RNG)
	ARRAY [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.createSecureRandom($expr$) 

.randomEle : ht>随机获得数组中的元素
	java.util.List [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomEle($expr$, $arg$) 
	ARRAY [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomEle($expr$, $arg$) 

.randomInts : ht>创建指定长度的随机索引
	INT [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomInts($expr$) 

.getSHA1PRNGRandom : ht>获取SHA1PRNG的SecureRandom,类提供加密的强随机数生成器(RNG)
	ARRAY [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.getSHA1PRNGRandom($expr$) 

.randomLong : ht>获得指定范围内的随机数[0,limit)
	LONG [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomLong($expr$, $arg$) 

.randomBytes : ht>随机bytes
	INT [cn.hutool.core.util.RandomUtil]  →  cn.hutool.core.util.RandomUtil.randomBytes($expr$) 



######## cn.hutool.core.date.TemporalAccessorUtil
.get : ht>安全获取时间的某个属性,属性不存在返回最小值,一般为0
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  cn.hutool.core.date.TemporalAccessorUtil.get($expr$, $arg$) 

.format : ht>格式化日期时间为指定格式
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  cn.hutool.core.date.TemporalAccessorUtil.format($expr$, $arg$) 

.toEpochMilli : ht>TemporalAccessor转换为时间戳(从1970-01-01T00:00:00Z开始的毫秒数)
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  cn.hutool.core.date.TemporalAccessorUtil.toEpochMilli($expr$) 

.toInstant : ht>TemporalAccessor转换为Instant对象
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  cn.hutool.core.date.TemporalAccessorUtil.toInstant($expr$) 

.isIn : ht>当前日期是否在日期指定范围内
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  cn.hutool.core.date.TemporalAccessorUtil.isIn($expr$, $arg$) 



######## cn.hutool.core.util.URLUtil
.getStringURI : ht>获取string协议的URL,类似于string:///xxxxx
	java.lang.CharSequence [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getStringURI($expr$) 

.encodeBlank : ht>单独编码URL中的空白符,空白符编码为%20
	java.lang.CharSequence [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.encodeBlank($expr$) 

.isJarURL : ht>提供的URL是否为jar包URL协议包括:"jar","zip","vfszip"或"wsjar"
	java.net.URL [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.isJarURL($expr$) 

.getReader : ht>获得Reader
	java.net.URL [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getReader($expr$, $arg$) 

.toURI : ht>转字符串为URI
	java.net.URL [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.toURI($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.toURI($expr$, $arg$) 

.isJarFileURL : ht>提供的URL是否为Jar文件URL判断依据为file协议且扩展名为.jar
	java.net.URL [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.isJarFileURL($expr$) 

.completeUrl : ht>补全相对路径
	java.lang.String [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.completeUrl($expr$, $arg$) 

.getDecodedPath : ht>从URL对象中获取不被编码的路径Path
	java.net.URL [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getDecodedPath($expr$) 

.buildQuery : ht>将Map形式的Form表单数据转换为Url参数形式
	java.util.Map [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.buildQuery($expr$, $arg$) 

.getContentLength : ht>获取指定URL对应资源的内容长度,对于Http,其长度使用Content-Length头决定
	java.net.URL [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getContentLength($expr$) 

.decode : ht>解码URL
	java.lang.String [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.decode($expr$, $arg$) 

.url : ht>通过一个字符串形式的URL地址创建URL对象
	java.net.URI [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.url($expr$) 
	java.lang.String [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.url($expr$, $arg$) 

.getJarFile : ht>从URL中获取JarFile
	java.net.URL [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getJarFile($expr$) 

.getURL : ht>获得URL,常用于使用绝对路径时的情况
	java.lang.String [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getURL($expr$, $arg$) 
	java.io.File [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getURL($expr$) 

.isFileURL : ht>提供的URL是否为文件
	java.net.URL [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.isFileURL($expr$) 

.toUrlForHttp : ht>将URL字符串转换为URL对象,并做必要验证
	java.lang.String [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.toUrlForHttp($expr$, $arg$) 

.normalize : ht>标准化URL字符串,包括
	java.lang.String [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.normalize($expr$, $arg$) 

.getDataUriBase64 : ht>DataURIScheme封装,数据格式为Base64。dataURIscheme允许我们使用内联(inline-code)的方式在网页中包含数据
	java.lang.String [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getDataUriBase64($expr$, $arg$) 

.getPath : ht>获得path部分
	java.lang.String [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getPath($expr$) 

.getStream : ht>从URL中获取流
	java.net.URL [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getStream($expr$) 

.getHost : ht>获取URL中域名部分,只保留URL中的协议(Protocol)、Host,其它为null
	java.net.URL [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getHost($expr$) 

.getDataUri : ht>DataURIScheme封装。dataURIscheme允许我们使用内联(inline-code)的方式在网页中包含数据
	java.lang.String [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getDataUri($expr$, $arg$) 

.getURLs : ht>获得URL,常用于使用绝对路径时的情况
	ARRAY [cn.hutool.core.util.URLUtil]  →  cn.hutool.core.util.URLUtil.getURLs($expr$) 



######## cn.hutool.core.swing.DesktopUtil
.print : ht>使用关联应用程序的打印命令,用本机桌面打印设备来打印文件
	java.io.File [cn.hutool.core.swing.DesktopUtil]  →  cn.hutool.core.swing.DesktopUtil.print($expr$) 

.mail : ht>使用平台默认浏览器打开指定URL地址
	java.lang.String [cn.hutool.core.swing.DesktopUtil]  →  cn.hutool.core.swing.DesktopUtil.mail($expr$) 

.edit : ht>启动关联编辑器应用程序并打开用于编辑的文件
	java.io.File [cn.hutool.core.swing.DesktopUtil]  →  cn.hutool.core.swing.DesktopUtil.edit($expr$) 

.open : ht>启动关联应用程序来打开文件
	java.io.File [cn.hutool.core.swing.DesktopUtil]  →  cn.hutool.core.swing.DesktopUtil.open($expr$) 

.browse : ht>使用平台默认浏览器打开指定URL地址
	java.net.URI [cn.hutool.core.swing.DesktopUtil]  →  cn.hutool.core.swing.DesktopUtil.browse($expr$) 
	java.lang.String [cn.hutool.core.swing.DesktopUtil]  →  cn.hutool.core.swing.DesktopUtil.browse($expr$) 



######## cn.hutool.core.compiler.DiagnosticUtil
.getMessages : ht>获取DiagnosticCollector收集到的诊断信息,以文本返回
	javax.tools.DiagnosticCollector [cn.hutool.core.compiler.DiagnosticUtil]  →  cn.hutool.core.compiler.DiagnosticUtil.getMessages($expr$) 



######## cn.hutool.core.net.URLEncodeUtil
.encode : ht>编码URL,默认使用UTF-8编码
	java.lang.String [cn.hutool.core.net.URLEncodeUtil]  →  cn.hutool.core.net.URLEncodeUtil.encode($expr$, $arg$) 

.encodeFragment : ht>URL的FragmentURLEncoder
	java.lang.String [cn.hutool.core.net.URLEncodeUtil]  →  cn.hutool.core.net.URLEncodeUtil.encodeFragment($expr$, $arg$) 

.encodeQuery : ht>编码URL,默认使用UTF-8编码
	java.lang.String [cn.hutool.core.net.URLEncodeUtil]  →  cn.hutool.core.net.URLEncodeUtil.encodeQuery($expr$, $arg$) 

.encodePathSegment : ht>编码URL,默认使用UTF-8编码
	java.lang.String [cn.hutool.core.net.URLEncodeUtil]  →  cn.hutool.core.net.URLEncodeUtil.encodePathSegment($expr$, $arg$) 

.encodeAll : ht>编码URL
	java.lang.String [cn.hutool.core.net.URLEncodeUtil]  →  cn.hutool.core.net.URLEncodeUtil.encodeAll($expr$, $arg$) 



######## cn.hutool.core.util.JAXBUtil
.beanToXml : ht>JavaBean转换成xml
	java.lang.Object [cn.hutool.core.util.JAXBUtil]  →  cn.hutool.core.util.JAXBUtil.beanToXml($expr$, $arg$) 

.xmlToBean : ht>XML文件转Bean
	java.lang.String [cn.hutool.core.util.JAXBUtil]  →  cn.hutool.core.util.JAXBUtil.xmlToBean($expr$, $arg$) 
	java.io.Reader [cn.hutool.core.util.JAXBUtil]  →  cn.hutool.core.util.JAXBUtil.xmlToBean($expr$, $arg$) 
	java.io.File [cn.hutool.core.util.JAXBUtil]  →  cn.hutool.core.util.JAXBUtil.xmlToBean($expr$, $arg$) 



######## cn.hutool.core.util.ReUtil
.extractMultiAndDelPre : ht>从content中匹配出多个值并根据template生成新的字符串
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.extractMultiAndDelPre($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.extractMultiAndDelPre($expr$, $arg$) 

.getAllGroups : ht>获得匹配的字符串匹配到的所有分组
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.getAllGroups($expr$, $arg$) 

.getFirstNumber : ht>从字符串中获得第一个整数
	java.lang.CharSequence [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.getFirstNumber($expr$) 

.delFirst : ht>删除匹配的第一个内容
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.delFirst($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.delFirst($expr$, $arg$) 

.count : ht>计算指定字符串中,匹配pattern的个数
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.count($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.count($expr$, $arg$) 

.getAllGroupNames : ht>根据给定正则查找字符串中的匹配项,返回所有匹配的分组名对应分组值
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.getAllGroupNames($expr$, $arg$) 

.replaceFirst : ht>替换匹配的第一个内容
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.replaceFirst($expr$, $arg$) 

.replaceAll : ht>替换所有正则匹配的文本,并使用自定义函数决定如何替换
	java.lang.CharSequence [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.replaceAll($expr$, $arg$) 

.isMatch : ht>给定内容是否匹配正则
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.isMatch($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.isMatch($expr$, $arg$) 

.findAll : ht>取得内容中匹配的所有结果
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.findAll($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.findAll($expr$, $arg$) 

.findAllGroup0 : ht>取得内容中匹配的所有结果,获得匹配的所有结果中正则对应分组0的内容
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.findAllGroup0($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.findAllGroup0($expr$, $arg$) 

.lastIndexOf : ht>找到指定正则匹配到第一个字符串的位置
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.lastIndexOf($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.lastIndexOf($expr$, $arg$) 

.contains : ht>指定内容中是否有表达式匹配的内容
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.contains($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.contains($expr$, $arg$) 

.getGroup0 : ht>获得匹配的字符串,获得正则中分组0的内容
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.getGroup0($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.getGroup0($expr$, $arg$) 

.findAllGroup1 : ht>取得内容中匹配的所有结果,获得匹配的所有结果中正则对应分组1的内容
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.findAllGroup1($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.findAllGroup1($expr$, $arg$) 

.extractMulti : ht>从content中匹配出多个值并根据template生成新的字符串
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.extractMulti($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.extractMulti($expr$, $arg$) 

.delAll : ht>删除匹配的全部内容
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.delAll($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.delAll($expr$, $arg$) 

.get : ht>获得匹配的字符串
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.get($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.get($expr$, $arg$) 

.getGroup1 : ht>获得匹配的字符串,获得正则中分组1的内容
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.getGroup1($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.getGroup1($expr$, $arg$) 

.indexOf : ht>找到指定正则匹配到字符串的开始位置
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.indexOf($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.indexOf($expr$, $arg$) 

.escape : ht>转义字符,将正则的关键字转义
	java.lang.CharSequence [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.escape($expr$) 
	CHAR [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.escape($expr$) 

.delPre : ht>删除正则匹配到的内容之前的字符如果没有找到,则返回原文
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.delPre($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.delPre($expr$, $arg$) 

.delLast : ht>删除匹配的最后一个内容
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.delLast($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReUtil]  →  cn.hutool.core.util.ReUtil.delLast($expr$, $arg$) 



######## cn.hutool.core.util.XmlUtil
.beanToXml : ht>将Bean转换为XML
	java.lang.Object [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.beanToXml($expr$, $arg$) 

.readXML : ht>读取解析XML文件
	org.xml.sax.InputSource [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.readXML($expr$) 
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.readXML($expr$) 
	java.io.Reader [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.readXML($expr$) 
	java.io.File [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.readXML($expr$) 
	java.io.InputStream [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.readXML($expr$) 

.readObjectFromXml : ht>从XML中读取对象ReadsserializedobjectfromtheXMLfile
	org.xml.sax.InputSource [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.readObjectFromXml($expr$) 
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.readObjectFromXml($expr$) 
	java.io.File [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.readObjectFromXml($expr$) 

.mapToXmlStr : ht>将Map转换为XML格式的字符串
	java.util.Map [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.mapToXmlStr($expr$, $arg$) 

.setNamespaceAware : ht>设置是否打开命名空间支持,默认打开
	BOOLEAN [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.setNamespaceAware($expr$) 

.getOwnerDocument : ht>获取节点所在的Document
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.getOwnerDocument($expr$) 

.createXml : ht>创建XML文档
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.createXml($expr$, $arg$) 

.transform : ht>将XML文档写出
	javax.xml.transform.Source [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.transform($expr$, $arg$) 

.getRootElement : ht>获得XML文档根节点
	org.w3c.dom.Document [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.getRootElement($expr$) 

.getElementByXPath : ht>通过XPath方式读取XML节点等信息
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.getElementByXPath($expr$, $arg$) 

.readBySax : ht>使用Sax方式读取指定的XML
	org.xml.sax.InputSource [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.readBySax($expr$, $arg$) 
	java.io.Reader [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.readBySax($expr$, $arg$) 
	java.io.File [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.readBySax($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.readBySax($expr$, $arg$) 

.getNodeByXPath : ht>通过XPath方式读取XML节点等信息
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.getNodeByXPath($expr$, $arg$) 

.getByXPath : ht>通过XPath方式读取XML节点等信息
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.getByXPath($expr$, $arg$) 

.appendText : ht>创建文本子节点
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.appendText($expr$, $arg$) 

.write : ht>将XML文档写出
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.write($expr$, $arg$) 

.escape : ht>转义XML特殊字符
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.escape($expr$) 

.toStr : ht>将XML文档转换为String
	org.w3c.dom.Document [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.toStr($expr$, $arg$) 
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.toStr($expr$, $arg$) 

.appendChild : ht>在已有节点上创建子节点
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.appendChild($expr$, $arg$) 

.elementText : ht>根据节点名获得第一个子节点
	org.w3c.dom.Element [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.elementText($expr$, $arg$) 

.cleanComment : ht>去除XML文本中的注释内容
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.cleanComment($expr$) 

.xmlToBean : ht>XML转JavaBean
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.xmlToBean($expr$, $arg$) 

.isElement : ht>给定节点是否为Element类型节点
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.isElement($expr$) 

.getNodeListByXPath : ht>通过XPath方式读取XML的NodeList
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.getNodeListByXPath($expr$, $arg$) 

.parseXml : ht>将String类型的XML转换为XML文档
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.parseXml($expr$) 

.format : ht>格式化XML输出
	org.w3c.dom.Document [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.format($expr$) 
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.format($expr$) 

.unescape : ht>反转义XML特殊字符
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.unescape($expr$) 

.mapToXml : ht>将Map转换为XML
	java.util.Map [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.mapToXml($expr$, $arg$) 

.cleanInvalid : ht>去除XML文本中的无效字符
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.cleanInvalid($expr$) 

.writeObjectAsXml : ht>将可序列化的对象转换为XML写入文件,已经存在的文件将被覆盖
	java.io.File [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.writeObjectAsXml($expr$, $arg$) 

.transElements : ht>将NodeList转换为Element列表
	org.w3c.dom.NodeList [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.transElements($expr$) 
	org.w3c.dom.Element [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.transElements($expr$, $arg$) 

.getElement : ht>根据节点名获得第一个子节点
	org.w3c.dom.Element [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.getElement($expr$, $arg$) 

.getElements : ht>根据节点名获得子节点列表
	org.w3c.dom.Element [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.getElements($expr$, $arg$) 

.xmlToMap : ht>XML格式字符串转换为Map
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.xmlToMap($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.xmlToMap($expr$, $arg$) 

.toFile : ht>将XML文档写入到文件
	org.w3c.dom.Document [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.toFile($expr$, $arg$) 

.append : ht>追加数据子节点,可以是Map、集合、文本
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  cn.hutool.core.util.XmlUtil.append($expr$, $arg$) 



######## cn.hutool.core.util.CoordinateUtil
.outOfChina : ht>判断坐标是否在国外
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  cn.hutool.core.util.CoordinateUtil.outOfChina($expr$, $arg$) 

.wgs84ToGcj02 : ht>WGS84转换为火星坐标系(GCJ-02)
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  cn.hutool.core.util.CoordinateUtil.wgs84ToGcj02($expr$, $arg$) 

.bd09toWgs84 : ht>百度坐标系(BD-09)与WGS84的转换
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  cn.hutool.core.util.CoordinateUtil.bd09toWgs84($expr$, $arg$) 

.gcj02ToBd09 : ht>火星坐标系(GCJ-02)与百度坐标系(BD-09)的转换
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  cn.hutool.core.util.CoordinateUtil.gcj02ToBd09($expr$, $arg$) 

.gcj02ToWgs84 : ht>火星坐标系(GCJ-02)转换为WGS84
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  cn.hutool.core.util.CoordinateUtil.gcj02ToWgs84($expr$, $arg$) 

.wgs84ToBd09 : ht>WGS84坐标转为百度坐标系(BD-09)坐标
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  cn.hutool.core.util.CoordinateUtil.wgs84ToBd09($expr$, $arg$) 

.bd09ToGcj02 : ht>百度坐标系(BD-09)与火星坐标系(GCJ-02)的转换
	DOUBLE [cn.hutool.core.util.CoordinateUtil]  →  cn.hutool.core.util.CoordinateUtil.bd09ToGcj02($expr$, $arg$) 



######## cn.hutool.core.io.NioUtil
.read : ht>从FileChannel中读取内容
	java.nio.channels.ReadableByteChannel [cn.hutool.core.io.NioUtil]  →  cn.hutool.core.io.NioUtil.read($expr$, $arg$) 
	java.nio.channels.FileChannel [cn.hutool.core.io.NioUtil]  →  cn.hutool.core.io.NioUtil.read($expr$, $arg$) 

.copy : ht>拷贝文件Channel,使用NIO,拷贝后不会关闭channel
	java.nio.channels.ReadableByteChannel [cn.hutool.core.io.NioUtil]  →  cn.hutool.core.io.NioUtil.copy($expr$, $arg$) 
	java.nio.channels.FileChannel [cn.hutool.core.io.NioUtil]  →  cn.hutool.core.io.NioUtil.copy($expr$, $arg$) 

.readUtf8 : ht>从FileChannel中读取UTF-8编码内容
	java.nio.channels.FileChannel [cn.hutool.core.io.NioUtil]  →  cn.hutool.core.io.NioUtil.readUtf8($expr$) 

.close : ht>关闭
	java.lang.AutoCloseable [cn.hutool.core.io.NioUtil]  →  cn.hutool.core.io.NioUtil.close($expr$) 

.copyByNIO : ht>拷贝流
	java.io.InputStream [cn.hutool.core.io.NioUtil]  →  cn.hutool.core.io.NioUtil.copyByNIO($expr$, $arg$) 



######## cn.hutool.core.util.ServiceLoaderUtil
.loadFirst : ht>加载第一个服务,如果用户定义了多个接口实现类,只获取第一个
	java.lang.Class [cn.hutool.core.util.ServiceLoaderUtil]  →  cn.hutool.core.util.ServiceLoaderUtil.loadFirst($expr$) 

.load : ht>加载服务
	java.lang.Class [cn.hutool.core.util.ServiceLoaderUtil]  →  cn.hutool.core.util.ServiceLoaderUtil.load($expr$, $arg$) 

.loadList : ht>加载服务并已list列表返回
	java.lang.Class [cn.hutool.core.util.ServiceLoaderUtil]  →  cn.hutool.core.util.ServiceLoaderUtil.loadList($expr$, $arg$) 

.loadFirstAvailable : ht>。加载第一个可用服务,如果用户定义了多个接口实现类,只获取第一个不报错的服务
	java.lang.Class [cn.hutool.core.util.ServiceLoaderUtil]  →  cn.hutool.core.util.ServiceLoaderUtil.loadFirstAvailable($expr$) 



######## cn.hutool.core.img.FontUtil
.getDimension : ht>获得字体对应字符串的长宽信息
	java.awt.FontMetrics [cn.hutool.core.img.FontUtil]  →  cn.hutool.core.img.FontUtil.getDimension($expr$, $arg$) 

.createSansSerifFont : ht>创建SansSerif字体
	INT [cn.hutool.core.img.FontUtil]  →  cn.hutool.core.img.FontUtil.createSansSerifFont($expr$) 

.createFont : ht>根据文件创建字体
	java.lang.String [cn.hutool.core.img.FontUtil]  →  cn.hutool.core.img.FontUtil.createFont($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.FontUtil]  →  cn.hutool.core.img.FontUtil.createFont($expr$) 
	java.io.InputStream [cn.hutool.core.img.FontUtil]  →  cn.hutool.core.img.FontUtil.createFont($expr$) 



######## cn.hutool.core.date.LocalDateTimeUtil
.ofDate : ht>TemporalAccessor转LocalDate,使用默认时区
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.ofDate($expr$) 

.weekOfYear : ht>获得指定日期是所在年份的第几周,如
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.weekOfYear($expr$) 

.offset : ht>日期偏移,根据field不同加不同值(偏移会修改传入的对象)
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.offset($expr$, $arg$) 

.ofUTC : ht>Instant转LocalDateTime,使用UTC时区
	java.time.Instant [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.ofUTC($expr$) 
	LONG [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.ofUTC($expr$) 

.betweenPeriod : ht>获取两个日期的表象时间差,如果结束时间早于开始时间,获取结果为负
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.betweenPeriod($expr$, $arg$) 

.formatNormal : ht>格式化日期时间为yyyy-MM-dd格式
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.formatNormal($expr$) 
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.formatNormal($expr$) 

.format : ht>格式化日期时间为指定格式
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.format($expr$, $arg$) 
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.format($expr$, $arg$) 

.toEpochMilli : ht>TemporalAccessor转换为时间戳(从1970-01-01T00:00:00Z开始的毫秒数)
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.toEpochMilli($expr$) 

.parse : ht>解析日期时间字符串为LocalDateTime
	java.lang.CharSequence [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.parse($expr$, $arg$) 

.isWeekend : ht>是否为周末(周六或周日)
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.isWeekend($expr$) 
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.isWeekend($expr$) 

.dayOfWeek : ht>获取LocalDate对应的星期值
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.dayOfWeek($expr$) 

.parseDate : ht>解析日期字符串为LocalDate
	java.lang.CharSequence [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.parseDate($expr$, $arg$) 

.of : ht>Instant转LocalDateTime
	java.util.Date [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.of($expr$) 
	java.time.ZonedDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.of($expr$) 
	java.time.Instant [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.of($expr$, $arg$) 
	LONG [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.of($expr$, $arg$) 
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.of($expr$) 

.isOverlap : ht>检查两个时间段是否有时间重叠
	java.time.chrono.ChronoLocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.isOverlap($expr$, $arg$) 

.endOfDay : ht>修改为一天的结束时间,例如
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.endOfDay($expr$, $arg$) 

.isSameDay : ht>比较两个日期是否为同一天
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.isSameDay($expr$, $arg$) 
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.isSameDay($expr$, $arg$) 

.isIn : ht>判断当前时间(默认时区)是否在指定范围内
	java.time.chrono.ChronoLocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.isIn($expr$, $arg$) 

.between : ht>获取两个日期的差,如果结束时间早于开始时间,获取结果为负
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.between($expr$, $arg$) 

.beginOfDay : ht>修改为一天的开始时间,例如:2020-02-0200:00:00,000
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.beginOfDay($expr$) 



######## cn.hutool.core.io.watch.WatchUtil
.createModify : ht>创建并初始化监听,监听修改事件
	java.net.URL [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.createModify($expr$, $arg$) 
	java.net.URI [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.createModify($expr$, $arg$) 
	java.lang.String [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.createModify($expr$, $arg$) 
	java.nio.file.Path [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.createModify($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.createModify($expr$, $arg$) 

.create : ht>创建并初始化监听
	java.net.URL [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.create($expr$, $arg$) 
	java.net.URI [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.create($expr$, $arg$) 
	java.lang.String [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.create($expr$, $arg$) 
	java.nio.file.Path [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.create($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.create($expr$, $arg$) 

.createAll : ht>创建并初始化监听,监听所有事件
	java.net.URL [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.createAll($expr$, $arg$) 
	java.net.URI [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.createAll($expr$, $arg$) 
	java.lang.String [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.createAll($expr$, $arg$) 
	java.nio.file.Path [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.createAll($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.createAll($expr$, $arg$) 

.register : ht>注册Watchable对象到WatchService服务
	java.nio.file.Watchable [cn.hutool.core.io.watch.WatchUtil]  →  cn.hutool.core.io.watch.WatchUtil.register($expr$, $arg$) 



######## cn.hutool.core.util.CharsetUtil
.charset : ht>转换为Charset对象
	java.lang.String [cn.hutool.core.util.CharsetUtil]  →  cn.hutool.core.util.CharsetUtil.charset($expr$) 

.defaultCharset : ht>探测编码
	INT [cn.hutool.core.util.CharsetUtil]  →  cn.hutool.core.util.CharsetUtil.defaultCharset($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.util.CharsetUtil]  →  cn.hutool.core.util.CharsetUtil.defaultCharset($expr$, $arg$) 

.parse : ht>解析字符串编码为Charset对象,解析失败返回系统默认编码
	java.lang.String [cn.hutool.core.util.CharsetUtil]  →  cn.hutool.core.util.CharsetUtil.parse($expr$, $arg$) 

.convert : ht>转换文件编码
	java.lang.String [cn.hutool.core.util.CharsetUtil]  →  cn.hutool.core.util.CharsetUtil.convert($expr$, $arg$) 
	java.io.File [cn.hutool.core.util.CharsetUtil]  →  cn.hutool.core.util.CharsetUtil.convert($expr$, $arg$) 



######## cn.hutool.core.util.ArrayUtil
.getArrayType : ht>根据数组元素类型,获取数组的类型
	java.lang.Class [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.getArrayType($expr$) 

.isAllEmpty : ht>是否存都为null或空对象,通过{@linkObjectUtil#isEmpty(Object)}判断元素
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isAllEmpty($expr$) 

.replace : ht>将新元素插入到到已有数组中的某个位置
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.replace($expr$, $arg$) 

.emptyCount : ht>计算null或空元素对象的个数,通过{@linkObjectUtil#isEmpty(Object)}判断元素
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.emptyCount($expr$) 

.firstMatch : ht>返回数组中第一个匹配规则的值
	cn.hutool.core.lang.Matcher [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.firstMatch($expr$, $arg$) 

.cast : ht>强转数组类型
	java.lang.Class [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.cast($expr$, $arg$) 

.removeEle : ht>移除数组中指定的元素
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.removeEle($expr$, $arg$) 

.indexOfSub : ht>查找子数组的位置
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.indexOfSub($expr$, $arg$) 

.toArray : ht>将集合转为数组
	java.util.Iterator [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.toArray($expr$, $arg$) 
	java.util.Collection [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.toArray($expr$, $arg$) 
	java.nio.ByteBuffer [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.toArray($expr$) 
	java.lang.Iterable [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.toArray($expr$, $arg$) 

.join : ht>以conjunction为分隔符将数组转换为字符串
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.join($expr$, $arg$) 
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.join($expr$, $arg$) 

.indexOf : ht>返回数组中指定元素所在位置,未找到返回{@link#INDEX_NOT_FOUND}
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.indexOf($expr$, $arg$) 

.zip : ht>映射键值(参考Python的zip()函数)
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.zip($expr$, $arg$) 

.hasEmpty : ht>是否存在null或空对象,通过{@linkObjectUtil#isEmpty(Object)}判断元素
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.hasEmpty($expr$) 

.nullToEmpty : ht>数组元素中的null转换为""
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.nullToEmpty($expr$) 

.swap : ht>交换数组中两个位置的值
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.swap($expr$, $arg$) 
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.swap($expr$, $arg$) 

.edit : ht>编辑数组
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.edit($expr$, $arg$) 

.removeEmpty : ht>去除null或者""元素
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.removeEmpty($expr$) 

.isAllNotEmpty : ht>是否存都不为null或空对象,通过{@linkObjectUtil#isEmpty(Object)}判断元素
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isAllNotEmpty($expr$) 

.containsAny : ht>数组中是否包含指定元素中的任意一个
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.containsAny($expr$, $arg$) 

.isAllNull : ht>多个字段是否全为null
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isAllNull($expr$) 

.isSortedDESC : ht>检查数组是否降序,即array[i].compareTo(array[i+1])&gt;=0,若传入空数组,则返回false
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isSortedDESC($expr$) 

.contains : ht>数组中是否包含元素
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.contains($expr$, $arg$) 

.getComponentType : ht>获取数组对象的元素类型
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.getComponentType($expr$) 
	java.lang.Class [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.getComponentType($expr$) 

.isSortedASC : ht>检查数组是否升序,即array[i].compareTo(array[i+1])&lt;=0,若传入空数组,则返回false
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isSortedASC($expr$) 

.isNotEmpty : ht>数组是否为非空
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isNotEmpty($expr$) 
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isNotEmpty($expr$) 

.isArray : ht>对象是否为数组对象
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isArray($expr$) 

.isSorted : ht>检查数组是否升序,即array[i].compareTo(array[i+1])&lt;=0,若传入空数组,则返回false
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isSorted($expr$, $arg$) 

.getAny : ht>获取数组中指定多个下标元素值,组成新数组
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.getAny($expr$, $arg$) 

.sub : ht>获取子数组
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.sub($expr$, $arg$) 
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.sub($expr$, $arg$) 

.hasNull : ht>是否包含null元素
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.hasNull($expr$) 

.insert : ht>将新元素插入到到已有数组中的某个位置
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.insert($expr$, $arg$) 
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.insert($expr$, $arg$) 

.distinct : ht>去重数组中的元素,去重后生成新的数组,原数组不变
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.distinct($expr$, $arg$) 

.isSub : ht>查找子数组的位置
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isSub($expr$, $arg$) 

.remove : ht>移除数组中对应位置的元素
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.remove($expr$, $arg$) 

.removeNull : ht>去除null元素
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.removeNull($expr$) 

.min : ht>取最小值
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.min($expr$, $arg$) 

.removeBlank : ht>去除null或者""或者空白字符串元素
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.removeBlank($expr$) 

.isAllNotNull : ht>多个字段是否全部不为null
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isAllNotNull($expr$) 

.get : ht>获取数组对象中指定index的值,支持负数,例如-1表示倒数第一个值
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.get($expr$, $arg$) 

.setOrAppend : ht>将元素值设置为数组的某个位置,当给定的index大于数组长度,则追加
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.setOrAppend($expr$, $arg$) 
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.setOrAppend($expr$, $arg$) 

.copy : ht>包装{@linkSystem#arraycopy(Object,int,Object,int,int)}
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.copy($expr$, $arg$) 

.map : ht>按照指定规则,将一种类型的数组转换为另一种类型
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.map($expr$, $arg$) 
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.map($expr$, $arg$) 

.defaultIfEmpty : ht>如果给定数组为空,返回默认数组
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.defaultIfEmpty($expr$, $arg$) 

.max : ht>取最大值
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.max($expr$, $arg$) 

.mapToSet : ht>按照指定规则,将一种类型的数组元素提取后转换为Set
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.mapToSet($expr$, $arg$) 

.containsAll : ht>数组中是否包含指定元素中的全部
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.containsAll($expr$, $arg$) 

.length : ht>获取数组长度
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.length($expr$) 

.isEmpty : ht>数组是否为空
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isEmpty($expr$) 
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.isEmpty($expr$) 

.newArray : ht>新建一个空数组
	java.lang.Class [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.newArray($expr$, $arg$) 
	INT [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.newArray($expr$) 

.containsIgnoreCase : ht>数组中是否包含元素,忽略大小写
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.containsIgnoreCase($expr$, $arg$) 

.reverse : ht>反转数组,会变更原数组
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.reverse($expr$, $arg$) 

.filter : ht>过滤
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.filter($expr$, $arg$) 

.lastIndexOf : ht>返回数组中指定元素所在最后的位置,未找到返回{@link#INDEX_NOT_FOUND}
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.lastIndexOf($expr$, $arg$) 

.addAll : ht>将多个数组合并在一起
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.addAll($expr$) 

.firstNonNull : ht>返回数组中第一个非空元素
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.firstNonNull($expr$) 

.equals : ht>判断两个数组是否相等,判断依据包括数组长度和每个元素都相等
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.equals($expr$, $arg$) 

.clone : ht>克隆数组,如果非数组返回null
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.clone($expr$) 
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.clone($expr$) 

.resize : ht>生成一个新的重新设置大小的数组
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.resize($expr$, $arg$) 
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.resize($expr$, $arg$) 

.matchIndex : ht>返回数组中第一个匹配规则的值的位置
	cn.hutool.core.lang.Matcher [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.matchIndex($expr$, $arg$) 

.indexOfIgnoreCase : ht>返回数组中指定元素所在位置,忽略大小写,未找到返回{@link#INDEX_NOT_FOUND}
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.indexOfIgnoreCase($expr$, $arg$) 

.toString : ht>数组或集合转String
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.toString($expr$) 

.lastIndexOfSub : ht>查找最后一个子数组的开始位置
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.lastIndexOfSub($expr$, $arg$) 

.shuffle : ht>打乱数组顺序,会变更原数组
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.shuffle($expr$, $arg$) 

.wrap : ht>包装数组对象
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.wrap($expr$) 

.append : ht>将新元素添加到已有数组中
	ARRAY [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.append($expr$, $arg$) 
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  cn.hutool.core.util.ArrayUtil.append($expr$, $arg$) 



######## cn.hutool.core.date.ZoneUtil
.toTimeZone : ht>ZoneId转换为TimeZone,null则返回系统默认值
	java.time.ZoneId [cn.hutool.core.date.ZoneUtil]  →  cn.hutool.core.date.ZoneUtil.toTimeZone($expr$) 

.toZoneId : ht>TimeZone转换为ZoneId,null则返回系统默认值
	java.util.TimeZone [cn.hutool.core.date.ZoneUtil]  →  cn.hutool.core.date.ZoneUtil.toZoneId($expr$) 



######## cn.hutool.core.date.CalendarUtil
.compare : ht>null安全的Calendar比较,null小于任何日期
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.compare($expr$, $arg$) 

.beginOfHour : ht>修改某小时的开始时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.beginOfHour($expr$) 

.yearAndQuarter : ht>获得指定日期年份和季度
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.yearAndQuarter($expr$) 
	LONG [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.yearAndQuarter($expr$, $arg$) 

.beginOfYear : ht>修改某年的开始时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.beginOfYear($expr$) 

.truncate : ht>修改日期为某个时间字段起始时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.truncate($expr$, $arg$) 

.isPM : ht>是否为下午
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.isPM($expr$) 

.beginOfSecond : ht>修改秒级别的开始时间,即忽略毫秒部分
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.beginOfSecond($expr$) 

.isSameWeek : ht>比较两个日期是否为同一周
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.isSameWeek($expr$, $arg$) 

.endOfQuarter : ht>获取某季度的结束时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.endOfQuarter($expr$) 

.beginOfWeek : ht>修改给定日期当前周的开始时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.beginOfWeek($expr$, $arg$) 

.endOfMinute : ht>修改某分钟的结束时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.endOfMinute($expr$) 

.endOfDay : ht>修改某天的结束时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.endOfDay($expr$) 

.isSameDay : ht>比较两个日期是否为同一天
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.isSameDay($expr$, $arg$) 

.getEndValue : ht>获取指定日期字段的最大值,例如分钟的最大值是59
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.getEndValue($expr$, $arg$) 

.calendar : ht>转换为Calendar对象
	java.util.Date [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.calendar($expr$) 
	LONG [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.calendar($expr$, $arg$) 

.ceiling : ht>修改日期为某个时间字段结束时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.ceiling($expr$, $arg$) 

.parseByPatterns : ht>通过给定的日期格式解析日期时间字符串
	java.lang.String [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.parseByPatterns($expr$, $arg$) 

.endOfWeek : ht>修改某周的结束时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.endOfWeek($expr$, $arg$) 

.beginOfMonth : ht>修改某月的开始时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.beginOfMonth($expr$) 

.isAM : ht>是否为上午
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.isAM($expr$) 

.endOfHour : ht>修改某小时的结束时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.endOfHour($expr$) 

.endOfYear : ht>修改某年的结束时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.endOfYear($expr$) 

.parse : ht>使用指定DateParser解析字符串为Calendar
	java.lang.CharSequence [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.parse($expr$, $arg$) 

.endOfMonth : ht>修改某月的结束时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.endOfMonth($expr$) 

.toInstant : ht>CalendarInstant对象
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.toInstant($expr$) 

.isSameMonth : ht>比较两个日期是否为同一月
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.isSameMonth($expr$, $arg$) 

.round : ht>修改日期为某个时间字段四舍五入时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.round($expr$, $arg$) 

.isSameInstant : ht>检查两个Calendar时间戳是否相同
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.isSameInstant($expr$, $arg$) 

.beginOfMinute : ht>修改某分钟的开始时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.beginOfMinute($expr$) 

.toLocalDateTime : ht>Calendar转换为LocalDateTime,使用系统默认时区
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.toLocalDateTime($expr$) 

.formatChineseDate : ht>将指定Calendar时间格式化为纯中文形式,比如
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.formatChineseDate($expr$, $arg$) 

.endOfSecond : ht>修改秒级别的结束时间,即毫秒设置为999
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.endOfSecond($expr$) 

.beginOfQuarter : ht>修改某季度的开始时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.beginOfQuarter($expr$) 

.getBeginValue : ht>获取指定日期字段的最小值,例如分钟的最小值是0
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.getBeginValue($expr$, $arg$) 

.beginOfDay : ht>修改某天的开始时间
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.beginOfDay($expr$) 

.age : ht>计算相对于dateToCompare的年龄,长用于计算指定生日在某年的年龄
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  cn.hutool.core.date.CalendarUtil.age($expr$, $arg$) 



######## cn.hutool.core.compiler.JavaFileObjectUtil
.getJavaFileObjects : ht>获取指定文件下的所有待编译的java文件,并以JavaFileObject形式返回
	java.io.File [cn.hutool.core.compiler.JavaFileObjectUtil]  →  cn.hutool.core.compiler.JavaFileObjectUtil.getJavaFileObjects($expr$) 

.isJavaFile : ht>是否是java文件
	java.lang.String [cn.hutool.core.compiler.JavaFileObjectUtil]  →  cn.hutool.core.compiler.JavaFileObjectUtil.isJavaFile($expr$) 

.isJarOrZipFile : ht>是否是jar或zip文件
	java.lang.String [cn.hutool.core.compiler.JavaFileObjectUtil]  →  cn.hutool.core.compiler.JavaFileObjectUtil.isJarOrZipFile($expr$) 



######## cn.hutool.core.swing.clipboard.ClipboardUtil
.set : ht>设置内容到剪贴板
	java.awt.datatransfer.Transferable [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  cn.hutool.core.swing.clipboard.ClipboardUtil.set($expr$, $arg$) 

.getStr : ht>从剪贴板的Transferable获取文本
	java.awt.datatransfer.Transferable [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  cn.hutool.core.swing.clipboard.ClipboardUtil.getStr($expr$) 

.get : ht>获取剪贴板内容
	java.awt.datatransfer.DataFlavor [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  cn.hutool.core.swing.clipboard.ClipboardUtil.get($expr$) 
	java.awt.datatransfer.Transferable [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  cn.hutool.core.swing.clipboard.ClipboardUtil.get($expr$, $arg$) 

.setStr : ht>设置字符串文本到剪贴板
	java.lang.String [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  cn.hutool.core.swing.clipboard.ClipboardUtil.setStr($expr$) 

.getImage : ht>从剪贴板的Transferable获取图片
	java.awt.datatransfer.Transferable [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  cn.hutool.core.swing.clipboard.ClipboardUtil.getImage($expr$) 

.listen : ht>监听剪贴板修改事件
	cn.hutool.core.swing.clipboard.ClipboardListener [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  cn.hutool.core.swing.clipboard.ClipboardUtil.listen($expr$, $arg$) 
	INT [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  cn.hutool.core.swing.clipboard.ClipboardUtil.listen($expr$, $arg$) 

.setImage : ht>设置图片到剪贴板
	java.awt.Image [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  cn.hutool.core.swing.clipboard.ClipboardUtil.setImage($expr$) 



######## cn.hutool.core.map.MapUtil
.getQuietly : ht>获取Map指定key的值,并转换为指定类型,此方法在转换失败后不抛异常,返回null
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.getQuietly($expr$, $arg$) 

.removeNullValue : ht>去除Map中值为null的键值对
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.removeNullValue($expr$) 

.ofEntries : ht>根据给定的Pair数组创建Map对象
	ARRAY [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.ofEntries($expr$) 

.sortByValue : ht>按照值排序,可选是否倒序
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.sortByValue($expr$, $arg$) 

.empty : ht>根据传入的Map类型不同,返回对应类型的空Map,支持类型包括
	java.lang.Class [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.empty($expr$) 

.newTreeMap : ht>新建TreeMap,Key有序的Map
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.newTreeMap($expr$, $arg$) 
	java.util.Comparator [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.newTreeMap($expr$) 

.createProxy : ht>创建代理Map
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.createProxy($expr$) 

.unmodifiable : ht>将对应Map转换为不可修改的Map
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.unmodifiable($expr$) 

.toCamelCaseMap : ht>将已知Map转换为key为驼峰风格的Map
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.toCamelCaseMap($expr$) 

.join : ht>将map转成字符串
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.join($expr$, $arg$) 

.getBool : ht>获取Map指定key的值,并转换为Bool
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.getBool($expr$, $arg$) 

.edit : ht>编辑Map
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.edit($expr$, $arg$) 

.toMapList : ht>列转行。将Map中值列表分别按照其位置与key组成新的map
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.toMapList($expr$) 

.removeAny : ht>去掉Map中指定key的键值对,修改原Map
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.removeAny($expr$, $arg$) 

.newHashMap : ht>新建一个HashMap
	INT [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.newHashMap($expr$, $arg$) 
	BOOLEAN [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.newHashMap($expr$) 

.newConcurrentHashMap : ht>新建一个ConcurrentHashMap
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.newConcurrentHashMap($expr$) 
	INT [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.newConcurrentHashMap($expr$) 

.newIdentityMap : ht>创建键不重复Map
	INT [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.newIdentityMap($expr$) 

.sort : ht>排序已有Map,Key有序的Map
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.sort($expr$, $arg$) 

.grouping : ht>根据给定的entry列表,根据entry的key进行分组;
	java.lang.Iterable [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.grouping($expr$) 

.getInt : ht>获取Map指定key的值,并转换为Integer
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.getInt($expr$, $arg$) 

.getChar : ht>获取Map指定key的值,并转换为Character
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.getChar($expr$, $arg$) 

.entry : ht>将键和值转换为{@linkAbstractMap.SimpleEntry}或者{@linkAbstractMap.SimpleImmutableEntry}
	java.lang.Object [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.entry($expr$, $arg$) 

.valuesOfKeys : ht>从Map中获取指定键列表对应的值列表
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.valuesOfKeys($expr$, $arg$) 

.renameKey : ht>重命名键
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.renameKey($expr$, $arg$) 

.isNotEmpty : ht>Map是否为非空
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.isNotEmpty($expr$) 

.getAny : ht>获取Map的部分key生成新的Map
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.getAny($expr$, $arg$) 

.computeIfAbsent : ht>如果key对应的value不存在,则使用获取mappingFunction重新计算后的值,并保存为该key的value,否则返回value
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.computeIfAbsent($expr$, $arg$) 

.getDouble : ht>获取Map指定key的值,并转换为Double
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.getDouble($expr$, $arg$) 

.getFloat : ht>获取Map指定key的值,并转换为Float
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.getFloat($expr$, $arg$) 

.joinIgnoreNull : ht>将map转成字符串,忽略null的键和值
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.joinIgnoreNull($expr$, $arg$) 

.toListMap : ht>行转列,合并相同的键,值合并为列表
	java.lang.Iterable [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.toListMap($expr$) 

.of : ht>将单一键值对转换为Map
	ARRAY [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.of($expr$) 
	java.lang.Object [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.of($expr$, $arg$) 

.get : ht>获取Map指定key的值,并转换为指定类型
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.get($expr$, $arg$) 

.toObjectArray : ht>将键值对转换为二维数组,第一维是key,第二纬是value
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.toObjectArray($expr$) 

.builder : ht>创建链接调用map
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.builder($expr$) 
	java.lang.Object [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.builder($expr$, $arg$) 

.getDate : ht>获取Map指定key的值,并转换为Date
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.getDate($expr$, $arg$) 

.map : ht>通过biFunction自定义一个规则,此规则将原Map中的元素转换成新的元素,生成新的Map返回
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.map($expr$, $arg$) 

.defaultIfEmpty : ht>如果给定Map为空,返回默认Map
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.defaultIfEmpty($expr$, $arg$) 

.sortJoin : ht>根据参数排序后拼接为字符串,常用于签名
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.sortJoin($expr$, $arg$) 

.inverse : ht>Map的键和值互换
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.inverse($expr$) 

.getShort : ht>获取Map指定key的值,并转换为Short
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.getShort($expr$, $arg$) 

.isEmpty : ht>Map是否为空
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.isEmpty($expr$) 

.clear : ht>清除一个或多个Map集合内的元素,每个Map调用clear()方法
	ARRAY [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.clear($expr$) 

.createMap : ht>创建Map
	java.lang.Class [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.createMap($expr$) 

.reverse : ht>Map的键和值互换
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.reverse($expr$) 

.emptyIfNull : ht>如果提供的集合为null,返回一个不可变的默认空集合,否则返回原集合
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.emptyIfNull($expr$) 

.getLong : ht>获取Map指定key的值,并转换为Long
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.getLong($expr$, $arg$) 

.filter : ht>过滤
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.filter($expr$, $arg$) 

.getStr : ht>获取Map指定key的值,并转换为字符串
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.getStr($expr$, $arg$) 

.wrap : ht>创建Map包装类MapWrapper
	java.util.Map [cn.hutool.core.map.MapUtil]  →  cn.hutool.core.map.MapUtil.wrap($expr$) 



######## cn.hutool.core.lang.intern.InternUtil
.createStringInterner : ht>创建字符串规范化器
	BOOLEAN [cn.hutool.core.lang.intern.InternUtil]  →  cn.hutool.core.lang.intern.InternUtil.createStringInterner($expr$) 



######## cn.hutool.core.io.resource.ResourceUtil
.getResource : ht>获得资源的URL
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  cn.hutool.core.io.resource.ResourceUtil.getResource($expr$, $arg$) 

.getResources : ht>获取指定路径下的资源列表
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  cn.hutool.core.io.resource.ResourceUtil.getResources($expr$, $arg$) 

.getReader : ht>从ClassPath资源中获取BufferedReader
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  cn.hutool.core.io.resource.ResourceUtil.getReader($expr$, $arg$) 

.getUtf8Reader : ht>从ClassPath资源中获取BufferedReader
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  cn.hutool.core.io.resource.ResourceUtil.getUtf8Reader($expr$) 

.getResourceObj : ht>获取Resource资源对象
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  cn.hutool.core.io.resource.ResourceUtil.getResourceObj($expr$) 

.getResourceIter : ht>获取指定路径下的资源Iterator
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  cn.hutool.core.io.resource.ResourceUtil.getResourceIter($expr$) 

.readBytes : ht>读取Classpath下的资源为byte[]
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  cn.hutool.core.io.resource.ResourceUtil.readBytes($expr$) 

.readUtf8Str : ht>读取Classpath下的资源为字符串,使用UTF-8编码
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  cn.hutool.core.io.resource.ResourceUtil.readUtf8Str($expr$) 

.getStreamSafe : ht>从ClassPath资源中获取InputStream,当资源不存在时返回null
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  cn.hutool.core.io.resource.ResourceUtil.getStreamSafe($expr$) 

.getStream : ht>从ClassPath资源中获取InputStream
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  cn.hutool.core.io.resource.ResourceUtil.getStream($expr$) 

.readStr : ht>读取Classpath下的资源为字符串
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  cn.hutool.core.io.resource.ResourceUtil.readStr($expr$, $arg$) 



######## cn.hutool.core.util.EscapeUtil
.safeUnescape : ht>安全的unescape文本,当文本不是被escape的时候,返回原文
	java.lang.String [cn.hutool.core.util.EscapeUtil]  →  cn.hutool.core.util.EscapeUtil.safeUnescape($expr$) 

.unescapeHtml4 : ht>反转义HTML4中的特殊字符
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  cn.hutool.core.util.EscapeUtil.unescapeHtml4($expr$) 

.unescape : ht>Escape解码
	java.lang.String [cn.hutool.core.util.EscapeUtil]  →  cn.hutool.core.util.EscapeUtil.unescape($expr$) 

.escapeXml : ht>转义XML中的特殊字符
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  cn.hutool.core.util.EscapeUtil.escapeXml($expr$) 

.escapeHtml4 : ht>转义HTML4中的特殊字符
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  cn.hutool.core.util.EscapeUtil.escapeHtml4($expr$) 

.escape : ht>Escape编码(Unicode)(等同于JS的escape()方法)
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  cn.hutool.core.util.EscapeUtil.escape($expr$, $arg$) 

.unescapeXml : ht>反转义XML中的特殊字符
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  cn.hutool.core.util.EscapeUtil.unescapeXml($expr$) 

.escapeAll : ht>Escape编码(Unicode)
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  cn.hutool.core.util.EscapeUtil.escapeAll($expr$) 



######## cn.hutool.core.collection.CollStreamUtil
.toSet : ht>将collection转化为Set集合,但是两者的泛型不同
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  cn.hutool.core.collection.CollStreamUtil.toSet($expr$, $arg$) 

.group2Map : ht>将collection按照两个规则(比如有相同的年级id,班级id)分组成双层map
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  cn.hutool.core.collection.CollStreamUtil.group2Map($expr$, $arg$) 

.groupByKey : ht>将collection按照规则(比如有相同的班级id)分组成map
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  cn.hutool.core.collection.CollStreamUtil.groupByKey($expr$, $arg$) 

.toMap : ht>toMap
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  cn.hutool.core.collection.CollStreamUtil.toMap($expr$, $arg$) 

.merge : ht>合并两个相同key类型的map
	java.util.Map [cn.hutool.core.collection.CollStreamUtil]  →  cn.hutool.core.collection.CollStreamUtil.merge($expr$, $arg$) 

.toList : ht>将collection转化为List集合,但是两者的泛型不同
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  cn.hutool.core.collection.CollStreamUtil.toList($expr$, $arg$) 

.toIdentityMap : ht>将collection转化为类型不变的map
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  cn.hutool.core.collection.CollStreamUtil.toIdentityMap($expr$, $arg$) 

.groupBy2Key : ht>将collection按照两个规则(比如有相同的年级id,班级id)分组成双层map
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  cn.hutool.core.collection.CollStreamUtil.groupBy2Key($expr$, $arg$) 

.groupBy : ht>作为所有groupingBy的公共方法,更接近于原生,灵活性更强
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  cn.hutool.core.collection.CollStreamUtil.groupBy($expr$, $arg$) 

.groupKeyValue : ht>将collection按照规则(比如有相同的班级id)分组成map,map中的key为班级id,value为班级名
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  cn.hutool.core.collection.CollStreamUtil.groupKeyValue($expr$, $arg$) 



######## cn.hutool.core.img.ImgUtil
.rotate : ht>旋转图片为指定角度
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.rotate($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.rotate($expr$, $arg$) 

.cut : ht>图像切割(按指定起点坐标和宽高切割)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.cut($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.cut($expr$, $arg$) 
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.cut($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.cut($expr$, $arg$) 

.scale : ht>缩放图像(按比例缩放)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.scale($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.scale($expr$, $arg$) 
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.scale($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.scale($expr$, $arg$) 

.pressImage : ht>给图片添加图片水印
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.pressImage($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.pressImage($expr$, $arg$) 
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.pressImage($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.pressImage($expr$, $arg$) 

.convert : ht>图像类型转换:GIF=》JPG、GIF=》PNG、PNG=》JPG、PNG=》GIF(X)、BMP=》PNG
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.convert($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.convert($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.convert($expr$, $arg$) 

.toStream : ht>将图片对象转换为InputStream形式
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.toStream($expr$, $arg$) 

.backgroundRemoval : ht>背景移除
	java.io.ByteArrayOutputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.backgroundRemoval($expr$, $arg$) 
	java.awt.image.BufferedImage [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.backgroundRemoval($expr$, $arg$) 
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.backgroundRemoval($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.backgroundRemoval($expr$, $arg$) 

.transform : ht>转换图片
	java.awt.geom.AffineTransform [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.transform($expr$, $arg$) 

.gray : ht>彩色转为黑白
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.gray($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.gray($expr$, $arg$) 
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.gray($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.gray($expr$, $arg$) 

.toImage : ht>将的图像bytes转为BufferedImage
	ARRAY [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.toImage($expr$) 
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.toImage($expr$) 

.slice : ht>图像切片(指定切片的宽度和高度)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.slice($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.slice($expr$, $arg$) 

.pressText : ht>给图片添加文字水印
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.pressText($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.pressText($expr$, $arg$) 
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.pressText($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.pressText($expr$, $arg$) 

.toBase64DataUri : ht>将图片对象转换为Base64的DataURI形式,格式为:data:image/[imageType];base64,[data]
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.toBase64DataUri($expr$, $arg$) 

.getImageInputStream : ht>获取ImageInputStream
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.getImageInputStream($expr$) 

.createGraphics : ht>创建Graphics2D
	java.awt.image.BufferedImage [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.createGraphics($expr$, $arg$) 

.write : ht>写出图像:GIF=》JPG、GIF=》PNG、PNG=》JPG、PNG=》GIF(X)、BMP=》PNG
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.write($expr$, $arg$) 
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.write($expr$, $arg$) 

.flip : ht>水平翻转图像
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.flip($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.flip($expr$, $arg$) 

.getMainColor : ht>获取给定图片的主色调,背景填充用
	java.awt.image.BufferedImage [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.getMainColor($expr$, $arg$) 

.createTransparentImage : ht>根据文字创建透明背景的PNG图片
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.createTransparentImage($expr$, $arg$) 

.randomColor : ht>生成随机颜色
	java.util.Random [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.randomColor($expr$) 

.toBase64 : ht>将图片对象转换为Base64形式
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.toBase64($expr$, $arg$) 

.read : ht>从Resource中读取图片
	cn.hutool.core.io.resource.Resource [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.read($expr$) 
	java.net.URL [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.read($expr$) 
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.read($expr$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.read($expr$) 
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.read($expr$) 
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.read($expr$) 

.copyImage : ht>将已有Image复制新的一份出来
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.copyImage($expr$, $arg$) 

.createImage : ht>根据文字创建PNG图片
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.createImage($expr$, $arg$) 

.getReader : ht>获得ImageReader
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.getReader($expr$) 

.compress : ht>压缩图像,输出图像只支持jpg文件
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.compress($expr$, $arg$) 

.toBytes : ht>将图片对象转换为bytes形式
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.toBytes($expr$, $arg$) 

.toBufferedImage : ht>Image转BufferedImage
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.toBufferedImage($expr$, $arg$) 

.getPointBaseCentre : ht>获得修正后的矩形坐标位置,变为以背景中心为基准坐标(即x,y==0,0时,处于背景正中)
	java.awt.Rectangle [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.getPointBaseCentre($expr$, $arg$) 

.getColor : ht>获取一个RGB值对应的颜色
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.getColor($expr$) 
	INT [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.getColor($expr$) 

.colorConvert : ht>图片颜色转换
	java.awt.color.ColorSpace [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.colorConvert($expr$, $arg$) 

.filter : ht>图片过滤转换
	java.awt.image.BufferedImageOp [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.filter($expr$, $arg$) 
	java.awt.image.ImageFilter [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.filter($expr$, $arg$) 

.hexToColor : ht>16进制的颜色值转换为Color对象,例如#fcf6d6
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.hexToColor($expr$) 

.writeJpg : ht>写出图像为JPG格式
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.writeJpg($expr$, $arg$) 

.sliceByRowsAndCols : ht>图像切割(指定切片的行数和列数),默认RGB模式
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.sliceByRowsAndCols($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.sliceByRowsAndCols($expr$, $arg$) 

.getImageOutputStream : ht>获取ImageOutputStream
	java.io.OutputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.getImageOutputStream($expr$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.getImageOutputStream($expr$) 

.toHex : ht>RGB颜色值转换成十六进制颜色码
	java.awt.Color [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.toHex($expr$) 
	INT [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.toHex($expr$, $arg$) 

.getWriter : ht>根据给定的Image对象和格式获取对应的ImageWriter,如果未找到合适的Writer,返回null
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.getWriter($expr$, $arg$) 
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.getWriter($expr$) 

.createCompatibleImage : ht>创建与当前设备颜色模式兼容的BufferedImage
	INT [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.createCompatibleImage($expr$, $arg$) 

.binary : ht>彩色转为黑白二值化图片
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.binary($expr$, $arg$) 
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.binary($expr$, $arg$) 
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.binary($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.binary($expr$, $arg$) 

.writePng : ht>写出图像为PNG格式
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.writePng($expr$, $arg$) 

.toRenderedImage : ht>Image转RenderedImage
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.toRenderedImage($expr$) 

.getRectangle : ht>获取font的样式应用在str上的整个矩形
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.getRectangle($expr$, $arg$) 

.getImage : ht>从URL中获取或读取图片对象
	java.net.URL [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.getImage($expr$) 

.createFont : ht>根据文件创建字体
	java.io.File [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.createFont($expr$) 
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  cn.hutool.core.img.ImgUtil.createFont($expr$) 



######## cn.hutool.core.util.TypeUtil
.toParameterizedType : ht>将Type转换为ParameterizedType
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.toParameterizedType($expr$) 

.getParamClasses : ht>解析方法的参数类型列表
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getParamClasses($expr$) 

.getClass : ht>获得Field对应的原始类
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getClass($expr$) 
	java.lang.reflect.Field [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getClass($expr$) 

.getReturnClass : ht>解析方法的返回类型类列表
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getReturnClass($expr$) 

.getActualTypes : ht>获得泛型变量对应的泛型实际类型,如果此变量没有对应的实际类型,返回null
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getActualTypes($expr$, $arg$) 

.getTypeArgument : ht>获得给定类的泛型参数
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getTypeArgument($expr$, $arg$) 

.getParamTypes : ht>获取方法的参数类型列表
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getParamTypes($expr$) 

.getFieldType : ht>获得字段的泛型类型
	java.lang.Class [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getFieldType($expr$, $arg$) 

.getFirstParamType : ht>获取方法的第一个参数类型
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getFirstParamType($expr$) 

.getActualType : ht>获得泛型变量对应的泛型实际类型,如果此变量没有对应的实际类型,返回null
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getActualType($expr$, $arg$) 

.getReturnType : ht>获取方法的返回值类型
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getReturnType($expr$) 

.getParamClass : ht>获取方法的参数类
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getParamClass($expr$, $arg$) 

.getType : ht>获取字段对应的Type类型
	java.lang.reflect.Field [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getType($expr$) 

.getParamType : ht>获取方法的参数类型
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getParamType($expr$, $arg$) 

.isUnknown : ht>是否未知类型
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.isUnknown($expr$) 

.getFirstParamClass : ht>获取方法的第一个参数类
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getFirstParamClass($expr$) 

.getTypeArguments : ht>获得指定类型中所有泛型参数类型,例如
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getTypeArguments($expr$) 

.hasTypeVariable : ht>指定泛型数组中是否含有泛型变量
	ARRAY [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.hasTypeVariable($expr$) 

.getTypeMap : ht>获取泛型变量和泛型实际类型的对应关系Map,例如
	java.lang.Class [cn.hutool.core.util.TypeUtil]  →  cn.hutool.core.util.TypeUtil.getTypeMap($expr$) 



######## cn.hutool.core.util.PrimitiveArrayUtil
.sub : ht>获取子数组
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.sub($expr$, $arg$) 

.swap : ht>交换数组中两个位置的值
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.swap($expr$, $arg$) 

.max : ht>取最大值
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.max($expr$) 

.isEmpty : ht>数组是否为空
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.isEmpty($expr$) 

.range : ht>生成一个从0开始的数字列表
	INT [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.range($expr$, $arg$) 

.reverse : ht>反转数组,会变更原数组
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.reverse($expr$, $arg$) 

.remove : ht>移除数组中对应位置的元素
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.remove($expr$, $arg$) 
	java.lang.Object [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.remove($expr$, $arg$) 

.isSortedDESC : ht>检查数组是否降序,即array[i]&gt;=array[i+1],若传入空数组,则返回false
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.isSortedDESC($expr$) 

.lastIndexOf : ht>返回数组中指定元素所在最后的位置,未找到返回{@link#INDEX_NOT_FOUND}
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.lastIndexOf($expr$, $arg$) 

.contains : ht>数组中是否包含元素
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.contains($expr$, $arg$) 

.split : ht>拆分byte数组为几个等份(最后一份按照剩余长度分配空间)
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.split($expr$, $arg$) 

.min : ht>取最小值
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.min($expr$) 

.removeEle : ht>移除数组中指定的元素
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.removeEle($expr$, $arg$) 

.addAll : ht>将多个数组合并在一起
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.addAll($expr$) 

.resize : ht>生成一个新的重新设置大小的数组
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.resize($expr$, $arg$) 

.isSortedASC : ht>检查数组是否升序,即array[i]&lt;=array[i+1],若传入空数组,则返回false
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.isSortedASC($expr$) 

.isNotEmpty : ht>数组是否为非空
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.isNotEmpty($expr$) 

.isSorted : ht>检查数组是否升序,即array[i]&lt;=array[i+1],若传入空数组,则返回false
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.isSorted($expr$) 

.shuffle : ht>打乱数组顺序,会变更原数组
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.shuffle($expr$, $arg$) 

.wrap : ht>将原始类型数组包装为包装类型
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.wrap($expr$) 

.unWrap : ht>包装类数组转为原始类型数组
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.unWrap($expr$) 

.indexOf : ht>返回数组中指定元素所在位置,未找到返回{@link#INDEX_NOT_FOUND}
	ARRAY [cn.hutool.core.util.PrimitiveArrayUtil]  →  cn.hutool.core.util.PrimitiveArrayUtil.indexOf($expr$, $arg$) 



######## cn.hutool.core.util.DesensitizedUtil.DesensitizedType
.valueOf : ht>valueOf
	java.lang.String [cn.hutool.core.util.DesensitizedUtil.DesensitizedType]  →  cn.hutool.core.util.DesensitizedUtil.DesensitizedType.valueOf($expr$) 



######## cn.hutool.core.net.NetUtil
.setGlobalAuthenticator : ht>设置全局验证
	java.net.Authenticator [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.setGlobalAuthenticator($expr$) 
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.setGlobalAuthenticator($expr$, $arg$) 

.netCat : ht>使用普通Socket发送数据
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.netCat($expr$, $arg$) 

.getMacAddress : ht>获得指定地址信息中的MAC地址
	java.net.InetAddress [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.getMacAddress($expr$, $arg$) 

.ping : ht>检测IP地址是否能ping通
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.ping($expr$, $arg$) 

.getIpByHost : ht>通过域名得到IP
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.getIpByHost($expr$) 

.hideIpPart : ht>隐藏掉IP地址的最后一部分为*代替
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.hideIpPart($expr$) 
	LONG [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.hideIpPart($expr$) 

.isInRange : ht>是否在CIDR规则配置范围内
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.isInRange($expr$, $arg$) 

.isUsableLocalPort : ht>检测本地端口可用性
	INT [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.isUsableLocalPort($expr$) 

.localAddressList : ht>获取所有满足过滤条件的本地IP地址对象
	cn.hutool.core.lang.Filter [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.localAddressList($expr$, $arg$) 

.getUsableLocalPorts : ht>获取多个本地可用端口
	INT [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.getUsableLocalPorts($expr$, $arg$) 

.getNetworkInterface : ht>获取指定名称的网卡信息
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.getNetworkInterface($expr$) 

.isValidPort : ht>是否为有效的端口
	INT [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.isValidPort($expr$) 

.getMultistageReverseProxyIp : ht>从多级反向代理中获得第一个非unknownIP地址
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.getMultistageReverseProxyIp($expr$) 

.isInnerIP : ht>判定是否为内网IPv4
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.isInnerIP($expr$) 

.createAddress : ht>创建InetSocketAddress
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.createAddress($expr$, $arg$) 

.getDnsInfo : ht>获取DNS信息,如TXT信息
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.getDnsInfo($expr$, $arg$) 

.ipv4ToLong : ht>根据ip地址计算出long型的数据
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.ipv4ToLong($expr$) 

.ipv6ToBigInteger : ht>将IPv6地址字符串转为大整数
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.ipv6ToBigInteger($expr$) 

.idnToASCII : ht>Unicode域名转punycode
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.idnToASCII($expr$) 

.toAbsoluteUrl : ht>相对URL转换为绝对URL
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.toAbsoluteUrl($expr$, $arg$) 

.isOpen : ht>检查远程端口是否开启
	java.net.InetSocketAddress [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.isOpen($expr$, $arg$) 

.isUnknown : ht>检测给定字符串是否为未知,多用于检测HTTP请求相关
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.isUnknown($expr$) 

.getHardwareAddress : ht>获得指定地址信息中的硬件地址
	java.net.InetAddress [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.getHardwareAddress($expr$) 

.bigIntegerToIPv6 : ht>将大整数转换成ipv6字符串
	java.math.BigInteger [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.bigIntegerToIPv6($expr$) 

.toIpList : ht>地址列表转换为IP地址列表
	java.util.Set [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.toIpList($expr$) 

.buildInetSocketAddress : ht>构建InetSocketAddress
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.buildInetSocketAddress($expr$, $arg$) 

.longToIpv4 : ht>根据long值获取ipv4地址
	LONG [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.longToIpv4($expr$) 

.parseCookies : ht>解析Cookie信息
	java.lang.String [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.parseCookies($expr$) 

.getUsableLocalPort : ht>查找指定范围内的可用端口
	INT [cn.hutool.core.net.NetUtil]  →  cn.hutool.core.net.NetUtil.getUsableLocalPort($expr$, $arg$) 



######## cn.hutool.core.img.ColorUtil
.randomColor : ht>生成随机颜色
	java.util.Random [cn.hutool.core.img.ColorUtil]  →  cn.hutool.core.img.ColorUtil.randomColor($expr$) 

.add : ht>叠加颜色
	java.awt.Color [cn.hutool.core.img.ColorUtil]  →  cn.hutool.core.img.ColorUtil.add($expr$, $arg$) 

.hexToColor : ht>16进制的颜色值转换为Color对象,例如#fcf6d6
	java.lang.String [cn.hutool.core.img.ColorUtil]  →  cn.hutool.core.img.ColorUtil.hexToColor($expr$) 

.toHex : ht>RGB颜色值转换成十六进制颜色码
	java.awt.Color [cn.hutool.core.img.ColorUtil]  →  cn.hutool.core.img.ColorUtil.toHex($expr$) 
	INT [cn.hutool.core.img.ColorUtil]  →  cn.hutool.core.img.ColorUtil.toHex($expr$, $arg$) 

.getColor : ht>获取一个RGB值对应的颜色
	java.lang.String [cn.hutool.core.img.ColorUtil]  →  cn.hutool.core.img.ColorUtil.getColor($expr$) 
	INT [cn.hutool.core.img.ColorUtil]  →  cn.hutool.core.img.ColorUtil.getColor($expr$) 

.getMainColor : ht>获取给定图片的主色调,背景填充用
	java.awt.image.BufferedImage [cn.hutool.core.img.ColorUtil]  →  cn.hutool.core.img.ColorUtil.getMainColor($expr$, $arg$) 



######## cn.hutool.core.util.PhoneUtil
.subTelBefore : ht>获取固话号码中的区号
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.subTelBefore($expr$) 

.subAfter : ht>获取手机号后4位
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.subAfter($expr$) 

.subTelAfter : ht>获取固话号码中的号码
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.subTelAfter($expr$) 

.isPhone : ht>验证是否为座机号码+手机号码(CharUtil中国)+400+800电话+手机号号码(香港)
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.isPhone($expr$) 

.isTel : ht>验证是否为座机号码(中国)
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.isTel($expr$) 

.subBetween : ht>获取手机号中间4位
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.subBetween($expr$) 

.isMobileMo : ht>验证是否为手机号码(澳门)
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.isMobileMo($expr$) 

.isMobileTw : ht>验证是否为手机号码(台湾)
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.isMobileTw($expr$) 

.isMobileHk : ht>验证是否为手机号码(香港)
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.isMobileHk($expr$) 

.hideBetween : ht>隐藏手机号中间4位替换字符为"*"
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.hideBetween($expr$) 

.hideAfter : ht>隐藏手机号最后4位替换字符为"*"
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.hideAfter($expr$) 

.hideBefore : ht>隐藏手机号前7位替换字符为"*"
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.hideBefore($expr$) 

.subBefore : ht>获取手机号前3位
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.subBefore($expr$) 

.isTel400800 : ht>验证是否为座机号码(中国)+400+800
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.isTel400800($expr$) 

.isMobile : ht>验证是否为手机号码(中国)
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  cn.hutool.core.util.PhoneUtil.isMobile($expr$) 



######## cn.hutool.core.stream.StreamUtil
.of : ht>按行读取文件为Stream
	ARRAY [cn.hutool.core.stream.StreamUtil]  →  cn.hutool.core.stream.StreamUtil.of($expr$) 
	java.util.Iterator [cn.hutool.core.stream.StreamUtil]  →  cn.hutool.core.stream.StreamUtil.of($expr$, $arg$) 
	java.lang.Object [cn.hutool.core.stream.StreamUtil]  →  cn.hutool.core.stream.StreamUtil.of($expr$, $arg$) 
	java.nio.file.Path [cn.hutool.core.stream.StreamUtil]  →  cn.hutool.core.stream.StreamUtil.of($expr$, $arg$) 
	java.lang.Iterable [cn.hutool.core.stream.StreamUtil]  →  cn.hutool.core.stream.StreamUtil.of($expr$, $arg$) 
	java.io.File [cn.hutool.core.stream.StreamUtil]  →  cn.hutool.core.stream.StreamUtil.of($expr$, $arg$) 

.join : ht>将Stream中所有元素以指定分隔符,合并为一个字符串
	java.util.stream.Stream [cn.hutool.core.stream.StreamUtil]  →  cn.hutool.core.stream.StreamUtil.join($expr$, $arg$) 



######## cn.hutool.core.util.ModifierUtil.ModifierType
.valueOf : ht>valueOf
	java.lang.String [cn.hutool.core.util.ModifierUtil.ModifierType]  →  cn.hutool.core.util.ModifierUtil.ModifierType.valueOf($expr$) 



######## cn.hutool.core.io.IoUtil
.readHex : ht>读取16进制字符串
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.readHex($expr$, $arg$) 

.writeObjects : ht>将多部分内容写到流中
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.writeObjects($expr$, $arg$) 

.toPushbackStream : ht>转换为PushbackInputStream
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toPushbackStream($expr$, $arg$) 

.toStream : ht>byte[]转为ByteArrayInputStream
	ARRAY [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toStream($expr$) 
	java.io.ByteArrayOutputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toStream($expr$) 
	java.lang.String [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toStream($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toStream($expr$) 

.readHex28Upper : ht>从流中读取前28个byte并转换为16进制,字母部分使用大写
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.readHex28Upper($expr$) 

.contentEqualsIgnoreEOL : ht>对比两个流内容是否相同,忽略EOL字符
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.contentEqualsIgnoreEOL($expr$, $arg$) 

.flush : ht>从缓存中刷出数据
	java.io.Flushable [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.flush($expr$) 

.toAvailableStream : ht>将指定InputStream转换为{@linkInputStream#available()}方法可用的流
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toAvailableStream($expr$) 

.closeIfPosible : ht>尝试关闭指定对象
	java.lang.Object [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.closeIfPosible($expr$) 

.readLines : ht>从流中读取内容
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.readLines($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.readLines($expr$, $arg$) 

.getUtf8Reader : ht>获得一个文件读取器,默认使用UTF-8编码
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.getUtf8Reader($expr$) 

.checksum : ht>计算流的校验码,计算后关闭流
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.checksum($expr$, $arg$) 

.copy : ht>拷贝文件流,使用NIO
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.copy($expr$, $arg$) 
	java.io.FileInputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.copy($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.copy($expr$, $arg$) 

.writeUtf8 : ht>将多部分内容写到流中,自动转换为UTF-8字符串
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.writeUtf8($expr$, $arg$) 

.write : ht>将byte[]写到流中
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.write($expr$, $arg$) 

.close : ht>关闭
	java.io.Closeable [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.close($expr$) 

.getBomReader : ht>从InputStream中获取BomReader
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.getBomReader($expr$) 

.toStr : ht>ByteArrayOutputStream转换为String
	java.io.ByteArrayOutputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toStr($expr$, $arg$) 

.read : ht>从流中读取内容,读到输出流中,读取完毕后关闭流
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.read($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.read($expr$, $arg$) 

.readObj : ht>从流中读取对象,即对象的反序列化,读取后不关闭流
	cn.hutool.core.io.ValidateObjectInputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.readObj($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.readObj($expr$, $arg$) 

.getReader : ht>从BOMInputStream中获取Reader
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.getReader($expr$) 
	cn.hutool.core.io.BOMInputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.getReader($expr$) 
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.getReader($expr$, $arg$) 

.contentEquals : ht>对比两个流内容是否相同
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.contentEquals($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.contentEquals($expr$, $arg$) 

.writeObj : ht>将多部分内容写到流中
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.writeObj($expr$, $arg$) 

.readUtf8Lines : ht>从流中读取内容,使用UTF-8编码
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.readUtf8Lines($expr$, $arg$) 

.readUtf8 : ht>从流中读取UTF8编码的内容
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.readUtf8($expr$) 

.getUtf8Writer : ht>获得一个Writer,默认编码UTF-8
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.getUtf8Writer($expr$) 

.toBuffered : ht>转换为BufferedInputStream
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toBuffered($expr$, $arg$) 
	java.io.Writer [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toBuffered($expr$, $arg$) 
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toBuffered($expr$, $arg$) 
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toBuffered($expr$, $arg$) 

.readHex28Lower : ht>从流中读取前28个byte并转换为16进制,字母部分使用小写
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.readHex28Lower($expr$) 

.toUtf8Stream : ht>String转为UTF-8编码的字节流流
	java.lang.String [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toUtf8Stream($expr$) 

.toMarkSupportStream : ht>将InputStream转换为支持mark标记的流
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.toMarkSupportStream($expr$) 

.checksumValue : ht>计算流的校验码,计算后关闭流
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.checksumValue($expr$, $arg$) 

.getPushBackReader : ht>获得PushbackReader
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.getPushBackReader($expr$, $arg$) 

.getWriter : ht>获得一个Writer
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.getWriter($expr$, $arg$) 

.lineIter : ht>返回行遍历器
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.lineIter($expr$) 
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.lineIter($expr$, $arg$) 

.readBytes : ht>从流中读取bytes
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.readBytes($expr$, $arg$) 

.checksumCRC32 : ht>计算流CRC32校验码,计算后关闭流
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  cn.hutool.core.io.IoUtil.checksumCRC32($expr$) 



######## cn.hutool.core.util.ByteUtil
.byteToUnsignedInt : ht>byte转无符号int
	BYTE [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.byteToUnsignedInt($expr$) 

.doubleToBytes : ht>double转byte数组
	DOUBLE [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.doubleToBytes($expr$, $arg$) 

.bytesToLong : ht>byte数组转long
	ARRAY [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.bytesToLong($expr$, $arg$) 

.bytesToNumber : ht>byte数组转换为指定类型数字
	ARRAY [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.bytesToNumber($expr$, $arg$) 

.bytesToShort : ht>byte数组转short
	ARRAY [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.bytesToShort($expr$, $arg$) 

.intToByte : ht>int转byte
	INT [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.intToByte($expr$) 

.shortToBytes : ht>short转byte数组
	SHORT [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.shortToBytes($expr$, $arg$) 

.bytesToInt : ht>byte[]转int值
	ARRAY [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.bytesToInt($expr$, $arg$) 

.longToBytes : ht>long转byte数组
	LONG [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.longToBytes($expr$, $arg$) 

.floatToBytes : ht>float转byte数组,自定义端序
	FLOAT [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.floatToBytes($expr$, $arg$) 

.numberToBytes : ht>将Number转换为
	java.lang.Number [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.numberToBytes($expr$, $arg$) 

.bytesToFloat : ht>byte数组转float
	ARRAY [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.bytesToFloat($expr$, $arg$) 

.bytesToDouble : ht>byte数组转Double
	ARRAY [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.bytesToDouble($expr$, $arg$) 

.intToBytes : ht>int转byte数组
	INT [cn.hutool.core.util.ByteUtil]  →  cn.hutool.core.util.ByteUtil.intToBytes($expr$, $arg$) 



######## cn.hutool.core.net.Ipv4Util
.isInnerIP : ht>判定是否为内网IPv4
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.isInnerIP($expr$) 

.getBeginIpStr : ht>根据ip/掩码位计算IP段的起始IP(字符串型)
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.getBeginIpStr($expr$, $arg$) 

.getMaskBitByMask : ht>根据子网掩码转换为掩码位
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.getMaskBitByMask($expr$) 

.formatIpBlock : ht>格式化IP段
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.formatIpBlock($expr$, $arg$) 

.ipv4ToLong : ht>根据ip地址(xxx.xxx.xxx.xxx)计算出long型的数据
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.ipv4ToLong($expr$, $arg$) 

.countByMaskBit : ht>计算子网大小
	INT [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.countByMaskBit($expr$, $arg$) 

.countByIpRange : ht>计算IP区间有多少个IP
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.countByIpRange($expr$, $arg$) 

.list : ht>得到IP地址区间
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.list($expr$, $arg$) 

.getMaskByIpRange : ht>根据开始IP与结束IP计算掩码
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.getMaskByIpRange($expr$, $arg$) 

.getMaskByMaskBit : ht>根据掩码位获取掩码
	INT [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.getMaskByMaskBit($expr$) 

.getEndIpLong : ht>根据ip/掩码位计算IP段的终止IP(Long型)
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.getEndIpLong($expr$, $arg$) 

.getBeginIpLong : ht>根据ip/掩码位计算IP段的起始IP(Long型)
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.getBeginIpLong($expr$, $arg$) 

.isMaskValid : ht>判断掩码是否合法
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.isMaskValid($expr$) 

.isMaskBitValid : ht>判断掩码位是否合法
	INT [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.isMaskBitValid($expr$) 

.longToIpv4 : ht>根据long值获取ipv4地址:xx.xx.xx.xx
	LONG [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.longToIpv4($expr$) 

.getEndIpStr : ht>根据ip/掩码位计算IP段的终止IP(字符串型)
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  cn.hutool.core.net.Ipv4Util.getEndIpStr($expr$, $arg$) 



######## cn.hutool.core.util.SerializeUtil
.serialize : ht>序列化
	java.lang.Object [cn.hutool.core.util.SerializeUtil]  →  cn.hutool.core.util.SerializeUtil.serialize($expr$) 

.clone : ht>序列化后拷贝流的方式克隆
	java.lang.Object [cn.hutool.core.util.SerializeUtil]  →  cn.hutool.core.util.SerializeUtil.clone($expr$) 

.deserialize : ht>反序列化
	ARRAY [cn.hutool.core.util.SerializeUtil]  →  cn.hutool.core.util.SerializeUtil.deserialize($expr$) 



######## cn.hutool.core.convert.CastUtil
.castDown : ht>泛型集合向下转型。例如将Collection&lt;Number&gt;转换为Collection&lt;Integer&gt;
	java.util.List [cn.hutool.core.convert.CastUtil]  →  cn.hutool.core.convert.CastUtil.castDown($expr$) 
	java.util.Map [cn.hutool.core.convert.CastUtil]  →  cn.hutool.core.convert.CastUtil.castDown($expr$) 
	java.util.Collection [cn.hutool.core.convert.CastUtil]  →  cn.hutool.core.convert.CastUtil.castDown($expr$) 
	java.util.Set [cn.hutool.core.convert.CastUtil]  →  cn.hutool.core.convert.CastUtil.castDown($expr$) 

.castUp : ht>泛型集合向上转型。例如将Collection&lt;Integer&gt;转换为Collection&lt;Number&gt;
	java.util.List [cn.hutool.core.convert.CastUtil]  →  cn.hutool.core.convert.CastUtil.castUp($expr$) 
	java.util.Map [cn.hutool.core.convert.CastUtil]  →  cn.hutool.core.convert.CastUtil.castUp($expr$) 
	java.util.Collection [cn.hutool.core.convert.CastUtil]  →  cn.hutool.core.convert.CastUtil.castUp($expr$) 
	java.util.Set [cn.hutool.core.convert.CastUtil]  →  cn.hutool.core.convert.CastUtil.castUp($expr$) 



######## cn.hutool.core.util.BooleanUtil
.toLongObj : ht>boolean值转为Long
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toLongObj($expr$) 

.toCharacter : ht>boolean值转为Character
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toCharacter($expr$) 

.toFloatObj : ht>boolean值转为Float
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toFloatObj($expr$) 

.andOfWrap : ht>对Boolean数组取与
	ARRAY [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.andOfWrap($expr$) 

.toByte : ht>boolean值转为byte
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toByte($expr$) 

.toInteger : ht>boolean值转为Integer
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toInteger($expr$) 

.toStringYesNo : ht>将boolean转换为字符串{@code'yes'}或者{@code'no'}
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toStringYesNo($expr$) 

.isBoolean : ht>给定类是否为Boolean或者boolean
	java.lang.Class [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.isBoolean($expr$) 

.toDouble : ht>boolean值转为double
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toDouble($expr$) 

.toShortObj : ht>boolean值转为Short
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toShortObj($expr$) 

.toBoolean : ht>转换字符串为boolean值
	java.lang.String [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toBoolean($expr$) 

.and : ht>对Boolean数组取与
	ARRAY [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.and($expr$) 

.toByteObj : ht>boolean值转为Byte
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toByteObj($expr$) 

.xor : ht>对Boolean数组取异或
	ARRAY [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.xor($expr$) 

.toStringTrueFalse : ht>将boolean转换为字符串{@code'true'}或者{@code'false'}
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toStringTrueFalse($expr$) 

.toChar : ht>boolean值转为char
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toChar($expr$) 

.toStringOnOff : ht>将boolean转换为字符串{@code'on'}或者{@code'off'}
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toStringOnOff($expr$) 

.toInt : ht>boolean值转为int
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toInt($expr$) 

.toBooleanObject : ht>转换字符串为boolean值
	java.lang.String [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toBooleanObject($expr$) 

.or : ht>对Boolean数组取或
	ARRAY [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.or($expr$) 

.toLong : ht>boolean值转为long
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toLong($expr$) 

.toFloat : ht>boolean值转为float
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toFloat($expr$) 

.isFalse : ht>检查Boolean值是否为false
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.isFalse($expr$) 

.xorOfWrap : ht>对Boolean数组取异或
	ARRAY [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.xorOfWrap($expr$) 

.isTrue : ht>检查Boolean值是否为true
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.isTrue($expr$) 

.toDoubleObj : ht>boolean值转为double
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toDoubleObj($expr$) 

.negate : ht>取相反值
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.negate($expr$) 

.toString : ht>将boolean转换为字符串
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toString($expr$, $arg$) 

.orOfWrap : ht>对Boolean数组取或
	ARRAY [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.orOfWrap($expr$) 

.toShort : ht>boolean值转为short
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  cn.hutool.core.util.BooleanUtil.toShort($expr$) 



######## cn.hutool.core.swing.RobotUtil
.keyPressString : ht>打印输出指定字符串(借助剪贴板)
	java.lang.String [cn.hutool.core.swing.RobotUtil]  →  cn.hutool.core.swing.RobotUtil.keyPressString($expr$) 

.keyPressWithCtrl : ht>ctrl+按键
	INT [cn.hutool.core.swing.RobotUtil]  →  cn.hutool.core.swing.RobotUtil.keyPressWithCtrl($expr$) 

.keyPressWithAlt : ht>alt+按键
	INT [cn.hutool.core.swing.RobotUtil]  →  cn.hutool.core.swing.RobotUtil.keyPressWithAlt($expr$) 

.mouseMove : ht>模拟鼠标移动
	INT [cn.hutool.core.swing.RobotUtil]  →  cn.hutool.core.swing.RobotUtil.mouseMove($expr$, $arg$) 

.keyClick : ht>模拟键盘点击
	ARRAY [cn.hutool.core.swing.RobotUtil]  →  cn.hutool.core.swing.RobotUtil.keyClick($expr$) 

.keyPressWithShift : ht>shift+按键
	INT [cn.hutool.core.swing.RobotUtil]  →  cn.hutool.core.swing.RobotUtil.keyPressWithShift($expr$) 

.setDelay : ht>设置默认的延迟时间
	INT [cn.hutool.core.swing.RobotUtil]  →  cn.hutool.core.swing.RobotUtil.setDelay($expr$) 

.mouseWheel : ht>模拟鼠标滚轮滚动
	INT [cn.hutool.core.swing.RobotUtil]  →  cn.hutool.core.swing.RobotUtil.mouseWheel($expr$) 

.captureScreen : ht>截屏
	java.awt.Rectangle [cn.hutool.core.swing.RobotUtil]  →  cn.hutool.core.swing.RobotUtil.captureScreen($expr$, $arg$) 
	java.io.File [cn.hutool.core.swing.RobotUtil]  →  cn.hutool.core.swing.RobotUtil.captureScreen($expr$) 



######## cn.hutool.core.util.RuntimeUtil
.getErrorResult : ht>获取命令执行异常结果,使用系统默认编码,获取后销毁进程
	java.lang.Process [cn.hutool.core.util.RuntimeUtil]  →  cn.hutool.core.util.RuntimeUtil.getErrorResult($expr$, $arg$) 

.getResult : ht>获取命令执行结果,使用系统默认编码,获取后销毁进程
	java.lang.Process [cn.hutool.core.util.RuntimeUtil]  →  cn.hutool.core.util.RuntimeUtil.getResult($expr$, $arg$) 

.execForStr : ht>执行系统命令,使用系统默认编码
	ARRAY [cn.hutool.core.util.RuntimeUtil]  →  cn.hutool.core.util.RuntimeUtil.execForStr($expr$) 
	java.nio.charset.Charset [cn.hutool.core.util.RuntimeUtil]  →  cn.hutool.core.util.RuntimeUtil.execForStr($expr$, $arg$) 

.destroy : ht>销毁进程
	java.lang.Process [cn.hutool.core.util.RuntimeUtil]  →  cn.hutool.core.util.RuntimeUtil.destroy($expr$) 

.addShutdownHook : ht>增加一个JVM关闭后的钩子,用于在JVM关闭时执行某些操作
	java.lang.Runnable [cn.hutool.core.util.RuntimeUtil]  →  cn.hutool.core.util.RuntimeUtil.addShutdownHook($expr$) 

.getResultLines : ht>获取命令执行结果,使用传入的{@linkCharsetcharset}编码,获取后销毁进程
	java.lang.Process [cn.hutool.core.util.RuntimeUtil]  →  cn.hutool.core.util.RuntimeUtil.getResultLines($expr$, $arg$) 

.execForLines : ht>执行系统命令,使用系统默认编码
	ARRAY [cn.hutool.core.util.RuntimeUtil]  →  cn.hutool.core.util.RuntimeUtil.execForLines($expr$) 
	java.nio.charset.Charset [cn.hutool.core.util.RuntimeUtil]  →  cn.hutool.core.util.RuntimeUtil.execForLines($expr$, $arg$) 

.exec : ht>执行命令
	ARRAY [cn.hutool.core.util.RuntimeUtil]  →  cn.hutool.core.util.RuntimeUtil.exec($expr$, $arg$) 



######## cn.hutool.core.collection.CollUtil
.unionAll : ht>多个集合的完全并集,类似于SQL中的"UNIONALL"
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.unionAll($expr$, $arg$) 

.asEnumeration : ht>Iterator转换为Enumeration
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.asEnumeration($expr$) 

.newLinkedHashSet : ht>新建一个LinkedHashSet
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newLinkedHashSet($expr$) 

.fieldValueMap : ht>字段值与列表值对应的Map,常用于元素对象中有唯一ID时需要按照这个ID查找对象的情况
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.fieldValueMap($expr$, $arg$) 

.toList : ht>数组转为ArrayList
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toList($expr$) 

.getLast : ht>获取集合的最后一个元素
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.getLast($expr$) 

.setValueByMap : ht>使用给定的map将集合中的原素进行属性或者值的重新设定
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.setValueByMap($expr$, $arg$) 

.empty : ht>根据给定的集合类型,返回对应的空集合,支持类型包括
	java.lang.Class [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.empty($expr$) 

.sortByPinyin : ht>根据汉字的拼音顺序排序
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortByPinyin($expr$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortByPinyin($expr$) 

.unmodifiable : ht>转为只读集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.unmodifiable($expr$) 

.split : ht>对集合按照指定长度分段,每一个段为单独的集合,返回这个集合的列表
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.split($expr$, $arg$) 

.addAllIfNotContains : ht>将另一个列表中的元素加入到列表中,如果列表中已经存在此元素则忽略之
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.addAllIfNotContains($expr$, $arg$) 

.getFirst : ht>获取集合的第一个元素
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.getFirst($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.getFirst($expr$) 

.sortByProperty : ht>根据Bean的属性排序
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortByProperty($expr$, $arg$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortByProperty($expr$, $arg$) 

.popPart : ht>切取部分数据
	java.util.Deque [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.popPart($expr$, $arg$) 
	java.util.Stack [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.popPart($expr$, $arg$) 

.intersection : ht>两个集合的交集
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.intersection($expr$, $arg$) 

.create : ht>创建新的集合对象
	java.lang.Class [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.create($expr$, $arg$) 

.newLinkedList : ht>新建LinkedList
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newLinkedList($expr$) 

.join : ht>以conjunction为分隔符将集合转换为字符串
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.join($expr$, $arg$) 

.indexOf : ht>获取匹配规则定义中匹配到元素的第一个位置
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.indexOf($expr$, $arg$) 

.toTreeSet : ht>将集合转换为排序后的TreeSet
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toTreeSet($expr$, $arg$) 

.countMap : ht>根据集合返回一个元素计数的Map
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.countMap($expr$) 

.isEqualList : ht>判断两个Collection是否元素和顺序相同,返回true的条件是
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isEqualList($expr$, $arg$) 

.group : ht>分组,按照Hash32接口定义的hash算法,集合中的元素放入hash值对应的子列表中
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.group($expr$, $arg$) 

.zip : ht>映射键值(参考Python的zip()函数)
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.zip($expr$, $arg$) 
	java.lang.String [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.zip($expr$, $arg$) 

.fieldValueAsMap : ht>两个字段值组成新的Map
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.fieldValueAsMap($expr$, $arg$) 

.asIterable : ht>Iterator转为Iterable
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.asIterable($expr$) 

.edit : ht>编辑,此方法产生一个新集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.edit($expr$, $arg$) 

.toMapList : ht>列转行。将Map中值列表分别按照其位置与key组成新的map
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toMapList($expr$) 

.removeEmpty : ht>去除null或者""元素,此方法直接修改原集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.removeEmpty($expr$) 

.intersectionDistinct : ht>多个集合的交集
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.intersectionDistinct($expr$, $arg$) 

.findOneByField : ht>查找第一个匹配元素对象
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.findOneByField($expr$, $arg$) 

.subtract : ht>计算集合的单差集,即只返回【集合1】中有,但是【集合2】中没有的元素,例如
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.subtract($expr$, $arg$) 

.removeAny : ht>去掉集合中的多个元素,此方法直接修改原集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.removeAny($expr$, $arg$) 

.count : ht>集合中匹配规则的数量
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.count($expr$, $arg$) 

.containsAny : ht>其中一个集合在另一个集合中是否至少包含一个元素,即是两个集合是否至少有一个共同的元素
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.containsAny($expr$, $arg$) 

.asIterator : ht>Enumeration转换为Iterator
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.asIterator($expr$) 

.subtractToList : ht>计算集合的单差集,即只返回【集合1】中有,但是【集合2】中没有的元素,例如
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.subtractToList($expr$, $arg$) 

.sort : ht>排序集合,排序不会修改原集合
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sort($expr$, $arg$) 
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sort($expr$, $arg$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sort($expr$, $arg$) 

.list : ht>新建一个ArrayList
	BOOLEAN [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.list($expr$, $arg$) 

.groupByField : ht>根据元素的指定字段名分组,非Bean都放在第一个分组中
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.groupByField($expr$, $arg$) 

.valuesOfKeys : ht>从Map中获取指定键列表对应的值列表
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.valuesOfKeys($expr$, $arg$) 

.newHashSet : ht>新建一个HashSet
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newHashSet($expr$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newHashSet($expr$) 
	BOOLEAN [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newHashSet($expr$, $arg$) 

.contains : ht>判断指定集合是否包含指定值,如果集合为空(null或者空),返回false,否则找到元素返回true
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.contains($expr$, $arg$) 

.extract : ht>通过Editor抽取集合元素中的某些值返回为新列表
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.extract($expr$, $arg$) 

.size : ht>获取Collection或者iterator的大小,此方法可以处理的对象类型如下
	java.lang.Object [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.size($expr$) 

.sortByEntry : ht>通过Entry排序,可以按照键排序,也可以按照值排序,亦或者两者综合排序
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortByEntry($expr$, $arg$) 

.unionDistinct : ht>多个集合的非重复并集,类似于SQL中的"UNIONDISTINCT"
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.unionDistinct($expr$, $arg$) 

.indexOfAll : ht>获取匹配规则定义中匹配到元素的所有位置
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.indexOfAll($expr$, $arg$) 

.sortEntryToList : ht>将Set排序(根据Entry的值)
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortEntryToList($expr$) 

.isNotEmpty : ht>Iterable是否为空
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isNotEmpty($expr$) 
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isNotEmpty($expr$) 
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isNotEmpty($expr$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isNotEmpty($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isNotEmpty($expr$) 

.page : ht>对指定List分页取值
	INT [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.page($expr$, $arg$) 

.reverseNew : ht>反序给定List,会创建一个新的List,原List数据不变
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.reverseNew($expr$) 

.getAny : ht>获取集合中指定多个下标的元素值,下标可以为负数,例如-1表示最后一个元素
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.getAny($expr$, $arg$) 

.trans : ht>使用给定的转换函数,转换源集合为新类型的集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.trans($expr$, $arg$) 

.sub : ht>截取集合的部分
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sub($expr$, $arg$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sub($expr$, $arg$) 

.removeWithAddIf : ht>移除集合中的多个元素,并将结果存放到指定的集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.removeWithAddIf($expr$, $arg$) 

.hasNull : ht>是否包含null元素
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.hasNull($expr$) 

.values : ht>获取指定Map列表中所有的Value
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.values($expr$) 

.findOne : ht>查找第一个匹配元素对象
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.findOne($expr$, $arg$) 

.distinct : ht>去重集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.distinct($expr$, $arg$) 

.getFieldValues : ht>获取给定Bean列表中指定字段名对应字段值的列表
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.getFieldValues($expr$, $arg$) 

.sortToMap : ht>通过Entry排序,可以按照键排序,也可以按照值排序,亦或者两者综合排序
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortToMap($expr$, $arg$) 

.padRight : ht>填充List,以达到最小长度
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.padRight($expr$, $arg$) 

.removeNull : ht>去除null元素,此方法直接修改原集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.removeNull($expr$) 

.min : ht>取最小值
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.min($expr$) 

.removeBlank : ht>去除null或者""或者空白字符串元素,此方法直接修改原集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.removeBlank($expr$) 

.toListMap : ht>行转列,合并相同的键,值合并为列表
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toListMap($expr$) 

.toCollection : ht>Iterable转为Collection
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toCollection($expr$) 

.get : ht>获取集合中指定下标的元素值,下标可以为负数,例如-1表示最后一个元素
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.get($expr$, $arg$) 

.setOrAppend : ht>设置或增加元素。当index小于List的长度时,替换指定位置的值,否则在尾部追加
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.setOrAppend($expr$, $arg$) 

.map : ht>通过func自定义一个规则,此规则将原集合中的元素转换成新的元素,生成新的列表返回
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.map($expr$, $arg$) 

.keySet : ht>获取指定Map列表中所有的Key
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.keySet($expr$) 

.padLeft : ht>填充List,以达到最小长度
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.padLeft($expr$, $arg$) 

.defaultIfEmpty : ht>如果给定集合为空,返回默认集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.defaultIfEmpty($expr$, $arg$) 

.set : ht>新建一个HashSet
	BOOLEAN [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.set($expr$, $arg$) 

.newArrayList : ht>新建一个ArrayList
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newArrayList($expr$) 
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newArrayList($expr$) 
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newArrayList($expr$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newArrayList($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newArrayList($expr$) 

.max : ht>取最大值
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.max($expr$) 

.disjunction : ht>两个集合的差集
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.disjunction($expr$, $arg$) 

.forEach : ht>循环遍历Iterable,使用Consumer接受遍历的每条数据,并针对每条数据做处理
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.forEach($expr$, $arg$) 
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.forEach($expr$, $arg$) 
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.forEach($expr$, $arg$) 
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.forEach($expr$, $arg$) 

.containsAll : ht>集合1中是否包含集合2中所有的元素,即集合2是否为集合1的子集
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.containsAll($expr$, $arg$) 

.isEmpty : ht>Iterable是否为空
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isEmpty($expr$) 
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isEmpty($expr$) 
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isEmpty($expr$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isEmpty($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isEmpty($expr$) 

.clear : ht>清除一个或多个集合内的元素,每个集合调用clear()方法
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.clear($expr$) 

.union : ht>两个集合的并集
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.union($expr$, $arg$) 

.reverse : ht>反序给定List,会在原List基础上直接修改
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.reverse($expr$) 

.newBlockingQueue : ht>新建BlockingQueue
	INT [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newBlockingQueue($expr$, $arg$) 

.emptyIfNull : ht>如果提供的集合为null,返回一个不可变的默认空集合,否则返回原集合
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.emptyIfNull($expr$) 
	java.util.Set [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.emptyIfNull($expr$) 

.filter : ht>去除指定元素,此方法直接修改原集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.filter($expr$, $arg$) 

.lastIndexOf : ht>获取匹配规则定义中匹配到元素的最后位置
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.lastIndexOf($expr$, $arg$) 

.safeContains : ht>判断指定集合是否包含指定值,如果集合为空(null或者空),返回false,否则找到元素返回true
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.safeContains($expr$, $arg$) 

.newCopyOnWriteArrayList : ht>新建一个CopyOnWriteArrayList
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newCopyOnWriteArrayList($expr$) 

.addAll : ht>加入全部
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.addAll($expr$, $arg$) 

.toMap : ht>将Entry集合转换为HashMap
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toMap($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toMap($expr$, $arg$) 

.sortPageAll : ht>将多个集合排序并显示不同的段落(分页)
	INT [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortPageAll($expr$, $arg$) 

.addIfAbsent : ht>一个对象不为空且不存在于该集合中时,加入到该集合中
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.addIfAbsent($expr$, $arg$) 

.filterNew : ht>过滤
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.filterNew($expr$, $arg$) 



######## cn.hutool.core.util.JNDIUtil
.getAttributes : ht>获取指定容器环境的对象的属性
	java.lang.String [cn.hutool.core.util.JNDIUtil]  →  cn.hutool.core.util.JNDIUtil.getAttributes($expr$, $arg$) 

.createInitialContext : ht>创建InitialContext
	java.util.Map [cn.hutool.core.util.JNDIUtil]  →  cn.hutool.core.util.JNDIUtil.createInitialContext($expr$) 

.createInitialDirContext : ht>创建InitialDirContext
	java.util.Map [cn.hutool.core.util.JNDIUtil]  →  cn.hutool.core.util.JNDIUtil.createInitialDirContext($expr$) 



######## cn.hutool.core.io.FileUtil
.listFileNames : ht>获得指定目录下所有文件
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.listFileNames($expr$) 

.isAbsolutePath : ht>给定路径已经是绝对路径
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.isAbsolutePath($expr$) 

.getName : ht>返回文件名
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getName($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getName($expr$) 

.newerThan : ht>给定文件或目录的最后修改时间是否晚于给定时间
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.newerThan($expr$, $arg$) 

.ls : ht>列出指定路径下的目录和文件
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.ls($expr$) 

.appendLines : ht>将列表写入文件,追加模式
	java.util.Collection [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.appendLines($expr$, $arg$) 

.pathEquals : ht>文件路径是否相同
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.pathEquals($expr$, $arg$) 

.getBOMInputStream : ht>获得BOM输入流,用于处理带BOM头的文件
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getBOMInputStream($expr$) 

.cleanEmpty : ht>清理空文件夹
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.cleanEmpty($expr$) 

.del : ht>删除文件或者文件夹
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.del($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.del($expr$) 

.convertCharset : ht>转换文件编码
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.convertCharset($expr$, $arg$) 

.writeMap : ht>将Map写入文件,每个键值对为一行,一行中键与值之间使用kvSeparator分隔
	java.util.Map [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.writeMap($expr$, $arg$) 

.contentEqualsIgnoreEOL : ht>比较两个文件内容是否相同
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.contentEqualsIgnoreEOL($expr$, $arg$) 

.isModified : ht>判断文件是否被改动
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.isModified($expr$, $arg$) 

.pathEndsWith : ht>判断文件路径是否有指定后缀,忽略大小写
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.pathEndsWith($expr$, $arg$) 

.normalize : ht>修复路径
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.normalize($expr$) 

.readLines : ht>从文件中读取每一行数据
	java.io.RandomAccessFile [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readLines($expr$, $arg$) 
	java.net.URL [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readLines($expr$, $arg$) 
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readLines($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readLines($expr$, $arg$) 

.mainName : ht>返回主文件名
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.mainName($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.mainName($expr$) 

.getUtf8Reader : ht>获得一个文件读取器
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getUtf8Reader($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getUtf8Reader($expr$) 

.subPath : ht>获得相对子路径
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.subPath($expr$, $arg$) 

.mkdir : ht>创建文件夹,会递归自动创建其不存在的父文件夹,如果存在直接返回此文件夹
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.mkdir($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.mkdir($expr$) 

.writeFromStream : ht>将流的内容写入文件
	java.io.InputStream [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.writeFromStream($expr$, $arg$) 

.appendString : ht>将String写入文件,追加模式
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.appendString($expr$, $arg$) 

.getPrefix : ht>返回主文件名
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getPrefix($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getPrefix($expr$) 

.touch : ht>创建文件及其父目录,如果这个文件存在,直接返回这个文件
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.touch($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.touch($expr$, $arg$) 

.isDirEmpty : ht>目录是否为空
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.isDirEmpty($expr$) 

.checkSlip : ht>检查父完整路径是否为自路径的前半部分,如果不是说明不是子路径,可能存在slip注入
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.checkSlip($expr$, $arg$) 

.createTempFile : ht>创建临时文件
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.createTempFile($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.createTempFile($expr$, $arg$) 

.readUtf8Lines : ht>从文件中读取每一行数据
	java.net.URL [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readUtf8Lines($expr$, $arg$) 
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readUtf8Lines($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readUtf8Lines($expr$, $arg$) 

.getInputStream : ht>获得输入流
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getInputStream($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getInputStream($expr$) 

.exist : ht>判断文件是否存在,如果file为null,则返回false
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.exist($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.exist($expr$) 

.convertLineSeparator : ht>转换换行符
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.convertLineSeparator($expr$, $arg$) 

.cleanInvalid : ht>清除文件名中的在Windows下不支持的非法字符,包括:\/:*?"&lt;&gt;|
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.cleanInvalid($expr$) 

.getSuffix : ht>获取文件后缀名,扩展名不带"."
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getSuffix($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getSuffix($expr$) 

.writeUtf8Map : ht>将Map写入文件,每个键值对为一行,一行中键与值之间使用kvSeparator分隔
	java.util.Map [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.writeUtf8Map($expr$, $arg$) 

.writeBytes : ht>写入数据到文件
	ARRAY [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.writeBytes($expr$, $arg$) 

.lastIndexOfSeparator : ht>获得最后一个文件路径分隔符的位置
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.lastIndexOfSeparator($expr$) 

.size : ht>计算目录或文件的总大小
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.size($expr$, $arg$) 

.getType : ht>根据文件流的头部信息获得文件类型
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getType($expr$) 

.getTotalLines : ht>计算文件的总行数
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getTotalLines($expr$) 

.writeUtf8Lines : ht>将列表写入文件,覆盖模式,编码为UTF-8
	java.util.Collection [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.writeUtf8Lines($expr$, $arg$) 

.readableFileSize : ht>可读的文件大小
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readableFileSize($expr$) 
	LONG [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readableFileSize($expr$) 

.isNotEmpty : ht>目录是否为空
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.isNotEmpty($expr$) 

.isSymlink : ht>判断是否为符号链接文件
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.isSymlink($expr$) 

.isDirectory : ht>判断是否为目录,如果file为null,则返回false
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.isDirectory($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.isDirectory($expr$) 

.copyFile : ht>通过JDK7+的Files#copy(Path,Path,CopyOption...)方法拷贝文件
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.copyFile($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.copyFile($expr$, $arg$) 

.appendUtf8String : ht>将String写入文件,UTF-8编码追加模式
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.appendUtf8String($expr$, $arg$) 

.lastModifiedTime : ht>指定文件最后修改时间
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.lastModifiedTime($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.lastModifiedTime($expr$) 

.newFile : ht>创建File对象,相当于调用newFile(),不做任何处理
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.newFile($expr$) 

.mkdirsSafely : ht>安全地级联创建目录(确保并发环境下能创建成功)
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.mkdirsSafely($expr$, $arg$) 

.walkFiles : ht>递归遍历目录并处理目录下的文件,可以处理目录或文件
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.walkFiles($expr$, $arg$) 

.isSub : ht>判断给定的目录是否为给定文件或文件夹的子目录
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.isSub($expr$, $arg$) 

.writeUtf8String : ht>将String写入文件,覆盖模式,字符集为UTF-8
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.writeUtf8String($expr$, $arg$) 

.loopFiles : ht>递归遍历目录以及子目录中的所有文件
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.loopFiles($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.loopFiles($expr$, $arg$) 

.writeToStream : ht>将文件写入流中,此方法不会关闭输出流
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.writeToStream($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.writeToStream($expr$, $arg$) 

.file : ht>创建File对象
	ARRAY [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.file($expr$) 
	java.net.URL [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.file($expr$) 
	java.net.URI [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.file($expr$) 
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.file($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.file($expr$, $arg$) 

.copyContent : ht>复制文件或目录
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.copyContent($expr$, $arg$) 

.load : ht>按照给定的readerHandler读取文件中的数据
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.load($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.load($expr$, $arg$) 

.readUtf8String : ht>读取文件内容
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readUtf8String($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readUtf8String($expr$) 

.checksum : ht>计算文件校验码
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.checksum($expr$, $arg$) 

.copy : ht>复制文件或目录
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.copy($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.copy($expr$, $arg$) 

.moveContent : ht>移动文件或者目录
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.moveContent($expr$, $arg$) 

.mkParentDirs : ht>创建所给文件或目录的父目录
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.mkParentDirs($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.mkParentDirs($expr$) 

.move : ht>移动文件或者目录
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.move($expr$, $arg$) 

.getParent : ht>获取指定层级的父路径
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getParent($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getParent($expr$, $arg$) 

.getCanonicalPath : ht>获取规范的绝对路径
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getCanonicalPath($expr$) 

.appendUtf8Lines : ht>将列表写入文件,追加模式
	java.util.Collection [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.appendUtf8Lines($expr$, $arg$) 

.isFile : ht>判断是否为文件,如果file为null,则返回false
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.isFile($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.isFile($expr$) 

.getMimeType : ht>根据文件扩展名获得MimeType
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getMimeType($expr$) 

.writeLines : ht>将列表写入文件
	java.util.Collection [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.writeLines($expr$, $arg$) 

.getReader : ht>获得一个文件读取器
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getReader($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getReader($expr$, $arg$) 

.getAbsolutePath : ht>获取标准的绝对路径
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getAbsolutePath($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getAbsolutePath($expr$) 

.tail : ht>文件内容跟随器,实现类似Linux下"tail-f"命令功能
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.tail($expr$, $arg$) 

.getPrintWriter : ht>获得一个打印写入对象,可以有print
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getPrintWriter($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getPrintWriter($expr$, $arg$) 

.contentEquals : ht>比较两个文件内容是否相同
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.contentEquals($expr$, $arg$) 

.readString : ht>读取文件内容
	java.net.URL [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readString($expr$, $arg$) 
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readString($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readString($expr$, $arg$) 

.isEmpty : ht>文件是否为空
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.isEmpty($expr$) 

.getBOMReader : ht>读取带BOM头的文件为Reader
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getBOMReader($expr$) 

.createRandomAccessFile : ht>创建RandomAccessFile
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.createRandomAccessFile($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.createRandomAccessFile($expr$, $arg$) 

.readLine : ht>单行处理文件内容
	java.io.RandomAccessFile [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readLine($expr$, $arg$) 

.clean : ht>清空文件夹
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.clean($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.clean($expr$) 

.extName : ht>获取文件扩展名(后缀名),扩展名不带"."
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.extName($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.extName($expr$) 

.copyFilesFromDir : ht>复制文件或目录
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.copyFilesFromDir($expr$, $arg$) 

.rename : ht>修改文件或目录的文件名,不变更路径,只是简单修改文件名
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.rename($expr$, $arg$) 

.loadUtf8 : ht>按照给定的readerHandler读取文件中的数据
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.loadUtf8($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.loadUtf8($expr$, $arg$) 

.getWriter : ht>获得一个带缓存的写入对象
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getWriter($expr$, $arg$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getWriter($expr$, $arg$) 

.containsInvalid : ht>文件名中是否包含在Windows下不支持的非法字符,包括:\/:*?"&lt;&gt;|
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.containsInvalid($expr$) 

.equals : ht>检查两个文件是否是同一个文件
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.equals($expr$, $arg$) 

.readBytes : ht>读取文件所有数据
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readBytes($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.readBytes($expr$) 

.checksumCRC32 : ht>计算文件CRC32校验码
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.checksumCRC32($expr$) 

.getOutputStream : ht>获得一个输出流对象
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getOutputStream($expr$) 
	java.io.File [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.getOutputStream($expr$) 

.writeString : ht>将String写入文件,覆盖模式
	java.lang.String [cn.hutool.core.io.FileUtil]  →  cn.hutool.core.io.FileUtil.writeString($expr$, $arg$) 



######## cn.hutool.core.text.CharSequenceUtil
.isAllEmpty : ht>指定字符串数组中的元素,是否全部为空字符串
	ARRAY [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isAllEmpty($expr$) 

.wrapAllWithPair : ht>使用单个字符包装多个字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.wrapAllWithPair($expr$, $arg$) 

.subByCodePoint : ht>通过CodePoint截取字符串,可以截断Emoji
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.subByCodePoint($expr$, $arg$) 

.prependIfMissing : ht>如果给定字符串不是以给定的一个或多个字符串为开头,则在首部添加起始字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.prependIfMissing($expr$, $arg$) 

.utf8Bytes : ht>编码字符串,编码为UTF-8
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.utf8Bytes($expr$) 

.subWithLength : ht>截取字符串,从指定位置开始,截取指定长度的字符串
	java.lang.String [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.subWithLength($expr$, $arg$) 

.removeAll : ht>去除字符串中指定的多个字符,如有多个则全部去除
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.removeAll($expr$, $arg$) 

.hasBlank : ht>指定字符串数组中,是否包含空字符串
	ARRAY [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.hasBlank($expr$) 

.trim : ht>按照断言,除去字符串头尾部的断言为真的字符,如果字符串是null,依然返回null
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.trim($expr$, $arg$) 

.normalize : ht>对字符串归一化处理,如"Á"可以使用"u00C1"或"u0041u0301"表示,实际测试中两个字符串并不equals
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.normalize($expr$) 

.upperFirstAndAddPre : ht>原字符串首字母大写并在其首部添加指定字符串例如:str=name,preString=get=》returngetName
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.upperFirstAndAddPre($expr$, $arg$) 

.join : ht>以conjunction为分隔符将多个对象转换为字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.join($expr$, $arg$) 

.removePreAndLowerFirst : ht>去掉首部指定长度的字符串并将剩余字符串首字母小写
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.removePreAndLowerFirst($expr$, $arg$) 

.equalsIgnoreCase : ht>比较两个字符串(大小写不敏感)
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.equalsIgnoreCase($expr$, $arg$) 

.trimStart : ht>除去字符串头部的空白,如果字符串是null,则返回null
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.trimStart($expr$) 

.getContainsStrIgnoreCase : ht>查找指定字符串是否包含指定字符串列表中的任意一个字符串,如果包含返回找到的第一个字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.getContainsStrIgnoreCase($expr$, $arg$) 

.equalsAnyIgnoreCase : ht>给定字符串是否与提供的中任一字符串相同(忽略大小写),相同则返回true,没有相同的返回false
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.equalsAnyIgnoreCase($expr$, $arg$) 

.hasEmpty : ht>是否包含空字符串
	ARRAY [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.hasEmpty($expr$) 

.padAfter : ht>补充字符串以满足最小长度
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.padAfter($expr$, $arg$) 

.lastIndexOfIgnoreCase : ht>指定范围内查找字符串,忽略大小写
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.lastIndexOfIgnoreCase($expr$, $arg$) 

.isSubEquals : ht>截取两个字符串的不同部分(长度一致),判断截取的子串是否相同
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isSubEquals($expr$, $arg$) 

.subAfter : ht>截取分隔字符串之后的字符串,不包括分隔字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.subAfter($expr$, $arg$) 

.removeAllLineBreaks : ht>去除所有换行符,包括
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.removeAllLineBreaks($expr$) 

.nullToDefault : ht>如果字符串是null,则返回指定默认字符串,否则返回字符串本身
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.nullToDefault($expr$, $arg$) 

.containsAny : ht>查找指定字符串是否包含指定字符串列表中的任意一个字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.containsAny($expr$, $arg$) 

.trimToEmpty : ht>除去字符串头尾部的空白,如果字符串是null,返回{@code""}
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.trimToEmpty($expr$) 

.totalLength : ht>给定字符串数组的总长度
	ARRAY [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.totalLength($expr$) 

.concat : ht>连接多个字符串为一个
	BOOLEAN [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.concat($expr$, $arg$) 

.str : ht>CharSequence转为字符串,null安全
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.str($expr$) 

.contains : ht>指定字符串是否在字符串中出现过
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.contains($expr$, $arg$) 

.appendIfMissing : ht>如果给定字符串不是以给定的一个或多个字符串为结尾,则在尾部添加结尾字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.appendIfMissing($expr$, $arg$) 

.isAllBlank : ht>指定字符串数组中的元素,是否全部为空字符串
	ARRAY [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isAllBlank($expr$) 

.containsOnly : ht>检查指定字符串中是否只包含给定的字符
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.containsOnly($expr$, $arg$) 

.isWrap : ht>指定字符串是否被包装
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isWrap($expr$, $arg$) 

.subSuf : ht>切割指定位置之后部分的字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.subSuf($expr$, $arg$) 

.upperFirst : ht>大写首字母
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.upperFirst($expr$) 

.isAllCharMatch : ht>字符串的每一个字符是否都与定义的匹配器匹配
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isAllCharMatch($expr$, $arg$) 

.sub : ht>改进JDKsubString
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.sub($expr$, $arg$) 

.genGetter : ht>生成get方法名
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.genGetter($expr$) 

.compareIgnoreCase : ht>比较两个字符串,用于排序,大小写不敏感
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.compareIgnoreCase($expr$, $arg$) 

.compare : ht>比较两个字符串,用于排序
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.compare($expr$, $arg$) 

.cut : ht>将字符串切分为N等份
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.cut($expr$, $arg$) 

.isLowerCase : ht>给定字符串中的字母是否全部为小写,判断依据如下
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isLowerCase($expr$) 

.startWithAny : ht>给定字符串是否以任何一个字符串开始
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.startWithAny($expr$, $arg$) 

.splitTrim : ht>切分字符串,去除切分后每个元素两边的空白符,去除空白项
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.splitTrim($expr$, $arg$) 

.removeSufAndLowerFirst : ht>去掉指定后缀,并小写首字母
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.removeSufAndLowerFirst($expr$, $arg$) 

.indexedFormat : ht>有序的格式化文本,使用{number}做为占位符
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.indexedFormat($expr$, $arg$) 

.repeatByLength : ht>重复某个字符串到指定长度
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.repeatByLength($expr$, $arg$) 

.replaceFirst : ht>替换字符串中第一个指定字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.replaceFirst($expr$, $arg$) 

.addPrefixIfNot : ht>如果给定字符串不是以prefix开头的,在开头补充prefix
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.addPrefixIfNot($expr$, $arg$) 

.splitToLong : ht>切分字符串为long数组
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.splitToLong($expr$, $arg$) 

.desensitized : ht>脱敏,使用默认的脱敏策略
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.desensitized($expr$, $arg$) 

.builder : ht>创建StringBuilder对象
	ARRAY [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.builder($expr$) 

.splitToInt : ht>切分字符串为int数组
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.splitToInt($expr$, $arg$) 

.genSetter : ht>生成set方法名
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.genSetter($expr$) 

.unWrap : ht>去掉字符包装,如果未被包装则返回原字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.unWrap($expr$, $arg$) 

.firstNonEmpty : ht>返回第一个非empty元素
	ARRAY [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.firstNonEmpty($expr$) 

.startWith : ht>字符串是否以给定字符开始
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.startWith($expr$, $arg$) 

.getContainsStr : ht>查找指定字符串是否包含指定字符串列表中的任意一个字符串,如果包含返回找到的第一个字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.getContainsStr($expr$, $arg$) 

.hasLetter : ht>指定字符串数组中,是否包含空字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.hasLetter($expr$) 

.replaceChars : ht>替换字符字符数组中所有的字符为replacedStr
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.replaceChars($expr$, $arg$) 

.toUnderlineCase : ht>将驼峰式命名的字符串转换为下划线方式。如果转换前的驼峰式命名的字符串为空,则返回空字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.toUnderlineCase($expr$) 

.getGeneralField : ht>获得set或get或is方法对应的标准属性名
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.getGeneralField($expr$) 

.isNullOrUndefined : ht>检查字符串是否为null、"null"、"undefined"
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isNullOrUndefined($expr$) 

.containsAll : ht>检查指定字符串中是否含给定的所有字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.containsAll($expr$, $arg$) 

.subBetweenAll : ht>截取指定字符串多段中间部分,不包括标识字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.subBetweenAll($expr$, $arg$) 

.strBuilder : ht>创建StrBuilder对象
	ARRAY [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.strBuilder($expr$) 

.isUpperCase : ht>给定字符串中的字母是否全部为大写,判断依据如下
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isUpperCase($expr$) 

.cleanBlank : ht>清理空白字符
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.cleanBlank($expr$) 

.replaceIgnoreCase : ht>替换字符串中的指定字符串,忽略大小写
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.replaceIgnoreCase($expr$, $arg$) 

.subPreGbk : ht>截取部分字符串,这里一个汉字的长度认为是2
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.subPreGbk($expr$, $arg$) 

.subBetween : ht>截取指定字符串中间部分,不包括标识字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.subBetween($expr$, $arg$) 

.emptyIfNull : ht>当给定字符串为null时,转换为Empty
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.emptyIfNull($expr$) 

.filter : ht>过滤字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.filter($expr$, $arg$) 

.endWithIgnoreCase : ht>是否以指定字符串结尾,忽略大小写
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.endWithIgnoreCase($expr$, $arg$) 

.isEmptyOrUndefined : ht>检查字符串是否为null、""、"null"、"undefined"
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isEmptyOrUndefined($expr$) 

.hide : ht>替换指定字符串的指定区间内字符为"*"
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.hide($expr$, $arg$) 

.endWithAnyIgnoreCase : ht>给定字符串是否以任何一个字符串结尾(忽略大小写)
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.endWithAnyIgnoreCase($expr$, $arg$) 

.endWith : ht>字符串是否以给定字符结尾
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.endWith($expr$, $arg$) 

.equals : ht>比较两个字符串(大小写敏感)
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.equals($expr$, $arg$) 

.indexOfIgnoreCase : ht>指定范围内查找字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.indexOfIgnoreCase($expr$, $arg$) 

.wrap : ht>包装指定字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.wrap($expr$, $arg$) 

.startWithAnyIgnoreCase : ht>给定字符串是否以任何一个字符串结尾(忽略大小写)
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.startWithAnyIgnoreCase($expr$, $arg$) 

.appendIfMissingIgnoreCase : ht>如果给定字符串不是以给定的一个或多个字符串为结尾,则在尾部添加结尾字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.appendIfMissingIgnoreCase($expr$, $arg$) 

.blankToDefault : ht>如果字符串是null或者""或者空白,则返回指定默认字符串,否则返回字符串本身
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.blankToDefault($expr$, $arg$) 

.wrapAllWithPairIfMissing : ht>使用成对的字符包装多个字符串,如果已经包装,则不再包装
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.wrapAllWithPairIfMissing($expr$, $arg$) 

.replace : ht>替换字符串中的指定字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.replace($expr$, $arg$) 

.splitToArray : ht>切分字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.splitToArray($expr$, $arg$) 

.trimEnd : ht>除去字符串尾部的空白,如果字符串是null,则返回null
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.trimEnd($expr$) 

.toSymbolCase : ht>将驼峰式命名的字符串转换为使用符号连接方式。如果转换前的驼峰式命名的字符串为空,则返回空字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.toSymbolCase($expr$, $arg$) 

.lowerFirst : ht>小写首字母
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.lowerFirst($expr$) 

.strip : ht>去除两边的指定字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.strip($expr$, $arg$) 

.split : ht>切分字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.split($expr$, $arg$) 

.isSurround : ht>给定字符串是否被字符包围
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isSurround($expr$, $arg$) 

.subPre : ht>切割指定位置之前部分的字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.subPre($expr$, $arg$) 

.isNotBlank : ht>字符串是否为非空白,非空白的定义如下:
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isNotBlank($expr$) 

.removeSuffixIgnoreCase : ht>忽略大小写去掉指定后缀
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.removeSuffixIgnoreCase($expr$, $arg$) 

.startWithIgnoreEquals : ht>是否以指定字符串开头,忽略相等字符串的情况
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.startWithIgnoreEquals($expr$, $arg$) 

.indexOf : ht>指定范围内查找字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.indexOf($expr$, $arg$) 

.swapCase : ht>切换给定字符串中的大小写。大写转小写,小写转大写
	java.lang.String [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.swapCase($expr$) 

.wrapIfMissing : ht>包装指定字符串,如果前缀或后缀已经包含对应的字符串,则不再包装
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.wrapIfMissing($expr$, $arg$) 

.nullToEmpty : ht>当给定字符串为null时,转换为Empty
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.nullToEmpty($expr$) 

.ordinalIndexOf : ht>返回字符串searchStr在字符串str中第ordinal次出现的位置
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.ordinalIndexOf($expr$, $arg$) 

.fixLength : ht>在给定字符串末尾填充指定字符,以达到给定长度
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.fixLength($expr$, $arg$) 

.isAllNotEmpty : ht>指定字符串数组中的元素,是否都不为空字符串
	ARRAY [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isAllNotEmpty($expr$) 

.startWithIgnoreCase : ht>是否以指定字符串开头,忽略大小写
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.startWithIgnoreCase($expr$, $arg$) 

.removeAny : ht>移除字符串中所有给定字符串,当某个字符串出现多次,则全部移除
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.removeAny($expr$, $arg$) 

.format : ht>格式化文本,{}表示占位符
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.format($expr$, $arg$) 

.count : ht>统计指定内容中包含指定字符串的数量
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.count($expr$, $arg$) 

.compareVersion : ht>比较两个版本
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.compareVersion($expr$, $arg$) 

.emptyToNull : ht>当给定字符串为空字符串时,转换为null
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.emptyToNull($expr$) 

.removePrefixIgnoreCase : ht>忽略大小写去掉指定前缀
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.removePrefixIgnoreCase($expr$, $arg$) 

.padPre : ht>补充字符串以满足指定长度,如果提供的字符串大于指定长度,截断之
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.padPre($expr$, $arg$) 

.firstNonBlank : ht>返回第一个非blank元素
	ARRAY [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.firstNonBlank($expr$) 

.isNumeric : ht>检查字符串是否都为数字组成
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isNumeric($expr$) 

.isNotEmpty : ht>字符串是否为非空白,非空白的定义如下:
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isNotEmpty($expr$) 

.isBlankOrUndefined : ht>检查字符串是否为null、空白串、"null"、"undefined"
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isBlankOrUndefined($expr$) 

.repeatAndJoin : ht>重复某个字符串并通过分界符连接
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.repeatAndJoin($expr$, $arg$) 

.maxLength : ht>限制字符串长度,如果超过指定长度,截取指定长度并在末尾加"..."
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.maxLength($expr$, $arg$) 

.endWithAny : ht>给定字符串是否以任何一个字符串结尾
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.endWithAny($expr$, $arg$) 

.stripIgnoreCase : ht>去除两边的指定字符串,忽略大小写
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.stripIgnoreCase($expr$, $arg$) 

.emptyToDefault : ht>如果字符串是null或者"",则返回指定默认字符串,否则返回字符串本身
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.emptyToDefault($expr$, $arg$) 

.byteLength : ht>给定字符串转为bytes后的byte数(byte长度)
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.byteLength($expr$, $arg$) 

.replaceLast : ht>替换字符串中最后一个指定字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.replaceLast($expr$, $arg$) 

.isBlank : ht>字符串是否为空白,空白的定义如下
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isBlank($expr$) 

.prependIfMissingIgnoreCase : ht>如果给定字符串不是以给定的一个或多个字符串为开头,则在首部添加起始字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.prependIfMissingIgnoreCase($expr$, $arg$) 

.isAllNotBlank : ht>是否存都不为null或空对象或空白符的对象,通过{@link#hasBlank(CharSequence...)}判断元素
	ARRAY [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isAllNotBlank($expr$) 

.repeat : ht>重复某个字符
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.repeat($expr$, $arg$) 
	CHAR [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.repeat($expr$, $arg$) 

.removePrefix : ht>去掉指定前缀
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.removePrefix($expr$, $arg$) 

.isCharEquals : ht>检查给定字符串的所有字符是否都一样
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isCharEquals($expr$) 

.trimToNull : ht>除去字符串头尾部的空白,如果字符串是null或者"",返回null
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.trimToNull($expr$) 

.removeSuffix : ht>去掉指定后缀
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.removeSuffix($expr$, $arg$) 

.brief : ht>将给定字符串,变成"xxx...xxx"形式的字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.brief($expr$, $arg$) 

.move : ht>循环位移指定位置的字符串为指定距离
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.move($expr$, $arg$) 

.equalsCharAt : ht>字符串指定位置的字符是否与给定字符相同
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.equalsCharAt($expr$, $arg$) 

.equalsAny : ht>给定字符串是否与提供的中任一字符串相同,相同则返回true,没有相同的返回false
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.equalsAny($expr$, $arg$) 

.center : ht>居中字符串,两边补充指定字符串,如果指定长度小于字符串,则返回原字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.center($expr$, $arg$) 

.length : ht>获取字符串的长度,如果为null返回0
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.length($expr$) 

.isEmpty : ht>字符串是否为空,空的定义如下
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.isEmpty($expr$) 

.containsIgnoreCase : ht>是否包含特定字符,忽略大小写,如果给定两个参数都为null,返回true
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.containsIgnoreCase($expr$, $arg$) 

.toCamelCase : ht>将下划线方式命名的字符串转换为驼峰式。如果转换前的下划线大写方式命名的字符串为空,则返回空字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.toCamelCase($expr$, $arg$) 

.wrapAll : ht>包装多个字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.wrapAll($expr$, $arg$) 

.lastIndexOf : ht>指定范围内查找字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.lastIndexOf($expr$, $arg$) 

.containsBlank : ht>给定字符串是否包含空白符(空白符包括空格、制表符、全角空格和不间断空格)
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.containsBlank($expr$) 

.subSufByLength : ht>切割指定长度的后部分的字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.subSufByLength($expr$, $arg$) 

.addSuffixIfNot : ht>如果给定字符串不是以suffix结尾的,在尾部补充suffix
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.addSuffixIfNot($expr$, $arg$) 

.wrapAllIfMissing : ht>包装多个字符串,如果已经包装,则不再包装
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.wrapAllIfMissing($expr$, $arg$) 

.subBefore : ht>截取分隔字符串之前的字符串,不包括分隔字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.subBefore($expr$, $arg$) 

.bytes : ht>编码字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.bytes($expr$, $arg$) 

.firstNonNull : ht>返回第一个非null元素
	ARRAY [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.firstNonNull($expr$) 

.containsAnyIgnoreCase : ht>查找指定字符串是否包含指定字符串列表中的任意一个字符串
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.containsAnyIgnoreCase($expr$, $arg$) 

.byteBuffer : ht>字符串转换为byteBuffer
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  cn.hutool.core.text.CharSequenceUtil.byteBuffer($expr$, $arg$) 



######## cn.hutool.core.date.DateUtil
.formatDate : ht>格式化日期部分(不包括时间)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.formatDate($expr$) 

.offsetWeek : ht>偏移周
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.offsetWeek($expr$, $arg$) 

.weekOfYear : ht>获得指定日期是所在年份的第几周
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.weekOfYear($expr$) 

.year : ht>获得年的部分
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.year($expr$) 

.dayOfYear : ht>获得指定日期是这个日期所在年的第几天
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.dayOfYear($expr$) 

.quarterEnum : ht>获得指定日期所属季度
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.quarterEnum($expr$) 

.offsetHour : ht>偏移小时
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.offsetHour($expr$, $arg$) 

.formatHttpDate : ht>格式化为Http的标准日期格式
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.formatHttpDate($expr$) 

.createStopWatch : ht>创建秒表StopWatch,用于对代码块的执行时间计数
	java.lang.String [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.createStopWatch($expr$) 

.truncate : ht>修改日期为某个时间字段起始时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.truncate($expr$, $arg$) 

.dateNew : ht>根据已有Date产生新的DateTime对象
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.dateNew($expr$) 

.lengthOfMonth : ht>获得指定月份的总天数
	INT [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.lengthOfMonth($expr$, $arg$) 

.ageOfNow : ht>生日转为年龄,计算法定年龄
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.ageOfNow($expr$) 
	java.lang.String [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.ageOfNow($expr$) 

.isSameWeek : ht>比较两个日期是否为同一周
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.isSameWeek($expr$, $arg$) 

.isLastDayOfMonth : ht>是否为本月最后一天
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.isLastDayOfMonth($expr$) 

.secondToTime : ht>秒数转为时间格式(HH:mm:ss)
	INT [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.secondToTime($expr$) 

.timeToSecond : ht>HH:mm:ss时间格式字符串转为秒数
	java.lang.String [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.timeToSecond($expr$) 

.between : ht>判断两个日期相差的时长
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.between($expr$, $arg$) 

.formatLocalDateTime : ht>格式化日期时间
	java.time.LocalDateTime [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.formatLocalDateTime($expr$) 

.beginOfMonth : ht>获取某月的开始时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.beginOfMonth($expr$) 

.offsetDay : ht>w
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.offsetDay($expr$, $arg$) 

.formatTime : ht>格式化时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.formatTime($expr$) 

.endOfHour : ht>获取某小时的结束时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.endOfHour($expr$) 

.endOfYear : ht>获取某年的结束时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.endOfYear($expr$) 

.nanosToSeconds : ht>纳秒转秒,保留小数
	LONG [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.nanosToSeconds($expr$) 

.betweenDay : ht>判断两个日期相差的天数
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.betweenDay($expr$, $arg$) 

.dayOfMonth : ht>获得指定日期是这个日期所在月份的第几天
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.dayOfMonth($expr$) 

.toLocalDateTime : ht>Instant转换为LocalDateTime,使用系统默认时区
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.toLocalDateTime($expr$) 
	java.time.Instant [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.toLocalDateTime($expr$) 

.offsetMinute : ht>偏移分钟
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.offsetMinute($expr$, $arg$) 

.endOfSecond : ht>获取秒级别的结束时间,即毫秒设置为999
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.endOfSecond($expr$) 

.parseUTC : ht>解析UTC时间,格式
	java.lang.String [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.parseUTC($expr$) 

.compare : ht>null安全的日期比较,null对象排在末尾
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.compare($expr$, $arg$) 

.parseDateTime : ht>解析日期时间字符串,格式支持
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.parseDateTime($expr$) 

.millisecond : ht>获得指定日期的毫秒数部分
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.millisecond($expr$) 

.range : ht>创建日期范围生成器
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.range($expr$, $arg$) 

.isWeekend : ht>是否为周末(周六或周日)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.isWeekend($expr$) 

.yearAndQuarter : ht>获得指定日期区间内的年份和季节
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.yearAndQuarter($expr$, $arg$) 

.rangeToList : ht>根据步进单位和步进获取起始日期时间和结束日期时间的时间区间集合
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.rangeToList($expr$, $arg$) 

.isSameTime : ht>是否为相同时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.isSameTime($expr$, $arg$) 

.lengthOfYear : ht>获得指定年份的总天数
	INT [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.lengthOfYear($expr$) 

.beginOfYear : ht>获取某年的开始时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.beginOfYear($expr$) 

.dayOfWeek : ht>获得指定日期是星期几,1表示周日,2表示周一
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.dayOfWeek($expr$) 

.rangeNotContains : ht>俩个时间区间取差集(end-start)
	cn.hutool.core.date.DateRange [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.rangeNotContains($expr$, $arg$) 

.offsetSecond : ht>偏移秒数
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.offsetSecond($expr$, $arg$) 

.isSameDay : ht>比较两个日期是否为同一天
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.isSameDay($expr$, $arg$) 

.rangeConsume : ht>按日期范围遍历,执行consumer
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.rangeConsume($expr$, $arg$) 

.getShotName : ht>获取时长单位简写
	java.util.concurrent.TimeUnit [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.getShotName($expr$) 

.endOfWeek : ht>获取某周的结束时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.endOfWeek($expr$, $arg$) 

.isLeapYear : ht>是否闰年
	INT [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.isLeapYear($expr$) 

.endOfMonth : ht>获取某月的结束时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.endOfMonth($expr$) 

.toInstant : ht>Date对象转换为Instant对象
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.toInstant($expr$) 
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.toInstant($expr$) 

.beginOfQuarter : ht>获取某季度的开始时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.beginOfQuarter($expr$) 

.betweenMonth : ht>计算两个日期相差月数
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.betweenMonth($expr$, $arg$) 

.beginOfDay : ht>获取某天的开始时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.beginOfDay($expr$) 

.quarter : ht>获得指定日期所属季度,从1开始计数
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.quarter($expr$) 

.getLastDayOfMonth : ht>获得本月的最后一天
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.getLastDayOfMonth($expr$) 

.date : ht>TemporalAccessor类型时间转为DateTime
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.date($expr$) 
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.date($expr$) 
	LONG [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.date($expr$) 
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.date($expr$) 

.parseTimeToday : ht>解析时间,格式HH:mm或HH:mm:ss,日期默认为今天
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.parseTimeToday($expr$) 

.beginOfHour : ht>获取某小时的开始时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.beginOfHour($expr$) 

.getZodiac : ht>通过生日计算星座
	INT [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.getZodiac($expr$, $arg$) 

.betweenWeek : ht>计算指定时间区间内的周数
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.betweenWeek($expr$, $arg$) 

.formatDateTime : ht>格式化日期时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.formatDateTime($expr$) 

.spendNt : ht>计时,常用于记录某段代码的执行时间,单位:纳秒
	LONG [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.spendNt($expr$) 

.formatBetween : ht>格式化日期间隔输出
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.formatBetween($expr$, $arg$) 
	LONG [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.formatBetween($expr$, $arg$) 

.rangeFunc : ht>按日期范围遍历,执行function
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.rangeFunc($expr$, $arg$) 

.nanosToMillis : ht>纳秒转毫秒
	LONG [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.nanosToMillis($expr$) 

.second : ht>获得指定日期的秒数部分
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.second($expr$) 

.thisHour : ht>thisHour
	BOOLEAN [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.thisHour($expr$) 

.isPM : ht>是否为下午
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.isPM($expr$) 

.beginOfSecond : ht>获取秒级别的开始时间,即毫秒部分设置为0
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.beginOfSecond($expr$) 

.beginOfWeek : ht>获取某周的开始时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.beginOfWeek($expr$, $arg$) 

.parseTime : ht>解析时间,格式HH:mm:ss,日期部分默认为1970-01-01
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.parseTime($expr$) 

.parseCST : ht>解析CST时间,格式
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.parseCST($expr$) 

.offset : ht>获取指定日期偏移指定时间后的时间,生成的偏移日期不影响原日期
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.offset($expr$, $arg$) 

.weekOfMonth : ht>获得指定日期是所在月份的第几周
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.weekOfMonth($expr$) 

.format : ht>根据特定格式格式化日期
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.format($expr$, $arg$) 
	java.time.LocalDateTime [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.format($expr$, $arg$) 

.isSameMonth : ht>比较两个日期是否为同一月
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.isSameMonth($expr$, $arg$) 

.parseDate : ht>解析日期字符串,忽略时分秒,支持的格式包括
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.parseDate($expr$) 

.month : ht>获得月份,从0开始计数
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.month($expr$) 

.formatChineseDate : ht>格式化为中文日期格式,如果isUppercase为false,则返回类似:2018年10月24日,否则返回二〇一八年十月二十四日
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.formatChineseDate($expr$, $arg$) 

.offsetMonth : ht>偏移月
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.offsetMonth($expr$, $arg$) 

.convertTimeZone : ht>Date转换时区
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.convertTimeZone($expr$, $arg$) 

.parseLocalDateTime : ht>构建LocalDateTime对象
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.parseLocalDateTime($expr$, $arg$) 

.timer : ht>计时器
	BOOLEAN [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.timer($expr$) 

.hour : ht>获得指定日期的小时数部分
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.hour($expr$, $arg$) 

.endOfQuarter : ht>获取某季度的结束时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.endOfQuarter($expr$) 

.isOverlap : ht>检查两个时间段是否有时间重叠
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.isOverlap($expr$, $arg$) 

.offsetMillisecond : ht>偏移毫秒数
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.offsetMillisecond($expr$, $arg$) 

.endOfMinute : ht>获取某分钟的结束时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.endOfMinute($expr$) 

.endOfDay : ht>获取某天的结束时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.endOfDay($expr$) 

.getChineseZodiac : ht>计算生肖,只计算1900年后出生的人
	INT [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.getChineseZodiac($expr$) 

.monthEnum : ht>获得月份
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.monthEnum($expr$) 

.isIn : ht>当前日期是否在日期指定范围内
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.isIn($expr$, $arg$) 

.ceiling : ht>修改日期为某个时间字段结束时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.ceiling($expr$, $arg$) 

.betweenMs : ht>判断两个日期相差的毫秒数
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.betweenMs($expr$, $arg$) 

.isAM : ht>是否为上午
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.isAM($expr$) 

.spendMs : ht>计时,常用于记录某段代码的执行时间,单位:毫秒
	LONG [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.spendMs($expr$) 

.parse : ht>将日期字符串转换为DateTime对象,格式
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.parse($expr$, $arg$) 
	java.lang.String [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.parse($expr$, $arg$) 

.newSimpleFormat : ht>创建SimpleDateFormat,注意此对象非线程安全
	java.lang.String [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.newSimpleFormat($expr$, $arg$) 

.minute : ht>获得指定日期的分钟数部分
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.minute($expr$) 

.round : ht>修改日期为某个时间字段四舍五入时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.round($expr$, $arg$) 

.dayOfWeekEnum : ht>获得指定日期是星期几
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.dayOfWeekEnum($expr$) 

.beginOfMinute : ht>获取某分钟的开始时间
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.beginOfMinute($expr$) 

.rangeContains : ht>俩个时间区间取交集
	cn.hutool.core.date.DateRange [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.rangeContains($expr$, $arg$) 

.betweenYear : ht>计算两个日期相差年数
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.betweenYear($expr$, $arg$) 

.age : ht>计算相对于dateToCompare的年龄,长用于计算指定生日在某年的年龄
	java.util.Date [cn.hutool.core.date.DateUtil]  →  cn.hutool.core.date.DateUtil.age($expr$, $arg$) 



######## cn.hutool.core.util.HexUtil
.decodeColor : ht>将Hex颜色值转为
	java.lang.String [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.decodeColor($expr$) 

.appendHex : ht>将byte值转为16进制并添加到StringBuilder中
	java.lang.StringBuilder [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.appendHex($expr$, $arg$) 

.encodeHex : ht>将字节数组转换为十六进制字符数组
	ARRAY [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.encodeHex($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.encodeHex($expr$, $arg$) 

.encodeColor : ht>将Color编码为Hex形式
	java.awt.Color [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.encodeColor($expr$, $arg$) 

.decodeHexStr : ht>将十六进制字符数组转换为字符串
	ARRAY [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.decodeHexStr($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.decodeHexStr($expr$, $arg$) 

.toUnicodeHex : ht>将指定char值转换为Unicode字符串形式,常用于特殊字符(例如汉字)转Unicode形式
	CHAR [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.toUnicodeHex($expr$) 
	INT [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.toUnicodeHex($expr$) 

.format : ht>格式化Hex字符串,结果为每2位加一个空格,类似于
	java.lang.String [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.format($expr$) 

.toBigInteger : ht>Hex(16进制)字符串转为BigInteger
	java.lang.String [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.toBigInteger($expr$) 

.isHexNumber : ht>判断给定字符串是否为16进制数
	java.lang.String [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.isHexNumber($expr$) 

.encodeHexStr : ht>将字节数组转换为十六进制字符串
	ARRAY [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.encodeHexStr($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.encodeHexStr($expr$, $arg$) 

.hexToInt : ht>16进制字符串转为int
	java.lang.String [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.hexToInt($expr$) 

.hexToLong : ht>16进制字符串转为long
	java.lang.String [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.hexToLong($expr$) 

.toHex : ht>转为16进制字符串
	INT [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.toHex($expr$) 
	LONG [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.toHex($expr$) 

.decodeHex : ht>将十六进制字符数组转换为字节数组
	ARRAY [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.decodeHex($expr$) 
	java.lang.CharSequence [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.decodeHex($expr$) 
	java.lang.String [cn.hutool.core.util.HexUtil]  →  cn.hutool.core.util.HexUtil.decodeHex($expr$) 



######## cn.hutool.core.util.DesensitizedUtil
.password : ht>【密码】密码的全部字符都用*代替,比如:******
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  cn.hutool.core.util.DesensitizedUtil.password($expr$) 

.address : ht>【地址】只显示到地区,不显示详细地址,比如:北京市海淀区****
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  cn.hutool.core.util.DesensitizedUtil.address($expr$, $arg$) 

.mobilePhone : ht>【手机号码】前三位,后4位,其他隐藏,比如135****2210
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  cn.hutool.core.util.DesensitizedUtil.mobilePhone($expr$) 

.bankCard : ht>银行卡号脱敏
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  cn.hutool.core.util.DesensitizedUtil.bankCard($expr$) 

.idCardNum : ht>【身份证号】前1位和后2位
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  cn.hutool.core.util.DesensitizedUtil.idCardNum($expr$, $arg$) 

.desensitized : ht>脱敏,使用默认的脱敏策略
	java.lang.CharSequence [cn.hutool.core.util.DesensitizedUtil]  →  cn.hutool.core.util.DesensitizedUtil.desensitized($expr$, $arg$) 

.chineseName : ht>【中文姓名】只显示第一个汉字,其他隐藏为2个星号,比如:李**
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  cn.hutool.core.util.DesensitizedUtil.chineseName($expr$) 

.fixedPhone : ht>【固定电话前四位,后两位
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  cn.hutool.core.util.DesensitizedUtil.fixedPhone($expr$) 

.email : ht>【电子邮箱】邮箱前缀仅显示第一个字母,前缀其他隐藏,用星号代替,@及后面的地址显示,比如:d**@126.com
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  cn.hutool.core.util.DesensitizedUtil.email($expr$) 

.carLicense : ht>【中国车牌】车牌中间用*代替
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  cn.hutool.core.util.DesensitizedUtil.carLicense($expr$) 



######## cn.hutool.core.thread.lock.LockUtil
.createReadWriteLock : ht>创建ReentrantReadWriteLock锁
	BOOLEAN [cn.hutool.core.thread.lock.LockUtil]  →  cn.hutool.core.thread.lock.LockUtil.createReadWriteLock($expr$) 



######## cn.hutool.core.util.IdUtil
.nanoId : ht>获取随机NanoId
	INT [cn.hutool.core.util.IdUtil]  →  cn.hutool.core.util.IdUtil.nanoId($expr$) 

.getWorkerId : ht>获取机器ID,使用进程ID配合数据中心ID生成
	LONG [cn.hutool.core.util.IdUtil]  →  cn.hutool.core.util.IdUtil.getWorkerId($expr$, $arg$) 

.getSnowflake : ht>获取单例的Twitter的Snowflake算法生成器对象
	LONG [cn.hutool.core.util.IdUtil]  →  cn.hutool.core.util.IdUtil.getSnowflake($expr$, $arg$) 

.getDataCenterId : ht>获取数据中心ID
	LONG [cn.hutool.core.util.IdUtil]  →  cn.hutool.core.util.IdUtil.getDataCenterId($expr$) 



######## cn.hutool.core.util.ClassUtil
.isAbstractOrInterface : ht>是否为抽象类或接口
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isAbstractOrInterface($expr$) 

.getClassPathResources : ht>获得ClassPath
	BOOLEAN [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getClassPathResources($expr$) 

.getClass : ht>null安全的获取对象类型
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getClass($expr$) 

.isAssignable : ht>检查目标类是否可以从原类转化
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isAssignable($expr$, $arg$) 

.getLocation : ht>获取class类路径URL,不管是否在jar包中都会返回文件夹的路径
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getLocation($expr$) 

.getLocationPath : ht>获取class类路径,不管是否在jar包中都会返回文件夹的路径
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getLocationPath($expr$) 

.isBasicType : ht>是否为基本类型(包括包装类和原始类)
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isBasicType($expr$) 

.isSimpleTypeOrArray : ht>是否简单值类型或简单值类型的数组
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isSimpleTypeOrArray($expr$) 

.getShortClassName : ht>获取完整类名的短格式如
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getShortClassName($expr$) 

.invoke : ht>执行方法
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.invoke($expr$, $arg$) 

.isJdkClass : ht>是否为JDK中定义的类或接口,判断依据
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isJdkClass($expr$) 

.getDefaultValue : ht>获取指定类型分的默认值
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getDefaultValue($expr$) 

.getDeclaredFields : ht>查找指定类中的所有字段(包括非public字段)
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getDeclaredFields($expr$) 

.isNormalClass : ht>是否为标准的类
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isNormalClass($expr$) 

.getPublicMethod : ht>查找指定Public方法如果找不到对应的方法或方法不为public的则返回null
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getPublicMethod($expr$, $arg$) 

.isInterface : ht>是否为接口
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isInterface($expr$) 

.getResourceUrl : ht>获得资源相对路径对应的URL
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getResourceUrl($expr$, $arg$) 

.getResourceURL : ht>获得资源的URL
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getResourceURL($expr$) 

.getPackage : ht>获得给定类所在包的名称
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getPackage($expr$) 

.getDeclaredMethodNames : ht>获得指定类中的Public方法名
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getDeclaredMethodNames($expr$) 

.getDeclaredMethodOfObj : ht>查找指定对象中的所有方法(包括非public方法),也包括父对象和Object类的方法
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getDeclaredMethodOfObj($expr$, $arg$) 

.isNotPublic : ht>指定类是否为非public
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isNotPublic($expr$) 
	java.lang.reflect.Method [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isNotPublic($expr$) 

.isTopLevelClass : ht>是否为顶层类,即定义在包中的类,而非定义在类中的内部类
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isTopLevelClass($expr$) 

.getClassName : ht>获取类名
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getClassName($expr$, $arg$) 
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getClassName($expr$, $arg$) 

.isSimpleValueType : ht>是否为简单值类型
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isSimpleValueType($expr$) 

.isStatic : ht>是否为静态方法
	java.lang.reflect.Method [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isStatic($expr$) 

.getTypeArgument : ht>获得给定类的泛型参数
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getTypeArgument($expr$, $arg$) 

.scanPackageByAnnotation : ht>扫描指定包路径下所有包含指定注解的类
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.scanPackageByAnnotation($expr$, $arg$) 

.scanPackageBySuper : ht>扫描指定包路径下所有指定类或接口的子类或实现类
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.scanPackageBySuper($expr$, $arg$) 

.getClassPath : ht>获得ClassPath,这个ClassPath路径会文件路径被标准化处理
	BOOLEAN [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getClassPath($expr$) 

.getDeclaredMethods : ht>获得声明的所有方法,包括本类及其父类和接口的所有方法和Object类的方法
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getDeclaredMethods($expr$) 

.getPackagePath : ht>获得给定类所在包的路径
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getPackagePath($expr$) 

.getResources : ht>获取指定路径下的资源列表
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getResources($expr$) 

.isAllAssignableFrom : ht>比较判断types1和types2两组类,如果types1中所有的类都与types2对应位置的类相同,或者是其父类或接口,则返回true
	ARRAY [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isAllAssignableFrom($expr$, $arg$) 

.getPrimitiveDefaultValue : ht>获取指定原始类型分的默认值
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getPrimitiveDefaultValue($expr$) 

.isPublic : ht>指定类是否为Public
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isPublic($expr$) 
	java.lang.reflect.Method [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isPublic($expr$) 

.getClassPaths : ht>获得ClassPath
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getClassPaths($expr$, $arg$) 

.getClasses : ht>获得对象数组的类数组
	ARRAY [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getClasses($expr$) 

.getDeclaredField : ht>查找指定类中的所有字段(包括非public字段),字段不存在则返回null
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getDeclaredField($expr$, $arg$) 

.setAccessible : ht>设置方法为可访问
	java.lang.reflect.Method [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.setAccessible($expr$) 

.isEnum : ht>判断类是否为枚举类型
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isEnum($expr$) 

.getPublicMethodNames : ht>获得指定类中的Public方法名
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getPublicMethodNames($expr$) 

.getDeclaredMethod : ht>查找指定类中的所有方法(包括非public方法),也包括父类和Object类的方法找不到方法会返回null
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getDeclaredMethod($expr$, $arg$) 

.isAbstract : ht>是否为抽象类
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isAbstract($expr$) 

.getPublicMethods : ht>获得指定类过滤后的Public方法列表
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getPublicMethods($expr$, $arg$) 

.loadClass : ht>加载类
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.loadClass($expr$, $arg$) 

.isPrimitiveWrapper : ht>是否为包装类型
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.isPrimitiveWrapper($expr$) 

.getDefaultValues : ht>获得默认值列表
	ARRAY [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getDefaultValues($expr$) 

.equals : ht>指定类是否与给定的类名相同
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.equals($expr$, $arg$) 

.scanPackage : ht>扫描包路径下满足class过滤器条件的所有class文件
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.scanPackage($expr$, $arg$) 

.getEnclosingClass : ht>获得外围类
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  cn.hutool.core.util.ClassUtil.getEnclosingClass($expr$) 



######## cn.hutool.core.bean.BeanUtil
.getBeanDesc : ht>获取BeanDescBean描述信息
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.getBeanDesc($expr$) 

.createDynaBean : ht>创建动态Bean
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.createDynaBean($expr$) 

.mapToBean : ht>Map转换为Bean对象
	java.util.Map [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.mapToBean($expr$, $arg$) 

.fillBeanWithMapIgnoreCase : ht>使用Map填充Bean对象,忽略大小写
	java.util.Map [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.fillBeanWithMapIgnoreCase($expr$, $arg$) 

.hasSetter : ht>判断是否有Setter方法
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.hasSetter($expr$) 

.getPropertyDescriptorMap : ht>获得字段名和字段描述Map,获得的结果会缓存在BeanInfoCache中
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.getPropertyDescriptorMap($expr$, $arg$) 

.copyProperties : ht>复制Bean对象属性
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.copyProperties($expr$, $arg$) 

.fillBean : ht>填充Bean的核心方法
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.fillBean($expr$, $arg$) 

.getFieldValue : ht>获得字段值,通过反射直接获得字段值,并不调用getXXX方法
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.getFieldValue($expr$, $arg$) 

.isBean : ht>判断是否为Bean对象,判定方法是
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.isBean($expr$) 

.fillBeanWithMap : ht>使用Map填充Bean对象
	java.util.Map [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.fillBeanWithMap($expr$, $arg$) 

.beanToMap : ht>对象转Map
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.beanToMap($expr$, $arg$) 

.getPropertyDescriptor : ht>获得Bean类属性描述
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.getPropertyDescriptor($expr$, $arg$) 

.getProperty : ht>解析Bean中的属性值
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.getProperty($expr$, $arg$) 

.edit : ht>编辑Bean的字段,static字段不会处理
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.edit($expr$, $arg$) 

.toBean : ht>ServletRequest参数转Bean
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.toBean($expr$, $arg$) 
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.toBean($expr$, $arg$) 

.setFieldValue : ht>设置字段值,通过反射设置字段值,并不调用setXXX方法
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.setFieldValue($expr$, $arg$) 

.hasPublicField : ht>指定类中是否有public类型字段(static字段除外)
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.hasPublicField($expr$) 

.isEmpty : ht>判断Bean是否为空对象,空对象表示本身为null或者所有属性都为null
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.isEmpty($expr$, $arg$) 

.getPropertyDescriptors : ht>获得Bean字段描述数组
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.getPropertyDescriptors($expr$) 

.findEditor : ht>查找类型转换器PropertyEditor
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.findEditor($expr$) 

.copyToList : ht>复制集合中的Bean属性
	java.util.Collection [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.copyToList($expr$, $arg$) 

.isMatchName : ht>给定的Bean的类名是否匹配指定类名字符串
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.isMatchName($expr$, $arg$) 

.isCommonFieldsEqual : ht>判断source与target的所有公共字段的值是否相同
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.isCommonFieldsEqual($expr$, $arg$) 

.hasNullField : ht>判断Bean是否包含值为null的属性
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.hasNullField($expr$, $arg$) 

.setProperty : ht>解析Bean中的属性值
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.setProperty($expr$, $arg$) 

.toBeanIgnoreError : ht>对象或Map转Bean,忽略字段转换时发生的异常
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.toBeanIgnoreError($expr$, $arg$) 

.isReadableBean : ht>判断是否为可读的Bean对象,判定方法是
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.isReadableBean($expr$) 

.isNotEmpty : ht>判断Bean是否为非空对象,非空对象表示本身不为null或者含有非null属性的对象
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.isNotEmpty($expr$, $arg$) 

.toBeanIgnoreCase : ht>对象或Map转Bean,忽略字段转换时发生的异常
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.toBeanIgnoreCase($expr$, $arg$) 

.hasGetter : ht>判断是否为Bean对象
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.hasGetter($expr$) 

.getFieldName : ht>获取Getter或Setter方法名对应的字段名称,规则如下
	java.lang.String [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.getFieldName($expr$) 

.trimStrFields : ht>把Bean里面的String属性做trim操作。此方法直接对传入的Bean做修改
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.trimStrFields($expr$, $arg$) 

.descForEach : ht>遍历Bean的属性
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  cn.hutool.core.bean.BeanUtil.descForEach($expr$, $arg$) 



######## cn.hutool.core.swing.ScreenUtil
.captureScreen : ht>截屏
	java.awt.Rectangle [cn.hutool.core.swing.ScreenUtil]  →  cn.hutool.core.swing.ScreenUtil.captureScreen($expr$, $arg$) 
	java.io.File [cn.hutool.core.swing.ScreenUtil]  →  cn.hutool.core.swing.ScreenUtil.captureScreen($expr$) 



######## cn.hutool.core.stream.CollectorUtil
.joining : ht>提供任意对象的Join操作的Collector实现
	java.lang.CharSequence [cn.hutool.core.stream.CollectorUtil]  →  cn.hutool.core.stream.CollectorUtil.joining($expr$, $arg$) 

.groupingBy : ht>提供对null值友好的groupingBy操作的Collector实现
	java.util.function.Function [cn.hutool.core.stream.CollectorUtil]  →  cn.hutool.core.stream.CollectorUtil.groupingBy($expr$, $arg$) 

.toMap : ht>对null友好的toMap操作的Collector实现
	java.util.function.Function [cn.hutool.core.stream.CollectorUtil]  →  cn.hutool.core.stream.CollectorUtil.toMap($expr$, $arg$) 

.reduceListMap : ht>聚合这种数据类型:{@codeCollection<Map<K,V>>=>Map<K,List>}
	java.util.function.Supplier [cn.hutool.core.stream.CollectorUtil]  →  cn.hutool.core.stream.CollectorUtil.reduceListMap($expr$) 

.mapMerger : ht>用户合并map的BinaryOperator,传入合并前需要对value进行的操作
	java.util.function.BinaryOperator [cn.hutool.core.stream.CollectorUtil]  →  cn.hutool.core.stream.CollectorUtil.mapMerger($expr$) 



######## cn.hutool.core.io.FileTypeUtil
.putFileType : ht>增加文件类型映射
	java.lang.String [cn.hutool.core.io.FileTypeUtil]  →  cn.hutool.core.io.FileTypeUtil.putFileType($expr$, $arg$) 

.getTypeByPath : ht>通过路径获得文件类型
	java.lang.String [cn.hutool.core.io.FileTypeUtil]  →  cn.hutool.core.io.FileTypeUtil.getTypeByPath($expr$) 

.removeFileType : ht>移除文件类型映射
	java.lang.String [cn.hutool.core.io.FileTypeUtil]  →  cn.hutool.core.io.FileTypeUtil.removeFileType($expr$) 

.getType : ht>根据文件流的头部信息获得文件类型
	java.lang.String [cn.hutool.core.io.FileTypeUtil]  →  cn.hutool.core.io.FileTypeUtil.getType($expr$) 
	java.io.File [cn.hutool.core.io.FileTypeUtil]  →  cn.hutool.core.io.FileTypeUtil.getType($expr$) 
	java.io.InputStream [cn.hutool.core.io.FileTypeUtil]  →  cn.hutool.core.io.FileTypeUtil.getType($expr$, $arg$) 



######## cn.hutool.core.util.CharUtil
.isChar : ht>给定对象对应的类是否为字符类,字符类包括
	java.lang.Object [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isChar($expr$) 

.isLetterLower : ht>isLetterLower
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isLetterLower($expr$) 

.isBlankChar : ht>是否空白符
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isBlankChar($expr$) 
	INT [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isBlankChar($expr$) 

.isLetterUpper : ht>isLetterUpper
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isLetterUpper($expr$) 

.toCloseByNumber : ht>将[1-20]数字转换为带圈的字符
	INT [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.toCloseByNumber($expr$) 

.isHexChar : ht>是否为16进制规范的字符,判断是否为如下字符
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isHexChar($expr$) 

.digit16 : ht>获取给定字符的16进制数值
	INT [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.digit16($expr$) 

.isAsciiPrintable : ht>是否为可见ASCII字符,可见字符位于32~126之间
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isAsciiPrintable($expr$) 

.isLetter : ht>判断是否为字母(包括大写字母和小写字母)
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isLetter($expr$) 

.isCharClass : ht>给定类名是否为字符类,字符类包括
	java.lang.Class [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isCharClass($expr$) 

.toCloseChar : ht>将字母、数字转换为带圈的字符
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.toCloseChar($expr$) 

.isAscii : ht>是否为ASCII字符,ASCII字符位于0~127之间
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isAscii($expr$) 

.getType : ht>获取字符类型
	INT [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.getType($expr$) 

.isNumber : ht>isNumber
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isNumber($expr$) 

.isEmoji : ht>判断是否为emoji表情符
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isEmoji($expr$) 

.equals : ht>比较两个字符是否相同
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.equals($expr$, $arg$) 

.isAsciiControl : ht>是否为ASCII控制符(不可见字符),控制符位于0~31和127
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isAsciiControl($expr$) 

.toString : ht>字符转为字符串
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.toString($expr$) 

.isLetterOrNumber : ht>是否为字母或数字,包括A~Z、a~z、0~9
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isLetterOrNumber($expr$) 

.isFileSeparator : ht>是否为Windows或者Linux(Unix)文件分隔符
	CHAR [cn.hutool.core.util.CharUtil]  →  cn.hutool.core.util.CharUtil.isFileSeparator($expr$) 



######## cn.hutool.core.io.BufferUtil
.createUtf8 : ht>从字符串创建新Buffer,使用UTF-8编码
	java.lang.CharSequence [cn.hutool.core.io.BufferUtil]  →  cn.hutool.core.io.BufferUtil.createUtf8($expr$) 

.readBytes : ht>读取剩余部分bytes
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  cn.hutool.core.io.BufferUtil.readBytes($expr$, $arg$) 

.create : ht>创建新Buffer
	ARRAY [cn.hutool.core.io.BufferUtil]  →  cn.hutool.core.io.BufferUtil.create($expr$) 
	java.lang.CharSequence [cn.hutool.core.io.BufferUtil]  →  cn.hutool.core.io.BufferUtil.create($expr$, $arg$) 

.readUtf8Str : ht>读取剩余部分并转为UTF-8编码字符串
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  cn.hutool.core.io.BufferUtil.readUtf8Str($expr$) 

.copy : ht>拷贝ByteBuffer
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  cn.hutool.core.io.BufferUtil.copy($expr$, $arg$) 

.readLine : ht>读取一行,如果buffer中最后一部分并非完整一行,则返回null
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  cn.hutool.core.io.BufferUtil.readLine($expr$, $arg$) 

.lineEnd : ht>一行的末尾位置,查找位置时位移ByteBuffer到结束位置
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  cn.hutool.core.io.BufferUtil.lineEnd($expr$, $arg$) 

.readStr : ht>读取剩余部分并转为字符串
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  cn.hutool.core.io.BufferUtil.readStr($expr$, $arg$) 

.createCharBuffer : ht>创建CharBuffer
	INT [cn.hutool.core.io.BufferUtil]  →  cn.hutool.core.io.BufferUtil.createCharBuffer($expr$) 



######## cn.hutool.core.io.unit.DataSizeUtil
.format : ht>可读的文件大小
	LONG [cn.hutool.core.io.unit.DataSizeUtil]  →  cn.hutool.core.io.unit.DataSizeUtil.format($expr$) 

.parse : ht>解析数据大小字符串,转换为bytes大小
	java.lang.String [cn.hutool.core.io.unit.DataSizeUtil]  →  cn.hutool.core.io.unit.DataSizeUtil.parse($expr$) 



######## cn.hutool.core.io.file.FileSystemUtil
.create : ht>创建FileSystem
	java.lang.String [cn.hutool.core.io.file.FileSystemUtil]  →  cn.hutool.core.io.file.FileSystemUtil.create($expr$) 

.getRoot : ht>获取目录的根路径,或Zip文件中的根路径
	java.nio.file.FileSystem [cn.hutool.core.io.file.FileSystemUtil]  →  cn.hutool.core.io.file.FileSystemUtil.getRoot($expr$) 

.createZip : ht>创建Zip的FileSystem
	java.lang.String [cn.hutool.core.io.file.FileSystemUtil]  →  cn.hutool.core.io.file.FileSystemUtil.createZip($expr$, $arg$) 



######## cn.hutool.core.util.ReferenceUtil.ReferenceType
.valueOf : ht>valueOf
	java.lang.String [cn.hutool.core.util.ReferenceUtil.ReferenceType]  →  cn.hutool.core.util.ReferenceUtil.ReferenceType.valueOf($expr$) 



######## cn.hutool.core.exceptions.CheckedUtil
.uncheck : ht>接收一个可以转化成cn.hutool.core.lang.func.Func的Lambda表达式,和一个可以把Exception转化成RuntimeExceptionde的表达式,当执行表达式抛出任何异常的时候,都会转化成运行时异常
	cn.hutool.core.lang.func.Func0 [cn.hutool.core.exceptions.CheckedUtil]  →  cn.hutool.core.exceptions.CheckedUtil.uncheck($expr$, $arg$) 
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.exceptions.CheckedUtil]  →  cn.hutool.core.exceptions.CheckedUtil.uncheck($expr$, $arg$) 
	cn.hutool.core.lang.func.VoidFunc0 [cn.hutool.core.exceptions.CheckedUtil]  →  cn.hutool.core.exceptions.CheckedUtil.uncheck($expr$, $arg$) 
	cn.hutool.core.lang.func.VoidFunc1 [cn.hutool.core.exceptions.CheckedUtil]  →  cn.hutool.core.exceptions.CheckedUtil.uncheck($expr$, $arg$) 
	cn.hutool.core.lang.func.VoidFunc [cn.hutool.core.exceptions.CheckedUtil]  →  cn.hutool.core.exceptions.CheckedUtil.uncheck($expr$, $arg$) 
	cn.hutool.core.lang.func.Func [cn.hutool.core.exceptions.CheckedUtil]  →  cn.hutool.core.exceptions.CheckedUtil.uncheck($expr$, $arg$) 



######## cn.hutool.core.lang.tree.TreeUtil
.createEmptyNode : ht>创建空Tree的节点
	java.lang.Object [cn.hutool.core.lang.tree.TreeUtil]  →  cn.hutool.core.lang.tree.TreeUtil.createEmptyNode($expr$) 

.build : ht>树构建
	java.util.List [cn.hutool.core.lang.tree.TreeUtil]  →  cn.hutool.core.lang.tree.TreeUtil.build($expr$, $arg$) 
	java.util.Map [cn.hutool.core.lang.tree.TreeUtil]  →  cn.hutool.core.lang.tree.TreeUtil.build($expr$, $arg$) 

.getNode : ht>获取ID对应的节点,如果有多个ID相同的节点,只返回第一个
	cn.hutool.core.lang.tree.Tree [cn.hutool.core.lang.tree.TreeUtil]  →  cn.hutool.core.lang.tree.TreeUtil.getNode($expr$, $arg$) 

.buildSingle : ht>构建单root节点树
	java.util.List [cn.hutool.core.lang.tree.TreeUtil]  →  cn.hutool.core.lang.tree.TreeUtil.buildSingle($expr$, $arg$) 
	java.util.Map [cn.hutool.core.lang.tree.TreeUtil]  →  cn.hutool.core.lang.tree.TreeUtil.buildSingle($expr$, $arg$) 

.getParentsName : ht>获取所有父节点名称列表
	cn.hutool.core.lang.tree.Tree [cn.hutool.core.lang.tree.TreeUtil]  →  cn.hutool.core.lang.tree.TreeUtil.getParentsName($expr$, $arg$) 



######## cn.hutool.core.thread.AsyncUtil
.waitAll : ht>等待所有任务执行完毕,包裹了异常
	ARRAY [cn.hutool.core.thread.AsyncUtil]  →  cn.hutool.core.thread.AsyncUtil.waitAll($expr$) 

.get : ht>获取异步任务结果,包裹了异常
	java.util.concurrent.CompletableFuture [cn.hutool.core.thread.AsyncUtil]  →  cn.hutool.core.thread.AsyncUtil.get($expr$) 

.waitAny : ht>等待任意一个任务执行完毕,包裹了异常
	ARRAY [cn.hutool.core.thread.AsyncUtil]  →  cn.hutool.core.thread.AsyncUtil.waitAny($expr$) 



######## cn.hutool.core.util.StrUtil
.similar : ht>计算两个字符串的相似度
	java.lang.String [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.similar($expr$, $arg$) 

.utf8Str : ht>将对象转为字符串
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.utf8Str($expr$) 

.getReader : ht>获得StringReader
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.getReader($expr$) 

.strBuilder : ht>创建StrBuilder对象
	INT [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.strBuilder($expr$) 

.format : ht>格式化文本,使用{varName}占位
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.format($expr$, $arg$) 

.fillAfter : ht>将已有字符串填充为规定长度,如果已有字符串超过这个长度则返回这个字符串
	java.lang.String [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.fillAfter($expr$, $arg$) 

.reverse : ht>反转字符串
	java.lang.String [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.reverse($expr$) 

.fill : ht>将已有字符串填充为规定长度,如果已有字符串超过这个长度则返回这个字符串
	java.lang.String [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.fill($expr$, $arg$) 

.str : ht>将byte数组转为字符串
	ARRAY [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.str($expr$, $arg$) 
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.str($expr$, $arg$) 
	java.nio.ByteBuffer [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.str($expr$, $arg$) 

.fillBefore : ht>将已有字符串填充为规定长度,如果已有字符串超过这个长度则返回这个字符串
	java.lang.String [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.fillBefore($expr$, $arg$) 

.trim : ht>给定字符串数组全部做去首尾空格
	ARRAY [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.trim($expr$) 

.builder : ht>创建StringBuilder对象
	INT [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.builder($expr$) 

.toStringOrNull : ht>调用对象的toString方法,null会返回null
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.toStringOrNull($expr$) 

.toString : ht>调用对象的toString方法,null会返回"null"
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.toString($expr$) 

.isBlankIfStr : ht>如果对象是字符串是否为空白,空白的定义如下
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.isBlankIfStr($expr$) 

.isEmptyIfStr : ht>如果对象是字符串是否为空串,空的定义如下
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.isEmptyIfStr($expr$) 



######## cn.hutool.core.util.CreditCodeUtil
.isCreditCode : ht>是否是有效的统一社会信用代码
	java.lang.CharSequence [cn.hutool.core.util.CreditCodeUtil]  →  cn.hutool.core.util.CreditCodeUtil.isCreditCode($expr$) 

.isCreditCodeSimple : ht>正则校验统一社会信用代码(18位)
	java.lang.CharSequence [cn.hutool.core.util.CreditCodeUtil]  →  cn.hutool.core.util.CreditCodeUtil.isCreditCodeSimple($expr$) 



######## cn.hutool.core.io.file.PathUtil
.copyFile : ht>通过JDK7+的{@linkFiles#copy(Path,Path,CopyOption...)}方法拷贝文件
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.copyFile($expr$, $arg$) 

.getName : ht>获取Path文件名
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.getName($expr$) 

.walkFiles : ht>遍历指定path下的文件并做处理
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.walkFiles($expr$, $arg$) 

.del : ht>删除文件或者文件夹,不追踪软链
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.del($expr$) 

.isSub : ht>判断给定的目录是否为给定文件或文件夹的子目录
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.isSub($expr$, $arg$) 

.loopFiles : ht>递归遍历目录以及子目录中的所有文件
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.loopFiles($expr$, $arg$) 

.copyContent : ht>拷贝目录下的所有文件或目录到目标目录中,此方法不支持文件对文件的拷贝
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.copyContent($expr$, $arg$) 

.getUtf8Reader : ht>获得一个文件读取器
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.getUtf8Reader($expr$) 

.toAbsNormal : ht>将Path路径转换为标准的绝对路径
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.toAbsNormal($expr$) 

.subPath : ht>获取指定位置的子路径部分,支持负数,例如起始为-1表示从后数第一个节点位置
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.subPath($expr$, $arg$) 

.copy : ht>拷贝文件或目录,拷贝规则为
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.copy($expr$, $arg$) 

.mkdir : ht>创建所给目录及其父目录
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.mkdir($expr$) 

.moveContent : ht>移动文件或目录内容到目标目录中,例如
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.moveContent($expr$, $arg$) 

.mkParentDirs : ht>创建所给文件或目录的父目录
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.mkParentDirs($expr$) 

.move : ht>移动文件或目录
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.move($expr$, $arg$) 

.getPathEle : ht>获取指定位置的子路径部分,支持负数,例如index为-1表示从后数第一个节点位置
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.getPathEle($expr$, $arg$) 

.getAttributes : ht>获取文件属性
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.getAttributes($expr$, $arg$) 

.isFile : ht>判断是否为文件,如果file为null,则返回false
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.isFile($expr$, $arg$) 

.getMimeType : ht>获得文件的MimeType
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.getMimeType($expr$) 

.getReader : ht>获得一个文件读取器
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.getReader($expr$, $arg$) 

.isDirEmpty : ht>目录是否为空
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.isDirEmpty($expr$) 

.getInputStream : ht>获得输入流
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.getInputStream($expr$) 

.rename : ht>修改文件或目录的文件名,不变更路径,只是简单修改文件名
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.rename($expr$, $arg$) 

.equals : ht>检查两个文件是否是同一个文件
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.equals($expr$, $arg$) 

.readBytes : ht>读取文件的所有内容为byte数组
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.readBytes($expr$) 

.exists : ht>判断文件或目录是否存在
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.exists($expr$, $arg$) 

.getOutputStream : ht>获得输出流
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.getOutputStream($expr$) 

.getLastPathEle : ht>获取指定位置的最后一个子路径部分
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.getLastPathEle($expr$) 

.isSymlink : ht>判断是否为符号链接文件
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.isSymlink($expr$) 

.isDirectory : ht>判断是否为目录,如果file为null,则返回false
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  cn.hutool.core.io.file.PathUtil.isDirectory($expr$, $arg$) 



######## cn.hutool.core.text.csv.CsvUtil
.getReader : ht>获取CSV读取器,调用此方法创建的Reader须自行指定读取的资源
	cn.hutool.core.text.csv.CsvReadConfig [cn.hutool.core.text.csv.CsvUtil]  →  cn.hutool.core.text.csv.CsvUtil.getReader($expr$) 
	java.io.Reader [cn.hutool.core.text.csv.CsvUtil]  →  cn.hutool.core.text.csv.CsvUtil.getReader($expr$, $arg$) 

.getWriter : ht>获取CSV生成器(写出器)
	java.io.Writer [cn.hutool.core.text.csv.CsvUtil]  →  cn.hutool.core.text.csv.CsvUtil.getWriter($expr$, $arg$) 
	java.lang.String [cn.hutool.core.text.csv.CsvUtil]  →  cn.hutool.core.text.csv.CsvUtil.getWriter($expr$, $arg$) 
	java.io.File [cn.hutool.core.text.csv.CsvUtil]  →  cn.hutool.core.text.csv.CsvUtil.getWriter($expr$, $arg$) 



######## cn.hutool.core.util.ReflectUtil
.isOuterClassField : ht>是否为父类引用字段
	java.lang.reflect.Field [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.isOuterClassField($expr$) 

.getFieldMap : ht>获取指定类中字段名和字段对应的有序Map,包括其父类中的字段
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getFieldMap($expr$) 

.invoke : ht>执行对象中指定方法
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.invoke($expr$, $arg$) 

.invokeStatic : ht>执行静态方法
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.invokeStatic($expr$, $arg$) 

.getMethod : ht>查找指定方法如果找不到对应的方法则返回null
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getMethod($expr$, $arg$) 

.getMethodByNameIgnoreCase : ht>按照方法名查找指定方法名的方法,只返回匹配到的第一个方法,如果找不到对应的方法则返回null
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getMethodByNameIgnoreCase($expr$, $arg$) 

.getConstructors : ht>获得一个类中所有构造列表
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getConstructors($expr$) 

.getFieldValue : ht>获取字段值
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getFieldValue($expr$, $arg$) 

.removeFinalModify : ht>设置final的field字段可以被修改
	java.lang.reflect.Field [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.removeFinalModify($expr$) 

.invokeWithCheck : ht>执行方法
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.invokeWithCheck($expr$, $arg$) 

.getPublicMethod : ht>查找指定Public方法如果找不到对应的方法或方法不为public的则返回null
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getPublicMethod($expr$, $arg$) 

.newInstanceIfPossible : ht>尝试遍历并调用此类的所有构造方法,直到构造成功并返回
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.newInstanceIfPossible($expr$) 

.isHashCodeMethod : ht>是否为hashCode方法
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.isHashCodeMethod($expr$) 

.getMethodByName : ht>按照方法名查找指定方法名的方法,只返回匹配到的第一个方法,如果找不到对应的方法则返回null
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getMethodByName($expr$, $arg$) 

.isGetterOrSetter : ht>检查给定方法是否为Getter或者Setter方法,规则为
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.isGetterOrSetter($expr$, $arg$) 

.setAccessible : ht>设置方法为可访问(私有方法可以被外部调用)
	java.lang.reflect.AccessibleObject [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.setAccessible($expr$) 

.getMethodOfObj : ht>查找指定对象中的所有方法(包括非public方法),也包括父对象和Object类的方法
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getMethodOfObj($expr$, $arg$) 

.setFieldValue : ht>设置字段值
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.setFieldValue($expr$, $arg$) 

.isEmptyParam : ht>是否为无参数方法
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.isEmptyParam($expr$) 

.getMethodsDirectly : ht>获得一个类中所有方法列表,直接反射获取,无缓存
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getMethodsDirectly($expr$, $arg$) 

.getField : ht>查找指定类中的指定name的字段(包括非public字段),也包括父类和Object类的字段,字段不存在则返回null
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getField($expr$, $arg$) 

.getPublicMethodNames : ht>获得指定类本类及其父类中的Public方法名
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getPublicMethodNames($expr$) 

.newInstance : ht>实例化对象
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.newInstance($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.newInstance($expr$) 

.getFieldsValue : ht>获取所有字段的值
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getFieldsValue($expr$) 

.getMethodNames : ht>获得指定类中的Public方法名
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getMethodNames($expr$) 

.getPublicMethods : ht>获得指定类过滤后的Public方法列表
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getPublicMethods($expr$, $arg$) 

.getConstructor : ht>查找类中的指定参数的构造方法,如果找到构造方法,会自动设置可访问为true
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getConstructor($expr$, $arg$) 

.getConstructorsDirectly : ht>获得一个类中所有构造列表,直接反射获取,无缓存
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getConstructorsDirectly($expr$) 

.getFields : ht>获得一个类中所有字段列表,包括其父类中的字段
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getFields($expr$, $arg$) 

.getStaticFieldValue : ht>获取静态字段值
	java.lang.reflect.Field [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getStaticFieldValue($expr$) 

.isGetterOrSetterIgnoreCase : ht>检查给定方法是否为Getter或者Setter方法,规则为
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.isGetterOrSetterIgnoreCase($expr$) 

.isEqualsMethod : ht>是否为equals方法
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.isEqualsMethod($expr$) 

.getMethodIgnoreCase : ht>忽略大小写查找指定方法,如果找不到对应的方法则返回null
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getMethodIgnoreCase($expr$, $arg$) 

.getFieldName : ht>获取字段名,如果存在Alias注解,读取注解的值作为名称
	java.lang.reflect.Field [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getFieldName($expr$) 

.getMethods : ht>获得一个类中所有方法列表,包括其父类中的方法
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getMethods($expr$, $arg$) 

.getFieldsDirectly : ht>获得一个类中所有字段列表,直接反射获取,无缓存
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.getFieldsDirectly($expr$, $arg$) 

.isToStringMethod : ht>是否为toString方法
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.isToStringMethod($expr$) 

.invokeRaw : ht>执行方法
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.invokeRaw($expr$, $arg$) 

.hasField : ht>查找指定类中是否包含指定名称对应的字段,包括所有字段(包括非public字段),也包括父类和Object类的字段
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  cn.hutool.core.util.ReflectUtil.hasField($expr$, $arg$) 



######## cn.hutool.core.lang.reflect.MethodHandleUtil
.findConstructor : ht>查找指定的构造方法
	java.lang.Class [cn.hutool.core.lang.reflect.MethodHandleUtil]  →  cn.hutool.core.lang.reflect.MethodHandleUtil.findConstructor($expr$, $arg$) 

.lookup : ht>jdk8中如果直接调用{@linkMethodHandles#lookup()}获取到的{@linkMethodHandles.Lookup}在调用findSpecial和unreflectSpecial
	java.lang.Class [cn.hutool.core.lang.reflect.MethodHandleUtil]  →  cn.hutool.core.lang.reflect.MethodHandleUtil.lookup($expr$) 

.findMethod : ht>查找指定方法的方法句柄
	java.lang.Class [cn.hutool.core.lang.reflect.MethodHandleUtil]  →  cn.hutool.core.lang.reflect.MethodHandleUtil.findMethod($expr$, $arg$) 

.invokeSpecial : ht>执行接口或对象中的特殊方法(private、static等)
	java.lang.Object [cn.hutool.core.lang.reflect.MethodHandleUtil]  →  cn.hutool.core.lang.reflect.MethodHandleUtil.invokeSpecial($expr$, $arg$) 

.invoke : ht>执行接口或对象中的方法
	java.lang.Object [cn.hutool.core.lang.reflect.MethodHandleUtil]  →  cn.hutool.core.lang.reflect.MethodHandleUtil.invoke($expr$, $arg$) 
	BOOLEAN [cn.hutool.core.lang.reflect.MethodHandleUtil]  →  cn.hutool.core.lang.reflect.MethodHandleUtil.invoke($expr$, $arg$) 



######## cn.hutool.core.img.GraphicsUtil
.setAlpha : ht>设置画笔透明度
	java.awt.Graphics2D [cn.hutool.core.img.GraphicsUtil]  →  cn.hutool.core.img.GraphicsUtil.setAlpha($expr$, $arg$) 

.drawStringColourful : ht>绘制字符串,使用随机颜色,默认抗锯齿
	java.awt.Graphics [cn.hutool.core.img.GraphicsUtil]  →  cn.hutool.core.img.GraphicsUtil.drawStringColourful($expr$, $arg$) 

.drawImg : ht>绘制图片
	java.awt.Graphics [cn.hutool.core.img.GraphicsUtil]  →  cn.hutool.core.img.GraphicsUtil.drawImg($expr$, $arg$) 

.createGraphics : ht>创建Graphics2D
	java.awt.image.BufferedImage [cn.hutool.core.img.GraphicsUtil]  →  cn.hutool.core.img.GraphicsUtil.createGraphics($expr$, $arg$) 

.getCenterY : ht>获取文字居中高度的Y坐标(距离上边距距离)
	java.awt.Graphics [cn.hutool.core.img.GraphicsUtil]  →  cn.hutool.core.img.GraphicsUtil.getCenterY($expr$, $arg$) 

.drawString : ht>绘制字符串,默认抗锯齿
	java.awt.Graphics [cn.hutool.core.img.GraphicsUtil]  →  cn.hutool.core.img.GraphicsUtil.drawString($expr$, $arg$) 



######## cn.hutool.core.text.UnicodeUtil
.toUnicode : ht>字符编码为Unicode形式
	CHAR [cn.hutool.core.text.UnicodeUtil]  →  cn.hutool.core.text.UnicodeUtil.toUnicode($expr$) 
	java.lang.String [cn.hutool.core.text.UnicodeUtil]  →  cn.hutool.core.text.UnicodeUtil.toUnicode($expr$, $arg$) 
	INT [cn.hutool.core.text.UnicodeUtil]  →  cn.hutool.core.text.UnicodeUtil.toUnicode($expr$) 

.toString : ht>Unicode字符串转为普通字符串
	java.lang.String [cn.hutool.core.text.UnicodeUtil]  →  cn.hutool.core.text.UnicodeUtil.toString($expr$) 



######## cn.hutool.core.thread.ThreadUtil
.newNamedThreadFactory : ht>创建线程工厂
	java.lang.String [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.newNamedThreadFactory($expr$, $arg$) 

.safeSleep : ht>考虑{@linkThread#sleep(long)}方法有可能时间不足给定毫秒数,此方法保证sleep时间不小于给定的毫秒数
	java.lang.Number [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.safeSleep($expr$) 
	LONG [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.safeSleep($expr$) 

.newThread : ht>创建新线程
	java.lang.Runnable [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.newThread($expr$, $arg$) 

.waitForDie : ht>等待线程结束.调用{@linkThread#join()}并忽略InterruptedException
	java.lang.Thread [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.waitForDie($expr$) 

.createThreadLocal : ht>创建本地线程对象
	java.util.function.Supplier [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.createThreadLocal($expr$) 
	BOOLEAN [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.createThreadLocal($expr$) 

.sync : ht>阻塞当前线程,保证在main方法中执行不被退出
	java.lang.Object [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.sync($expr$) 

.execute : ht>直接在公共线程池中执行线程
	java.lang.Runnable [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.execute($expr$) 

.newExecutorByBlockingCoefficient : ht>获得一个新的线程池
	FLOAT [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.newExecutorByBlockingCoefficient($expr$) 

.getStackTraceElement : ht>获得堆栈项
	INT [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.getStackTraceElement($expr$) 

.sleep : ht>挂起当前线程
	java.lang.Number [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.sleep($expr$, $arg$) 
	LONG [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.sleep($expr$) 

.schedule : ht>开始执行一个定时任务,执行方式分fixedRate模式和fixedDelay模式
	java.util.concurrent.ScheduledThreadPoolExecutor [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.schedule($expr$, $arg$) 

.newCountDownLatch : ht>新建一个CountDownLatch,一个同步辅助类,在完成一组正在其他线程中执行的操作之前,它允许一个或多个线程一直等待
	INT [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.newCountDownLatch($expr$) 

.createThreadFactory : ht>创建自定义线程名称前缀的ThreadFactory
	java.lang.String [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.createThreadFactory($expr$) 

.newFixedExecutor : ht>获取一个新的线程池,默认的策略如下
	INT [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.newFixedExecutor($expr$, $arg$) 

.execAsync : ht>执行异步方法
	java.util.concurrent.Callable [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.execAsync($expr$) 
	java.lang.Runnable [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.execAsync($expr$, $arg$) 

.interrupt : ht>结束线程,调用此方法后,线程将抛出InterruptedException异常
	java.lang.Thread [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.interrupt($expr$, $arg$) 

.concurrencyTest : ht>并发测试
	INT [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.concurrencyTest($expr$, $arg$) 

.newCompletionService : ht>新建一个CompletionService,调用其submit方法可以异步执行多个任务,最后调用take方法按照完成的顺序获得其结果
	java.util.concurrent.ExecutorService [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.newCompletionService($expr$) 

.createScheduledExecutor : ht>创建ScheduledThreadPoolExecutor
	INT [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.createScheduledExecutor($expr$) 

.newExecutor : ht>新建一个线程池,默认的策略如下
	INT [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.newExecutor($expr$, $arg$) 

.getThreads : ht>获取JVM中与当前线程同组的所有线程
	java.lang.ThreadGroup [cn.hutool.core.thread.ThreadUtil]  →  cn.hutool.core.thread.ThreadUtil.getThreads($expr$) 



######## cn.hutool.core.util.ReferenceUtil
.create : ht>获得引用
	cn.hutool.core.util.ReferenceUtil.ReferenceType [cn.hutool.core.util.ReferenceUtil]  →  cn.hutool.core.util.ReferenceUtil.create($expr$, $arg$) 



######## cn.hutool.core.util.NumberUtil
.binaryToLong : ht>二进制转long
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.binaryToLong($expr$) 

.toUnsignedByteArray : ht>以无符号字节数组的形式返回传入值
	java.math.BigInteger [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.toUnsignedByteArray($expr$) 
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.toUnsignedByteArray($expr$, $arg$) 

.div : ht>提供(相对)精确的除法运算,当发生除不尽的情况时,由scale指定精确度
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.div($expr$, $arg$) 
	FLOAT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.div($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.div($expr$, $arg$) 
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.div($expr$, $arg$) 
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.div($expr$, $arg$) 

.ceilDiv : ht>补充Math.ceilDiv()JDK8中添加了和Math.floorDiv()但却没有ceilDiv()
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.ceilDiv($expr$, $arg$) 

.appendRange : ht>将给定范围内的整数添加到已有集合中
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.appendRange($expr$, $arg$) 

.processMultiple : ht>可以用于计算双色球、大乐透注数的方法
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.processMultiple($expr$, $arg$) 

.isInteger : ht>判断String是否是整数
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isInteger($expr$) 

.generateRandomNumber : ht>生成不重复随机数根据给定的最小数字和最大数字,以及随机数的个数,产生指定的不重复的数组
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.generateRandomNumber($expr$, $arg$) 

.toDouble : ht>Number值转换为double
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.toDouble($expr$) 

.sqrt : ht>平方根算法
	LONG [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.sqrt($expr$) 

.isNumber : ht>是否为数字,支持包括
	java.lang.CharSequence [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isNumber($expr$) 

.decimalFormat : ht>格式化double
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.decimalFormat($expr$, $arg$) 

.partValue : ht>把给定的总数平均分成N份,返回每份的个数
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.partValue($expr$, $arg$) 

.calculate : ht>计算数学表达式的值,只支持加减乘除和取余
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.calculate($expr$) 

.zero2One : ht>如果给定值为0,返回1,否则返回原值
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.zero2One($expr$) 

.toStr : ht>数字转字符串
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.toStr($expr$, $arg$) 
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.toStr($expr$, $arg$) 

.isGreaterOrEqual : ht>比较大小,参数1&gt;=参数2返回true
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isGreaterOrEqual($expr$, $arg$) 

.add : ht>提供精确的加法运算
	FLOAT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.add($expr$, $arg$) 
	ARRAY [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.add($expr$) 
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.add($expr$, $arg$) 
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.add($expr$, $arg$) 

.toBytes : ht>int值转byte数组,使用大端字节序(高位字节在前,低位字节在后)
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.toBytes($expr$) 

.isGreater : ht>比较大小,参数1&gt;参数2返回true
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isGreater($expr$, $arg$) 

.count : ht>计算等份个数
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.count($expr$, $arg$) 

.fromUnsignedByteArray : ht>无符号bytes转BigInteger
	ARRAY [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.fromUnsignedByteArray($expr$, $arg$) 

.decimalFormatMoney : ht>格式化金额输出,每三位用逗号分隔
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.decimalFormatMoney($expr$) 

.roundStr : ht>保留固定位数小数
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.roundStr($expr$, $arg$) 
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.roundStr($expr$, $arg$) 

.isDouble : ht>判断字符串是否是浮点数
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isDouble($expr$) 

.sub : ht>提供精确的减法运算
	FLOAT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.sub($expr$, $arg$) 
	ARRAY [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.sub($expr$) 
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.sub($expr$, $arg$) 
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.sub($expr$, $arg$) 

.parseFloat : ht>解析转换数字字符串为long型数字,规则如下
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.parseFloat($expr$) 

.isValidNumber : ht>检查是否为有效的数字
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isValidNumber($expr$) 

.formatPercent : ht>格式化百分比,小数采用四舍五入方式
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.formatPercent($expr$, $arg$) 

.compare : ht>比较两个值的大小
	BYTE [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.compare($expr$, $arg$) 
	CHAR [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.compare($expr$, $arg$) 
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.compare($expr$, $arg$) 
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.compare($expr$, $arg$) 
	SHORT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.compare($expr$, $arg$) 
	LONG [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.compare($expr$, $arg$) 

.mul : ht>提供精确的乘法运算
	FLOAT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.mul($expr$, $arg$) 
	ARRAY [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.mul($expr$) 
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.mul($expr$, $arg$) 
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.mul($expr$, $arg$) 
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.mul($expr$, $arg$) 

.isLess : ht>比较大小,参数1&lt;参数2返回true
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isLess($expr$, $arg$) 

.isEven : ht>检查是否为偶数
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isEven($expr$) 

.factorial : ht>计算范围阶乘
	java.math.BigInteger [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.factorial($expr$, $arg$) 
	LONG [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.factorial($expr$, $arg$) 

.generateBySet : ht>生成不重复随机数根据给定的最小数字和最大数字,以及随机数的个数,产生指定的不重复的数组
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.generateBySet($expr$, $arg$) 

.toBigInteger : ht>数字转BigInteger
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.toBigInteger($expr$) 
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.toBigInteger($expr$) 

.range : ht>从0开始给定范围内的整数列表,步进为1
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.range($expr$, $arg$) 

.parseNumber : ht>将指定字符串转换为Number对象
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.parseNumber($expr$) 

.isBeside : ht>判断两个数字是否相邻,例如1和2相邻,1和3不相邻
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isBeside($expr$, $arg$) 
	LONG [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isBeside($expr$, $arg$) 

.isLessOrEqual : ht>比较大小,参数1&lt;=参数2返回true
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isLessOrEqual($expr$, $arg$) 

.binaryToInt : ht>二进制转int
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.binaryToInt($expr$) 

.parseDouble : ht>解析转换数字字符串为long型数字,规则如下
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.parseDouble($expr$) 

.roundHalfEven : ht>四舍六入五成双计算法
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.roundHalfEven($expr$, $arg$) 
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.roundHalfEven($expr$, $arg$) 

.divisor : ht>最大公约数
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.divisor($expr$, $arg$) 

.min : ht>取最小值
	ARRAY [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.min($expr$) 

.getBinaryStr : ht>获得数字对应的二进制字符串
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.getBinaryStr($expr$) 

.isOdd : ht>检查是否为奇数
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isOdd($expr$) 

.pow : ht>提供精确的幂运算
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.pow($expr$, $arg$) 
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.pow($expr$, $arg$) 

.isPrimes : ht>是否是质数(素数)
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isPrimes($expr$) 

.isIn : ht>检查值是否在指定范围内
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isIn($expr$, $arg$) 

.toInt : ht>byte数组转int,使用大端字节序(高位字节在前,低位字节在后)
	ARRAY [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.toInt($expr$) 

.isLong : ht>判断字符串是否是Long类型
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isLong($expr$) 

.max : ht>取最大值
	ARRAY [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.max($expr$) 

.newBigInteger : ht>创建BigInteger,支持16进制、10进制和8进制,如果传入空白串返回null
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.newBigInteger($expr$) 

.isValid : ht>检查是否为有效的数字
	FLOAT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isValid($expr$) 
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isValid($expr$) 

.multiple : ht>最小公倍数
	INT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.multiple($expr$, $arg$) 

.toBigDecimal : ht>数字转BigDecimal
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.toBigDecimal($expr$) 
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.toBigDecimal($expr$) 

.parseInt : ht>解析转换数字字符串为int型数字,规则如下
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.parseInt($expr$) 

.isPowerOfTwo : ht>判断一个整数是否是2的幂
	LONG [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.isPowerOfTwo($expr$) 

.round : ht>保留固定位数小数
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.round($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.round($expr$, $arg$) 
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.round($expr$, $arg$) 

.parseLong : ht>解析转换数字字符串为long型数字,规则如下
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.parseLong($expr$) 

.equals : ht>比较两个字符是否相同
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.equals($expr$, $arg$) 
	FLOAT [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.equals($expr$, $arg$) 
	CHAR [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.equals($expr$, $arg$) 
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.equals($expr$, $arg$) 
	LONG [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.equals($expr$, $arg$) 

.roundDown : ht>保留固定小数位数,舍去多余位数
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.roundDown($expr$, $arg$) 
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.roundDown($expr$, $arg$) 

.null2Zero : ht>空转0
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  cn.hutool.core.util.NumberUtil.null2Zero($expr$) 



######## cn.hutool.core.collection.SpliteratorUtil
.trans : ht>使用给定的转换函数,转换源Spliterator为新类型的Spliterator
	java.util.Spliterator [cn.hutool.core.collection.SpliteratorUtil]  →  cn.hutool.core.collection.SpliteratorUtil.trans($expr$, $arg$) 



######## cn.hutool.core.util.ObjectUtil
.defaultIfNull : ht>如果给定对象为null返回默认值
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.defaultIfNull($expr$, $arg$) 

.compare : ht>null安全的对象比较
	java.lang.Comparable [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.compare($expr$, $arg$) 

.isAllEmpty : ht>是否全都为null或空对象,通过{@linkObjectUtil#isEmpty(Object)}判断元素
	ARRAY [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.isAllEmpty($expr$) 

.hasNull : ht>是否存在null对象,通过{@linkObjectUtil#isNull(Object)}判断元素
	ARRAY [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.hasNull($expr$) 

.isBasicType : ht>是否为基本类型,包括包装类型和非包装类型
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.isBasicType($expr$) 

.getTypeArgument : ht>获得给定类的第一个泛型参数
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.getTypeArgument($expr$, $arg$) 

.emptyCount : ht>存在多少个null或空对象,通过{@linkObjectUtil#isEmpty(Object)}判断元素
	ARRAY [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.emptyCount($expr$) 

.cloneByStream : ht>序列化后拷贝流的方式克隆
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.cloneByStream($expr$) 

.deserialize : ht>反序列化
	ARRAY [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.deserialize($expr$) 

.defaultIfEmpty : ht>如果给定对象为null或者""返回默认值
	java.lang.CharSequence [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.defaultIfEmpty($expr$, $arg$) 
	java.lang.String [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.defaultIfEmpty($expr$, $arg$) 

.cloneIfPossible : ht>返回克隆后的对象,如果克隆失败,返回原对象
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.cloneIfPossible($expr$) 

.isNotNull : ht>检查对象是否不为null
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.isNotNull($expr$) 

.hasEmpty : ht>是否存在null或空对象,通过{@linkObjectUtil#isEmpty(Object)}判断元素
	ARRAY [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.hasEmpty($expr$) 

.isValidIfNumber : ht>检查是否为有效的数字
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.isValidIfNumber($expr$) 

.isAllNotEmpty : ht>是否全都不为null或空对象,通过{@linkObjectUtil#isEmpty(Object)}判断元素
	ARRAY [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.isAllNotEmpty($expr$) 

.length : ht>计算对象长度,如果是字符串调用其length函数,集合类调用其size函数,数组调用其length属性,其他可遍历对象遍历计算长度
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.length($expr$) 

.isEmpty : ht>判断指定对象是否为空,支持
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.isEmpty($expr$) 

.notEqual : ht>比较两个对象是否不相等
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.notEqual($expr$, $arg$) 

.equal : ht>比较两个对象是否相等
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.equal($expr$, $arg$) 

.serialize : ht>序列化
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.serialize($expr$) 

.contains : ht>对象中是否包含元素
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.contains($expr$, $arg$) 

.defaultIfBlank : ht>如果给定对象为null或者""或者空白符返回默认值
	java.lang.CharSequence [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.defaultIfBlank($expr$, $arg$) 

.isNull : ht>检查对象是否为null
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.isNull($expr$) 

.equals : ht>比较两个对象是否相等,此方法是{@link#equal(Object,Object)}的别名方法
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.equals($expr$, $arg$) 

.clone : ht>克隆对象
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.clone($expr$) 

.toString : ht>将Object转为String
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.toString($expr$) 

.isNotEmpty : ht>判断指定对象是否为非空,支持
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  cn.hutool.core.util.ObjectUtil.isNotEmpty($expr$) 



######## cn.hutool.core.util.EnumUtil
.likeValueOf : ht>模糊匹配转换为枚举,给定一个值,匹配枚举中定义的所有字段名(包括name属性),一旦匹配到返回这个枚举对象,否则返回null
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.likeValueOf($expr$, $arg$) 

.isEnum : ht>指定类是否为Enum类
	java.lang.Object [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.isEnum($expr$) 
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.isEnum($expr$) 

.getNames : ht>枚举类中所有枚举对象的name列表
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.getNames($expr$) 

.getFieldValues : ht>获得枚举类中各枚举对象下指定字段的值
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.getFieldValues($expr$, $arg$) 

.getFieldBy : ht>通过某字段对应值获取枚举中另一字段值,获取不到时为null
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.getFieldBy($expr$, $arg$) 

.getNameFieldMap : ht>获得枚举名对应指定字段值的Map
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.getNameFieldMap($expr$, $arg$) 

.getFieldNames : ht>获得枚举类中所有的字段名
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.getFieldNames($expr$) 

.contains : ht>判断某个值是存在枚举中
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.contains($expr$, $arg$) 

.notContains : ht>判断某个值是不存在枚举中
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.notContains($expr$, $arg$) 

.getBy : ht>通过某字段对应值获取枚举,获取不到时为defaultEnum
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.getBy($expr$, $arg$) 
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.getBy($expr$, $arg$) 

.equals : ht>检查某个枚举值是否匹配指定值
	java.lang.Enum [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.equals($expr$, $arg$) 

.fromStringQuietly : ht>字符串转枚举,调用{@linkEnum#valueOf(Class,String)},转换失败返回null而非报错
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.fromStringQuietly($expr$, $arg$) 

.toString : ht>Enum对象转String,调用{@linkEnum#name()}方法
	java.lang.Enum [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.toString($expr$) 

.fromString : ht>字符串转枚举,调用{@linkEnum#valueOf(Class,String)}
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.fromString($expr$, $arg$) 

.equalsIgnoreCase : ht>忽略大小检查某个枚举值是否匹配指定值
	java.lang.Enum [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.equalsIgnoreCase($expr$, $arg$) 

.getEnumMap : ht>获取枚举字符串值和枚举对象的Map对应,使用LinkedHashMap保证有序
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.getEnumMap($expr$) 

.getEnumAt : ht>获取给定位置的枚举值
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  cn.hutool.core.util.EnumUtil.getEnumAt($expr$, $arg$) 



######## cn.hutool.core.util.ModifierUtil
.isStatic : ht>是否是static类
	java.lang.Class [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.isStatic($expr$) 
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.isStatic($expr$) 
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.isStatic($expr$) 

.hasModifier : ht>是否同时存在一个或多个修饰符(可能有多个修饰符,如果有指定的修饰符则返回true)
	java.lang.Class [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.hasModifier($expr$, $arg$) 
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.hasModifier($expr$, $arg$) 
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.hasModifier($expr$, $arg$) 
	java.lang.reflect.Constructor [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.hasModifier($expr$, $arg$) 

.isSynthetic : ht>是否是合成类(由java编译器生成的)
	java.lang.Class [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.isSynthetic($expr$) 
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.isSynthetic($expr$) 
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.isSynthetic($expr$) 

.isPublic : ht>是否是Public类
	java.lang.Class [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.isPublic($expr$) 
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.isPublic($expr$) 
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.isPublic($expr$) 
	java.lang.reflect.Constructor [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.isPublic($expr$) 

.removeFinalModify : ht>设置final的field字段可以被修改
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.removeFinalModify($expr$) 

.isAbstract : ht>是否抽象方法
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  cn.hutool.core.util.ModifierUtil.isAbstract($expr$) 



######## cn.hutool.core.collection.IterUtil
.hasNull : ht>是否包含null元素
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.hasNull($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.hasNull($expr$) 

.fieldValueMap : ht>字段值与列表值对应的Map,常用于元素对象中有唯一ID时需要按照这个ID查找对象的情况
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.fieldValueMap($expr$, $arg$) 

.toList : ht>Iterator转List
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.toList($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.toList($expr$) 

.getIter : ht>获取Iterator
	java.lang.Object [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.getIter($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.getIter($expr$) 

.firstMatch : ht>返回Iterator中第一个匹配规则的值
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.firstMatch($expr$, $arg$) 

.filtered : ht>获取一个新的FilterIter,用于过滤指定元素
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.filtered($expr$, $arg$) 

.toListMap : ht>将列表转成值为List的HashMap
	java.util.Map [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.toListMap($expr$, $arg$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.toListMap($expr$, $arg$) 

.getFirst : ht>获取集合的第一个元素,如果集合为空(null或者空集合),返回null
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.getFirst($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.getFirst($expr$) 

.filterToList : ht>过滤Iterator并将过滤后满足条件的元素添加到List中
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.filterToList($expr$, $arg$) 

.get : ht>遍历Iterator,获取指定index位置的元素
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.get($expr$, $arg$) 

.getFirstNoneNull : ht>获取集合的第一个非空元素
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.getFirstNoneNull($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.getFirstNoneNull($expr$) 

.join : ht>以conjunction为分隔符将集合转换为字符串
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.join($expr$, $arg$) 

.countMap : ht>根据集合返回一个元素计数的Map
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.countMap($expr$) 

.isEqualList : ht>判断两个Iterable是否元素和顺序相同,返回true的条件是
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.isEqualList($expr$, $arg$) 

.toStr : ht>拼接Iterator为字符串
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.toStr($expr$, $arg$) 

.getElementType : ht>获得Iterable对象的元素类型(通过第一个非空元素判断)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.getElementType($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.getElementType($expr$) 

.fieldValueAsMap : ht>两个字段值组成新的Map
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.fieldValueAsMap($expr$, $arg$) 

.asIterable : ht>Iterator转为Iterable
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.asIterable($expr$) 

.edit : ht>编辑,此方法产生一个新ArrayList
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.edit($expr$, $arg$) 

.forEach : ht>遍历Iterator
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.forEach($expr$, $arg$) 

.isEmpty : ht>Iterable是否为空
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.isEmpty($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.isEmpty($expr$) 

.clear : ht>清空指定Iterator,此方法遍历后调用{@linkIterator#remove()}移除每个元素
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.clear($expr$) 

.asIterator : ht>Enumeration转换为Iterator
	java.util.Enumeration [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.asIterator($expr$) 

.isAllNull : ht>是否全部元素为null
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.isAllNull($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.isAllNull($expr$) 

.filter : ht>过滤集合,此方法在原集合上直接修改
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.filter($expr$, $arg$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.filter($expr$, $arg$) 

.size : ht>返回Iterable对象的元素数量
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.size($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.size($expr$) 

.toMap : ht>将Entry集合转换为HashMap
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.toMap($expr$, $arg$) 
	java.util.Map [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.toMap($expr$, $arg$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.toMap($expr$, $arg$) 

.isNotEmpty : ht>Iterable是否为空
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.isNotEmpty($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.isNotEmpty($expr$) 

.fieldValueList : ht>获取指定Bean列表中某个字段,生成新的列表
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.fieldValueList($expr$, $arg$) 
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.fieldValueList($expr$, $arg$) 

.trans : ht>按照给定函数,转换Iterator为另一种类型的Iterator
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  cn.hutool.core.collection.IterUtil.trans($expr$, $arg$) 



######## cn.hutool.core.math.BitStatusUtil
.add : ht>增加状态
	INT [cn.hutool.core.math.BitStatusUtil]  →  cn.hutool.core.math.BitStatusUtil.add($expr$, $arg$) 

.has : ht>判断是否含有状态
	INT [cn.hutool.core.math.BitStatusUtil]  →  cn.hutool.core.math.BitStatusUtil.has($expr$, $arg$) 

.remove : ht>删除一个状态
	INT [cn.hutool.core.math.BitStatusUtil]  →  cn.hutool.core.math.BitStatusUtil.remove($expr$, $arg$) 



######## cn.hutool.core.math.MathUtil
.combinationSelect : ht>组合选择(从列表中选择n个组合)
	ARRAY [cn.hutool.core.math.MathUtil]  →  cn.hutool.core.math.MathUtil.combinationSelect($expr$, $arg$) 

.arrangementCount : ht>计算排列数,即A(n,m)=n!/(n-m)!
	INT [cn.hutool.core.math.MathUtil]  →  cn.hutool.core.math.MathUtil.arrangementCount($expr$, $arg$) 

.yuanToCent : ht>金额元转换为分
	DOUBLE [cn.hutool.core.math.MathUtil]  →  cn.hutool.core.math.MathUtil.yuanToCent($expr$) 

.combinationCount : ht>计算组合数,即C(n,m)=n!/((n-m)!*m!)
	INT [cn.hutool.core.math.MathUtil]  →  cn.hutool.core.math.MathUtil.combinationCount($expr$, $arg$) 

.centToYuan : ht>金额分转换为元
	LONG [cn.hutool.core.math.MathUtil]  →  cn.hutool.core.math.MathUtil.centToYuan($expr$) 

.arrangementSelect : ht>全排列选择(列表全部参与排列)
	ARRAY [cn.hutool.core.math.MathUtil]  →  cn.hutool.core.math.MathUtil.arrangementSelect($expr$, $arg$) 



######## cn.hutool.core.util.SystemPropsUtil
.getLong : ht>获得long类型值
	java.lang.String [cn.hutool.core.util.SystemPropsUtil]  →  cn.hutool.core.util.SystemPropsUtil.getLong($expr$, $arg$) 

.getInt : ht>获得int类型值
	java.lang.String [cn.hutool.core.util.SystemPropsUtil]  →  cn.hutool.core.util.SystemPropsUtil.getInt($expr$, $arg$) 

.set : ht>设置系统属性,value为null表示移除此属性
	java.lang.String [cn.hutool.core.util.SystemPropsUtil]  →  cn.hutool.core.util.SystemPropsUtil.set($expr$, $arg$) 

.get : ht>取得系统属性,如果因为Java安全的限制而失败,则将错误打在Log中,然后返回defaultValue
	java.lang.String [cn.hutool.core.util.SystemPropsUtil]  →  cn.hutool.core.util.SystemPropsUtil.get($expr$, $arg$) 

.getBoolean : ht>获得boolean类型值
	java.lang.String [cn.hutool.core.util.SystemPropsUtil]  →  cn.hutool.core.util.SystemPropsUtil.getBoolean($expr$, $arg$) 



######## cn.hutool.core.io.ManifestUtil
.getManifest : ht>获取jar包文件或项目目录下的Manifest
	java.util.jar.JarFile [cn.hutool.core.io.ManifestUtil]  →  cn.hutool.core.io.ManifestUtil.getManifest($expr$) 
	java.lang.Class [cn.hutool.core.io.ManifestUtil]  →  cn.hutool.core.io.ManifestUtil.getManifest($expr$) 
	java.net.JarURLConnection [cn.hutool.core.io.ManifestUtil]  →  cn.hutool.core.io.ManifestUtil.getManifest($expr$) 
	java.io.File [cn.hutool.core.io.ManifestUtil]  →  cn.hutool.core.io.ManifestUtil.getManifest($expr$) 



######## cn.hutool.core.util.PageUtil
.rainbow : ht>分页彩虹算法(默认展示10页)
	INT [cn.hutool.core.util.PageUtil]  →  cn.hutool.core.util.PageUtil.rainbow($expr$, $arg$) 

.getStart : ht>将页数和每页条目数转换为开始位置
	INT [cn.hutool.core.util.PageUtil]  →  cn.hutool.core.util.PageUtil.getStart($expr$, $arg$) 

.totalPage : ht>根据总数计算总页数
	INT [cn.hutool.core.util.PageUtil]  →  cn.hutool.core.util.PageUtil.totalPage($expr$, $arg$) 
	LONG [cn.hutool.core.util.PageUtil]  →  cn.hutool.core.util.PageUtil.totalPage($expr$, $arg$) 

.setFirstPageNo : ht>设置首页页码,可以为0或者1
	INT [cn.hutool.core.util.PageUtil]  →  cn.hutool.core.util.PageUtil.setFirstPageNo($expr$) 

.toSegment : ht>将页数和每页条目数转换为开始位置和结束位置
	INT [cn.hutool.core.util.PageUtil]  →  cn.hutool.core.util.PageUtil.toSegment($expr$, $arg$) 

.getEnd : ht>将页数和每页条目数转换为结束位置
	INT [cn.hutool.core.util.PageUtil]  →  cn.hutool.core.util.PageUtil.getEnd($expr$, $arg$) 

.transToStartEnd : ht>将页数和每页条目数转换为开始位置和结束位置
	INT [cn.hutool.core.util.PageUtil]  →  cn.hutool.core.util.PageUtil.transToStartEnd($expr$, $arg$) 



######## cn.hutool.core.annotation.AnnotationUtil
.scanMethod : ht>扫描方法,以及该方法所在类的Class层级结构中的具有相同方法签名的方法
	java.lang.reflect.Method [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.scanMethod($expr$) 

.getTargetType : ht>获取注解类可以用来修饰哪些程序元素,如TYPE,METHOD,CONSTRUCTOR,FIELD,PARAMETER等
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getTargetType($expr$) 

.hasAnnotation : ht>检查是否包含指定注解指定注解
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.hasAnnotation($expr$, $arg$) 

.aggregatingFromAnnotation : ht>对指定注解对象进行聚合
	ARRAY [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.aggregatingFromAnnotation($expr$) 

.scanMetaAnnotation : ht>扫描注解类,以及注解类的Class层级结构中的注解,将返回除了{@link#META_ANNOTATIONS}中指定的JDK默认注解外
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.scanMetaAnnotation($expr$) 

.isNotJdkMateAnnotation : ht>是否不为Jdk自带的元注解
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.isNotJdkMateAnnotation($expr$) 

.getAnnotationValue : ht>获取指定注解属性的值
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotationValue($expr$, $arg$) 

.aggregatingFromAnnotationWithMeta : ht>对指定注解对象及其元注解进行聚合
	ARRAY [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.aggregatingFromAnnotationWithMeta($expr$) 

.toCombination : ht>将指定的被注解的元素转换为组合注解元素
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.toCombination($expr$) 

.getAnnotationAlias : ht>获取别名支持后的注解
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotationAlias($expr$, $arg$) 

.getAnnotations : ht>获取指定注解
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotations($expr$, $arg$) 

.getAllSynthesizedAnnotations : ht>获取元素上所有指定注解
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAllSynthesizedAnnotations($expr$, $arg$) 

.isDocumented : ht>是否会保存到Javadoc文档中
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.isDocumented($expr$) 

.getSynthesizedAnnotation : ht>将指定注解实例与其元注解转为合成注解
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getSynthesizedAnnotation($expr$, $arg$) 
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getSynthesizedAnnotation($expr$, $arg$) 

.getAnnotation : ht>获取指定注解
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotation($expr$, $arg$) 

.getRetentionPolicy : ht>获取注解类的保留时间,可选值SOURCE(源码时),CLASS(编译时),RUNTIME(运行时),默认为CLASS
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getRetentionPolicy($expr$) 

.setValue : ht>设置新的注解的属性(字段)值
	java.lang.annotation.Annotation [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.setValue($expr$, $arg$) 

.isSynthesizedAnnotation : ht>该注解对象是否为通过代理类生成的合成注解
	java.lang.annotation.Annotation [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.isSynthesizedAnnotation($expr$) 

.isInherited : ht>是否可以被继承,默认为false
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.isInherited($expr$) 

.getCombinationAnnotations : ht>获取组合注解
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getCombinationAnnotations($expr$, $arg$) 

.scanClass : ht>扫描类以及类的Class层级结构中的注解,将返回除了{@link#META_ANNOTATIONS}中指定的JDK默认元注解外
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.scanClass($expr$) 

.getAnnotationValueMap : ht>获取指定注解中所有属性值
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.getAnnotationValueMap($expr$, $arg$) 

.isJdkMetaAnnotation : ht>是否为Jdk自带的元注解
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  cn.hutool.core.annotation.AnnotationUtil.isJdkMetaAnnotation($expr$) 



######## cn.hutool.core.date.TemporalUtil
.toTimeUnit : ht>转换ChronoUnit到TimeUnit
	java.time.temporal.ChronoUnit [cn.hutool.core.date.TemporalUtil]  →  cn.hutool.core.date.TemporalUtil.toTimeUnit($expr$) 

.toChronoUnit : ht>将TimeUnit转换为ChronoUnit
	java.util.concurrent.TimeUnit [cn.hutool.core.date.TemporalUtil]  →  cn.hutool.core.date.TemporalUtil.toChronoUnit($expr$) 

.offset : ht>日期偏移,根据field不同加不同值(偏移会修改传入的对象)
	java.time.temporal.Temporal [cn.hutool.core.date.TemporalUtil]  →  cn.hutool.core.date.TemporalUtil.offset($expr$, $arg$) 

.between : ht>获取两个日期的差,如果结束时间早于开始时间,获取结果为负
	java.time.temporal.Temporal [cn.hutool.core.date.TemporalUtil]  →  cn.hutool.core.date.TemporalUtil.between($expr$, $arg$) 



######## cn.hutool.core.io.file.FileNameUtil
.cleanInvalid : ht>清除文件名中的在Windows下不支持的非法字符,包括:\/:*?"&lt;&gt;|
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.cleanInvalid($expr$) 

.getSuffix : ht>获取文件后缀名,扩展名不带"."
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.getSuffix($expr$) 
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.getSuffix($expr$) 

.getPrefix : ht>返回主文件名
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.getPrefix($expr$) 
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.getPrefix($expr$) 

.getName : ht>返回文件名
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.getName($expr$) 
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.getName($expr$) 

.containsInvalid : ht>文件名中是否包含在Windows下不支持的非法字符,包括:\/:*?"&lt;&gt;|
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.containsInvalid($expr$) 

.mainName : ht>返回主文件名
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.mainName($expr$) 
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.mainName($expr$) 

.isType : ht>根据文件名检查文件类型,忽略大小写
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.isType($expr$, $arg$) 

.extName : ht>获取文件扩展名(后缀名),扩展名不带"."
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.extName($expr$) 
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  cn.hutool.core.io.file.FileNameUtil.extName($expr$) 



######## cn.hutool.core.collection.RingIndexUtil
.ringNextLong : ht>通过cas操作实现对指定值内的回环累加
	LONG [cn.hutool.core.collection.RingIndexUtil]  →  cn.hutool.core.collection.RingIndexUtil.ringNextLong($expr$, $arg$) 

.ringNextInt : ht>通过cas操作实现对指定值内的回环累加
	INT [cn.hutool.core.collection.RingIndexUtil]  →  cn.hutool.core.collection.RingIndexUtil.ringNextInt($expr$, $arg$) 

.ringNextIntByObj : ht>通过cas操作实现对指定值内的回环累加
	java.lang.Object [cn.hutool.core.collection.RingIndexUtil]  →  cn.hutool.core.collection.RingIndexUtil.ringNextIntByObj($expr$, $arg$) 



######## cn.hutool.core.util.ClassLoaderUtil
.getJarClassLoader : ht>创建新的JarClassLoader,并使用此Classloader加载目录下的class文件和jar文件
	java.io.File [cn.hutool.core.util.ClassLoaderUtil]  →  cn.hutool.core.util.ClassLoaderUtil.getJarClassLoader($expr$) 

.loadClass : ht>加载外部类
	java.lang.String [cn.hutool.core.util.ClassLoaderUtil]  →  cn.hutool.core.util.ClassLoaderUtil.loadClass($expr$, $arg$) 
	java.io.File [cn.hutool.core.util.ClassLoaderUtil]  →  cn.hutool.core.util.ClassLoaderUtil.loadClass($expr$, $arg$) 

.isPresent : ht>指定类是否被提供
	java.lang.String [cn.hutool.core.util.ClassLoaderUtil]  →  cn.hutool.core.util.ClassLoaderUtil.isPresent($expr$, $arg$) 

.loadPrimitiveClass : ht>加载原始类型的类。包括原始类型、原始类型数组和void
	java.lang.String [cn.hutool.core.util.ClassLoaderUtil]  →  cn.hutool.core.util.ClassLoaderUtil.loadPrimitiveClass($expr$) 



######## cn.hutool.core.comparator.CompareUtil
.compare : ht>null安全的对象比较
	java.lang.Object [cn.hutool.core.comparator.CompareUtil]  →  cn.hutool.core.comparator.CompareUtil.compare($expr$, $arg$) 
	java.lang.Comparable [cn.hutool.core.comparator.CompareUtil]  →  cn.hutool.core.comparator.CompareUtil.compare($expr$, $arg$) 

.comparingPinyin : ht>中文(拼音)比较器
	java.util.function.Function [cn.hutool.core.comparator.CompareUtil]  →  cn.hutool.core.comparator.CompareUtil.comparingPinyin($expr$, $arg$) 

.comparingIndexed : ht>索引比较器
	java.util.function.Function [cn.hutool.core.comparator.CompareUtil]  →  cn.hutool.core.comparator.CompareUtil.comparingIndexed($expr$, $arg$) 



######## cn.hutool.core.util.IdcardUtil
.getProvinceByIdCard : ht>根据身份编号获取户籍省份,只支持15或18位身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getProvinceByIdCard($expr$) 

.convert15To18 : ht>将15位身份证号码转换为18位
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.convert15To18($expr$) 

.getDayByIdCard : ht>根据身份编号获取生日天,只支持15或18位身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getDayByIdCard($expr$) 

.getCityCodeByIdCard : ht>根据身份编号获取地市级编码,只支持15或18位身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getCityCodeByIdCard($expr$) 

.getBirthByIdCard : ht>根据身份编号获取生日,只支持15或18位身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getBirthByIdCard($expr$) 

.isValidCard : ht>是否有效身份证号,忽略X的大小写
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.isValidCard($expr$) 

.getGenderByIdCard : ht>根据身份编号获取性别,只支持15或18位身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getGenderByIdCard($expr$) 

.getYearByIdCard : ht>根据身份编号获取生日年,只支持15或18位身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getYearByIdCard($expr$) 

.hide : ht>隐藏指定位置的几个身份证号数字为"*"
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.hide($expr$, $arg$) 

.isValidCard18 : ht>isValidCard18
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.isValidCard18($expr$, $arg$) 

.getProvinceCodeByIdCard : ht>根据身份编号获取户籍省份编码,只支持15或18位身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getProvinceCodeByIdCard($expr$) 

.getMonthByIdCard : ht>根据身份编号获取生日月,只支持15或18位身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getMonthByIdCard($expr$) 

.getIdcardInfo : ht>获取身份证信息,包括身份、城市代码、生日、性别等
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getIdcardInfo($expr$) 

.getAgeByIdCard : ht>根据身份编号获取年龄,只支持15或18位身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getAgeByIdCard($expr$, $arg$) 

.isValidTWCard : ht>验证台湾身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.isValidTWCard($expr$) 

.getBirthDate : ht>从身份证号码中获取生日日期,只支持15或18位身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getBirthDate($expr$) 

.isValidCard15 : ht>验证15位身份编码是否合法
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.isValidCard15($expr$) 

.getDistrictCodeByIdCard : ht>根据身份编号获取区县级编码,只支持15或18位身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getDistrictCodeByIdCard($expr$) 

.isValidHKCard : ht>验证香港身份证号码(存在Bug,部份特殊身份证无法检查)
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.isValidHKCard($expr$) 

.isValidCard10 : ht>验证10位身份编码是否合法
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.isValidCard10($expr$) 

.getBirth : ht>根据身份编号获取生日,只支持15或18位身份证号码
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.getBirth($expr$) 

.convert18To15 : ht>将18位身份证号码转换为15位
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  cn.hutool.core.util.IdcardUtil.convert18To15($expr$) 



######## cn.hutool.core.util.RadixUtil
.encode : ht>把一个整型数值转换成自己定义的进制
	java.lang.String [cn.hutool.core.util.RadixUtil]  →  cn.hutool.core.util.RadixUtil.encode($expr$, $arg$) 

.decodeToInt : ht>把转换后的进制字符还原成int值
	java.lang.String [cn.hutool.core.util.RadixUtil]  →  cn.hutool.core.util.RadixUtil.decodeToInt($expr$, $arg$) 

.decode : ht>把转换后进制的字符还原成long值
	java.lang.String [cn.hutool.core.util.RadixUtil]  →  cn.hutool.core.util.RadixUtil.decode($expr$, $arg$) 



######## cn.hutool.core.lang.func.LambdaUtil
.resolve : ht>解析lambda表达式,加了缓存
	cn.hutool.core.lang.func.Func0 [cn.hutool.core.lang.func.LambdaUtil]  →  cn.hutool.core.lang.func.LambdaUtil.resolve($expr$) 
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.lang.func.LambdaUtil]  →  cn.hutool.core.lang.func.LambdaUtil.resolve($expr$) 

.getMethodName : ht>获取lambda表达式函数(方法)名称
	cn.hutool.core.lang.func.Func0 [cn.hutool.core.lang.func.LambdaUtil]  →  cn.hutool.core.lang.func.LambdaUtil.getMethodName($expr$) 
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.lang.func.LambdaUtil]  →  cn.hutool.core.lang.func.LambdaUtil.getMethodName($expr$) 

.getRealClass : ht>通过对象的方法或类的静态方法引用,获取lambda实现类
	cn.hutool.core.lang.func.Func0 [cn.hutool.core.lang.func.LambdaUtil]  →  cn.hutool.core.lang.func.LambdaUtil.getRealClass($expr$) 
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.lang.func.LambdaUtil]  →  cn.hutool.core.lang.func.LambdaUtil.getRealClass($expr$) 

.getFieldName : ht>获取lambda表达式Getter或Setter函数(方法)对应的字段名称,规则如下
	cn.hutool.core.lang.func.Func0 [cn.hutool.core.lang.func.LambdaUtil]  →  cn.hutool.core.lang.func.LambdaUtil.getFieldName($expr$) 
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.lang.func.LambdaUtil]  →  cn.hutool.core.lang.func.LambdaUtil.getFieldName($expr$) 



######## hutool-cron-5.8.10.postfixTemplates ######## 
######## cn.hutool.cron.CronUtil
.schedule : ht>批量加入配置文件中的定时任务
	cn.hutool.setting.Setting [cn.hutool.cron.CronUtil]  →  cn.hutool.cron.CronUtil.schedule($expr$) 
	java.lang.String [cn.hutool.cron.CronUtil]  →  cn.hutool.cron.CronUtil.schedule($expr$, $arg$) 

.setCronSetting : ht>自定义定时任务配置文件
	cn.hutool.setting.Setting [cn.hutool.cron.CronUtil]  →  cn.hutool.cron.CronUtil.setCronSetting($expr$) 
	java.lang.String [cn.hutool.cron.CronUtil]  →  cn.hutool.cron.CronUtil.setCronSetting($expr$) 

.start : ht>开始
	BOOLEAN [cn.hutool.cron.CronUtil]  →  cn.hutool.cron.CronUtil.start($expr$) 

.updatePattern : ht>更新Task的执行时间规则
	java.lang.String [cn.hutool.cron.CronUtil]  →  cn.hutool.cron.CronUtil.updatePattern($expr$, $arg$) 

.setMatchSecond : ht>设置是否支持秒匹配
	BOOLEAN [cn.hutool.cron.CronUtil]  →  cn.hutool.cron.CronUtil.setMatchSecond($expr$) 

.remove : ht>移除任务
	java.lang.String [cn.hutool.cron.CronUtil]  →  cn.hutool.cron.CronUtil.remove($expr$) 



######## cn.hutool.cron.pattern.CronPatternUtil
.nextDateAfter : ht>列举指定日期之后(到开始日期对应年年底)内第一个匹配表达式的日期
	cn.hutool.cron.pattern.CronPattern [cn.hutool.cron.pattern.CronPatternUtil]  →  cn.hutool.cron.pattern.CronPatternUtil.nextDateAfter($expr$, $arg$) 

.matchedDates : ht>列举指定日期范围内所有匹配表达式的日期
	java.lang.String [cn.hutool.cron.pattern.CronPatternUtil]  →  cn.hutool.cron.pattern.CronPatternUtil.matchedDates($expr$, $arg$) 
	cn.hutool.cron.pattern.CronPattern [cn.hutool.cron.pattern.CronPatternUtil]  →  cn.hutool.cron.pattern.CronPatternUtil.matchedDates($expr$, $arg$) 



######## hutool-crypto-5.8.10.postfixTemplates ######## 
######## cn.hutool.crypto.OpensslKeyUtil
.getKeyPair : ht>转换PEMKeyPair为KeyPair
	org.bouncycastle.openssl.PEMKeyPair [cn.hutool.crypto.OpensslKeyUtil]  →  cn.hutool.crypto.OpensslKeyUtil.getKeyPair($expr$) 

.readPemKey : ht>从pem文件中读取公钥或私钥
	java.io.InputStream [cn.hutool.crypto.OpensslKeyUtil]  →  cn.hutool.crypto.OpensslKeyUtil.readPemKey($expr$, $arg$) 

.getPublicKey : ht>转换SubjectPublicKeyInfo为PublicKey
	org.bouncycastle.asn1.x509.SubjectPublicKeyInfo [cn.hutool.crypto.OpensslKeyUtil]  →  cn.hutool.crypto.OpensslKeyUtil.getPublicKey($expr$) 

.getPrivateKey : ht>转换PrivateKeyInfo为PrivateKey
	org.bouncycastle.asn1.pkcs.PrivateKeyInfo [cn.hutool.crypto.OpensslKeyUtil]  →  cn.hutool.crypto.OpensslKeyUtil.getPrivateKey($expr$) 

.decrypt : ht>解密PEMEncryptedKeyPair为PEMKeyPair
	org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo [cn.hutool.crypto.OpensslKeyUtil]  →  cn.hutool.crypto.OpensslKeyUtil.decrypt($expr$, $arg$) 
	org.bouncycastle.openssl.PEMEncryptedKeyPair [cn.hutool.crypto.OpensslKeyUtil]  →  cn.hutool.crypto.OpensslKeyUtil.decrypt($expr$, $arg$) 



######## cn.hutool.crypto.KeyUtil
.generatePBEKey : ht>生成PBESecretKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.generatePBEKey($expr$, $arg$) 

.getRSAPublicKey : ht>获得RSA公钥对象
	java.security.PrivateKey [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getRSAPublicKey($expr$) 
	java.math.BigInteger [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getRSAPublicKey($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getRSAPublicKey($expr$, $arg$) 

.getAlgorithmAfterWith : ht>获取用于密钥生成的算法
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getAlgorithmAfterWith($expr$) 

.readPKCS12KeyStore : ht>读取PKCS12KeyStore文件
	java.io.File [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.readPKCS12KeyStore($expr$, $arg$) 
	java.io.InputStream [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.readPKCS12KeyStore($expr$, $arg$) 

.readKeyStore : ht>读取KeyStore文件
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.readKeyStore($expr$, $arg$) 

.getKeyPair : ht>从KeyStore中获取私钥公钥
	java.security.KeyStore [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getKeyPair($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getKeyPair($expr$, $arg$) 

.getCertificate : ht>获得Certification
	java.security.KeyStore [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getCertificate($expr$, $arg$) 

.getKeyGenerator : ht>获取KeyGenerator
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getKeyGenerator($expr$) 

.getCertificateFactory : ht>获取CertificateFactory
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getCertificateFactory($expr$) 

.generateRSAPublicKey : ht>生成RSA公钥,仅用于非对称加密
	ARRAY [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.generateRSAPublicKey($expr$) 

.readJKSKeyStore : ht>读取密钥库(JavaKeyStore,JKS)KeyStore文件
	java.io.File [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.readJKSKeyStore($expr$, $arg$) 
	java.io.InputStream [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.readJKSKeyStore($expr$, $arg$) 

.generatePublicKey : ht>生成公钥,仅用于非对称加密
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.generatePublicKey($expr$, $arg$) 

.toBase64 : ht>将密钥编码为Base64格式
	java.security.Key [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.toBase64($expr$) 

.getKeyFactory : ht>获取KeyFactory
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getKeyFactory($expr$) 

.generateRSAPrivateKey : ht>生成RSA私钥,仅用于非对称加密
	ARRAY [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.generateRSAPrivateKey($expr$) 

.generatePrivateKey : ht>生成私钥,仅用于非对称加密
	java.security.KeyStore [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.generatePrivateKey($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.generatePrivateKey($expr$, $arg$) 

.readCertificate : ht>读取Certification文件
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.readCertificate($expr$, $arg$) 

.getSecretKeyFactory : ht>获取SecretKeyFactory
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getSecretKeyFactory($expr$) 

.encodeECPublicKey : ht>编码压缩EC公钥(基于BouncyCastle)
	java.security.PublicKey [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.encodeECPublicKey($expr$) 

.generateKeyPair : ht>生成用于非对称加密的公钥和私钥
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.generateKeyPair($expr$, $arg$) 

.generateKey : ht>生成SecretKey,仅用于对称加密和摘要算法
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.generateKey($expr$, $arg$) 

.getKeyPairGenerator : ht>获取KeyPairGenerator
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getKeyPairGenerator($expr$) 

.getMainAlgorithm : ht>获取主体算法名,例如RSA/ECB/PKCS1Padding的主体算法是RSA
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.getMainAlgorithm($expr$) 

.generateDESKey : ht>生成SecretKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.generateDESKey($expr$, $arg$) 

.readPublicKeyFromCert : ht>读取X.509Certification文件中的公钥
	java.io.InputStream [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.readPublicKeyFromCert($expr$) 

.decodeECPoint : ht>解码恢复EC压缩公钥,支持Base64和Hex编码,(基于BouncyCastle)
	ARRAY [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.decodeECPoint($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.decodeECPoint($expr$, $arg$) 

.readX509Certificate : ht>读取X.509Certification文件
	java.io.InputStream [cn.hutool.crypto.KeyUtil]  →  cn.hutool.crypto.KeyUtil.readX509Certificate($expr$, $arg$) 



######## cn.hutool.crypto.SignUtil
.signParamsSha1 : ht>对参数做Sha1签名
	java.util.Map [cn.hutool.crypto.SignUtil]  →  cn.hutool.crypto.SignUtil.signParamsSha1($expr$, $arg$) 

.signParams : ht>对参数做签名
	cn.hutool.crypto.digest.DigestAlgorithm [cn.hutool.crypto.SignUtil]  →  cn.hutool.crypto.SignUtil.signParams($expr$, $arg$) 
	cn.hutool.crypto.symmetric.SymmetricCrypto [cn.hutool.crypto.SignUtil]  →  cn.hutool.crypto.SignUtil.signParams($expr$, $arg$) 

.sign : ht>创建Sign算法对象
	cn.hutool.crypto.asymmetric.SignAlgorithm [cn.hutool.crypto.SignUtil]  →  cn.hutool.crypto.SignUtil.sign($expr$, $arg$) 

.signParamsMd5 : ht>对参数做md5签名
	java.util.Map [cn.hutool.crypto.SignUtil]  →  cn.hutool.crypto.SignUtil.signParamsMd5($expr$, $arg$) 

.signParamsSha256 : ht>对参数做Sha256签名
	java.util.Map [cn.hutool.crypto.SignUtil]  →  cn.hutool.crypto.SignUtil.signParamsSha256($expr$, $arg$) 



######## cn.hutool.crypto.SecureUtil
.rsa : ht>创建RSA算法对象
	ARRAY [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.rsa($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.rsa($expr$, $arg$) 

.generatePBEKey : ht>生成PBESecretKey
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.generatePBEKey($expr$, $arg$) 

.sha256 : ht>SHA256加密文件,生成16进制SHA256字符串
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.sha256($expr$) 
	java.io.File [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.sha256($expr$) 
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.sha256($expr$) 

.zuc256 : ht>祖冲之算法集(ZUC-256算法)实现,基于BouncyCastle实现
	ARRAY [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.zuc256($expr$, $arg$) 

.signParams : ht>对参数做签名
	cn.hutool.crypto.digest.DigestAlgorithm [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.signParams($expr$, $arg$) 
	cn.hutool.crypto.symmetric.SymmetricCrypto [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.signParams($expr$, $arg$) 

.createCipher : ht>创建Cipher
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.createCipher($expr$) 

.sign : ht>创建Sign算法对象
	cn.hutool.crypto.asymmetric.SignAlgorithm [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.sign($expr$, $arg$) 

.getAlgorithmAfterWith : ht>获取用于密钥生成的算法
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.getAlgorithmAfterWith($expr$) 

.decode : ht>解码字符串密钥,可支持的编码如下
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.decode($expr$) 

.readKeyStore : ht>读取KeyStore文件
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.readKeyStore($expr$, $arg$) 

.aes : ht>AES加密
	ARRAY [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.aes($expr$) 

.des : ht>DES加密
	ARRAY [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.des($expr$) 

.getCertificate : ht>获得Certification
	java.security.KeyStore [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.getCertificate($expr$, $arg$) 

.hmac : ht>创建HMac对象,调用digest方法可获得hmac值
	cn.hutool.crypto.digest.HmacAlgorithm [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.hmac($expr$, $arg$) 

.createMac : ht>创建Mac
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.createMac($expr$) 

.signParamsMd5 : ht>对参数做md5签名
	java.util.Map [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.signParamsMd5($expr$, $arg$) 

.hmacMd5 : ht>HmacMD5加密器
	ARRAY [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.hmacMd5($expr$) 
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.hmacMd5($expr$) 

.fpe : ht>FPE(FormatPreservingEncryption)实现,支持FF1和FF3-1模式
	cn.hutool.crypto.symmetric.fpe.FPE.FPEMode [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.fpe($expr$, $arg$) 

.signParamsSha256 : ht>对参数做Sha256签名
	java.util.Map [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.signParamsSha256($expr$, $arg$) 

.generateSignature : ht>生成签名对象,仅用于非对称加密
	cn.hutool.crypto.asymmetric.AsymmetricAlgorithm [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.generateSignature($expr$, $arg$) 

.readJKSKeyStore : ht>读取密钥库(JavaKeyStore,JKS)KeyStore文件
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.readJKSKeyStore($expr$, $arg$) 

.generatePublicKey : ht>生成公钥,仅用于非对称加密
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.generatePublicKey($expr$, $arg$) 

.zuc128 : ht>祖冲之算法集(ZUC-128算法)实现,基于BouncyCastle实现
	ARRAY [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.zuc128($expr$, $arg$) 

.rc4 : ht>RC4算法
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.rc4($expr$) 

.pbkdf2 : ht>PBKDF2加密密码
	ARRAY [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.pbkdf2($expr$, $arg$) 

.addProvider : ht>增加加密解密的算法提供者,默认优先使用,例如
	java.security.Provider [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.addProvider($expr$) 

.generatePrivateKey : ht>生成私钥,仅用于非对称加密
	java.security.KeyStore [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.generatePrivateKey($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.generatePrivateKey($expr$, $arg$) 

.createMessageDigest : ht>创建MessageDigest
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.createMessageDigest($expr$) 

.readCertificate : ht>读取Certification文件
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.readCertificate($expr$, $arg$) 

.generateAlgorithm : ht>生成算法,格式为XXXwithXXX
	cn.hutool.crypto.asymmetric.AsymmetricAlgorithm [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.generateAlgorithm($expr$, $arg$) 

.hmacSha1 : ht>HmacSHA1加密器
	ARRAY [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.hmacSha1($expr$) 
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.hmacSha1($expr$) 

.generateKeyPair : ht>生成用于非对称加密的公钥和私钥
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.generateKeyPair($expr$, $arg$) 

.sha1 : ht>SHA1加密文件,生成16进制SHA1字符串
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.sha1($expr$) 
	java.io.File [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.sha1($expr$) 
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.sha1($expr$) 

.generateKey : ht>生成SecretKey,仅用于对称加密和摘要算法
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.generateKey($expr$, $arg$) 

.hmacSha256 : ht>HmacSHA256加密器
	ARRAY [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.hmacSha256($expr$) 
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.hmacSha256($expr$) 

.signParamsSha1 : ht>对参数做Sha1签名
	java.util.Map [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.signParamsSha1($expr$, $arg$) 

.createSignature : ht>创建Signature
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.createSignature($expr$) 

.generateDESKey : ht>生成SecretKey
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.generateDESKey($expr$, $arg$) 

.desede : ht>DESede加密(又名3DES、TripleDES)
	ARRAY [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.desede($expr$) 

.readX509Certificate : ht>读取X.509Certification文件
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.readX509Certificate($expr$, $arg$) 

.md5 : ht>MD5加密文件,生成16进制MD5字符串
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.md5($expr$) 
	java.io.File [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.md5($expr$) 
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  cn.hutool.crypto.SecureUtil.md5($expr$) 



######## cn.hutool.crypto.PemUtil
.readPemPrivateKey : ht>读取PEM格式的私钥,支持PKCS#8和PKCS#1的ECC格式
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  cn.hutool.crypto.PemUtil.readPemPrivateKey($expr$) 

.readPemPublicKey : ht>读取PEM格式的公钥
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  cn.hutool.crypto.PemUtil.readPemPublicKey($expr$) 

.writePemObject : ht>写出pem密钥(私钥、公钥、证书)
	org.bouncycastle.util.io.pem.PemObjectGenerator [cn.hutool.crypto.PemUtil]  →  cn.hutool.crypto.PemUtil.writePemObject($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.PemUtil]  →  cn.hutool.crypto.PemUtil.writePemObject($expr$, $arg$) 

.readPemKey : ht>从pem文件中读取公钥或私钥
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  cn.hutool.crypto.PemUtil.readPemKey($expr$) 

.readPem : ht>从pem流中读取公钥或私钥
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  cn.hutool.crypto.PemUtil.readPem($expr$) 

.toPem : ht>将私钥或公钥转换为PEM格式的字符串
	java.lang.String [cn.hutool.crypto.PemUtil]  →  cn.hutool.crypto.PemUtil.toPem($expr$, $arg$) 

.readPemObject : ht>读取pem文件中的信息,包括类型、头信息和密钥内容
	java.io.Reader [cn.hutool.crypto.PemUtil]  →  cn.hutool.crypto.PemUtil.readPemObject($expr$) 
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  cn.hutool.crypto.PemUtil.readPemObject($expr$) 



######## cn.hutool.crypto.digest.DigestUtil
.sha256 : ht>计算SHA-256摘要值
	ARRAY [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha256($expr$) 
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha256($expr$, $arg$) 
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha256($expr$) 
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha256($expr$) 

.sha1Hex : ht>计算SHA-1摘要值,并转为16进制字符串
	ARRAY [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha1Hex($expr$) 
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha1Hex($expr$, $arg$) 
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha1Hex($expr$) 
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha1Hex($expr$) 

.md5Hex16 : ht>计算16位MD5摘要值,并转为16进制字符串
	ARRAY [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5Hex16($expr$) 
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5Hex16($expr$, $arg$) 
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5Hex16($expr$) 
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5Hex16($expr$) 

.md5HexTo16 : ht>32位MD5转16位MD5
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5HexTo16($expr$) 

.md5Hex : ht>计算32位MD5摘要值,并转为16进制字符串
	ARRAY [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5Hex($expr$) 
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5Hex($expr$, $arg$) 
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5Hex($expr$) 
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5Hex($expr$) 

.sha512 : ht>计算SHA-512摘要值
	ARRAY [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha512($expr$) 
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha512($expr$, $arg$) 
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha512($expr$) 
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha512($expr$) 

.bcrypt : ht>生成Bcrypt加密后的密文
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.bcrypt($expr$) 

.sha1 : ht>计算SHA-1摘要值
	ARRAY [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha1($expr$) 
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha1($expr$, $arg$) 
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha1($expr$) 
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha1($expr$) 

.hmac : ht>创建HMac对象,调用digest方法可获得hmac值
	cn.hutool.crypto.digest.HmacAlgorithm [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.hmac($expr$, $arg$) 

.bcryptCheck : ht>验证密码是否与Bcrypt加密后的密文匹配
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.bcryptCheck($expr$, $arg$) 

.digester : ht>新建摘要器
	cn.hutool.crypto.digest.DigestAlgorithm [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.digester($expr$) 
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.digester($expr$) 

.sha512Hex : ht>计算SHA-1摘要值,并转为16进制字符串
	ARRAY [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha512Hex($expr$) 
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha512Hex($expr$, $arg$) 
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha512Hex($expr$) 
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha512Hex($expr$) 

.sha256Hex : ht>计算SHA-1摘要值,并转为16进制字符串
	ARRAY [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha256Hex($expr$) 
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha256Hex($expr$, $arg$) 
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha256Hex($expr$) 
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.sha256Hex($expr$) 

.md5 : ht>计算32位MD5摘要值
	ARRAY [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5($expr$) 
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5($expr$, $arg$) 
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5($expr$) 
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  cn.hutool.crypto.digest.DigestUtil.md5($expr$) 



######## cn.hutool.crypto.ECKeyUtil
.createOpenSSHPrivateKeySpec : ht>创建OpenSSHPrivateKeySpec
	ARRAY [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.createOpenSSHPrivateKeySpec($expr$) 

.toPublicParams : ht>转换为ECPublicKeyParameters
	org.bouncycastle.math.ec.ECPoint [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toPublicParams($expr$, $arg$) 
	ARRAY [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toPublicParams($expr$, $arg$) 
	java.security.PublicKey [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toPublicParams($expr$) 
	java.math.BigInteger [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toPublicParams($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toPublicParams($expr$, $arg$) 

.decodePrivateKeyParams : ht>尝试解析转换各种类型私钥为ECPrivateKeyParameters,支持包括
	ARRAY [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.decodePrivateKeyParams($expr$) 

.createOpenSSHPublicKeySpec : ht>创建OpenSSHPublicKeySpec
	ARRAY [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.createOpenSSHPublicKeySpec($expr$) 

.getPublicParams : ht>根据私钥参数获取公钥参数
	org.bouncycastle.crypto.params.ECPrivateKeyParameters [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.getPublicParams($expr$) 

.toSm2PrivateKey : ht>将SM2算法的ECPrivateKey转换为PrivateKey
	org.bouncycastle.asn1.sec.ECPrivateKey [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toSm2PrivateKey($expr$) 

.toSm2PublicParams : ht>转换为ECPublicKeyParameters
	ARRAY [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toSm2PublicParams($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toSm2PublicParams($expr$, $arg$) 

.toSm2PrivateParams : ht>转换为ECPrivateKeyParameters
	ARRAY [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toSm2PrivateParams($expr$) 
	java.math.BigInteger [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toSm2PrivateParams($expr$) 
	java.lang.String [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toSm2PrivateParams($expr$) 

.toPrivateParams : ht>转换为ECPrivateKeyParameters
	ARRAY [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toPrivateParams($expr$, $arg$) 
	java.security.PrivateKey [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toPrivateParams($expr$) 
	java.math.BigInteger [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toPrivateParams($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toPrivateParams($expr$, $arg$) 

.decodePublicKeyParams : ht>尝试解析转换各种类型公钥为ECPublicKeyParameters,支持包括
	ARRAY [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.decodePublicKeyParams($expr$) 

.toParams : ht>密钥转换为AsymmetricKeyParameter
	java.security.Key [cn.hutool.crypto.ECKeyUtil]  →  cn.hutool.crypto.ECKeyUtil.toParams($expr$) 



######## cn.hutool.crypto.SmUtil
.changeC1C3C2ToC1C2C3 : ht>bc加解密使用旧标c1||c3||c2,此方法在解密前调用,将密文转化为c1||c2||c3再去解密
	ARRAY [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.changeC1C3C2ToC1C2C3($expr$, $arg$) 

.changeC1C2C3ToC1C3C2 : ht>bc加解密使用旧标c1||c2||c3,此方法在加密后调用,将结果转化为c1||c3||c2
	ARRAY [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.changeC1C2C3ToC1C3C2($expr$, $arg$) 

.sm3 : ht>SM3加密文件,生成16进制SM3字符串
	java.lang.String [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.sm3($expr$) 
	java.io.File [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.sm3($expr$) 
	java.io.InputStream [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.sm3($expr$) 

.sm2 : ht>创建SM2算法对象
	ARRAY [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.sm2($expr$, $arg$) 
	java.security.PrivateKey [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.sm2($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.sm2($expr$, $arg$) 
	org.bouncycastle.crypto.params.ECPrivateKeyParameters [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.sm2($expr$, $arg$) 

.rsPlainToAsn1 : ht>BC的SM3withSM2验签需要的rs是asn1格式的,这个方法将直接拼接r||s的字节数组转化成asn1格式
	ARRAY [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.rsPlainToAsn1($expr$) 

.sm4 : ht>SM4加密
	ARRAY [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.sm4($expr$) 

.rsAsn1ToPlain : ht>BC的SM3withSM2签名得到的结果的rs是asn1格式的,这个方法转化成直接拼接r||s
	ARRAY [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.rsAsn1ToPlain($expr$) 

.sm3WithSalt : ht>SM3加密,可以传入盐
	ARRAY [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.sm3WithSalt($expr$) 

.hmacSm3 : ht>HmacSM3算法实现
	ARRAY [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.hmacSm3($expr$) 

.createHmacSm3Engine : ht>创建HmacSM3算法的MacEngine
	ARRAY [cn.hutool.crypto.SmUtil]  →  cn.hutool.crypto.SmUtil.createHmacSm3Engine($expr$) 



######## cn.hutool.crypto.ASN1Util
.getDumpStr : ht>获取ASN1格式的导出格式,一般用于调试
	java.io.InputStream [cn.hutool.crypto.ASN1Util]  →  cn.hutool.crypto.ASN1Util.getDumpStr($expr$) 

.encode : ht>编码为指定ASN1格式
	java.lang.String [cn.hutool.crypto.ASN1Util]  →  cn.hutool.crypto.ASN1Util.encode($expr$, $arg$) 

.decode : ht>读取ASN.1数据流为ASN1Object
	java.io.InputStream [cn.hutool.crypto.ASN1Util]  →  cn.hutool.crypto.ASN1Util.decode($expr$) 

.encodeTo : ht>编码为指定ASN1格式
	java.lang.String [cn.hutool.crypto.ASN1Util]  →  cn.hutool.crypto.ASN1Util.encodeTo($expr$, $arg$) 

.encodeDer : ht>编码为DER格式
	ARRAY [cn.hutool.crypto.ASN1Util]  →  cn.hutool.crypto.ASN1Util.encodeDer($expr$) 



######## cn.hutool.crypto.BCUtil
.toDomainParams : ht>构建ECDomainParameters对象
	org.bouncycastle.asn1.x9.X9ECParameters [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toDomainParams($expr$) 
	org.bouncycastle.jce.spec.ECParameterSpec [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toDomainParams($expr$) 
	java.lang.String [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toDomainParams($expr$) 

.readPemPrivateKey : ht>读取PEM格式的私钥
	java.io.InputStream [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.readPemPrivateKey($expr$) 

.toSm2Params : ht>转换为ECPrivateKeyParameters
	ARRAY [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toSm2Params($expr$, $arg$) 
	java.math.BigInteger [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toSm2Params($expr$) 
	java.lang.String [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toSm2Params($expr$, $arg$) 

.readPemPublicKey : ht>读取PEM格式的公钥
	java.io.InputStream [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.readPemPublicKey($expr$) 

.encodeECPrivateKey : ht>只获取私钥里的d,32字节
	java.security.PrivateKey [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.encodeECPrivateKey($expr$) 

.toParams : ht>转换为ECPrivateKeyParameters
	java.security.Key [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toParams($expr$) 
	ARRAY [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toParams($expr$, $arg$) 
	java.security.PrivateKey [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toParams($expr$) 
	java.security.PublicKey [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toParams($expr$) 
	java.math.BigInteger [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toParams($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toParams($expr$, $arg$) 

.encodeECPublicKey : ht>编码压缩EC公钥(基于BouncyCastle),即Q值
	java.security.PublicKey [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.encodeECPublicKey($expr$, $arg$) 

.decodeECPoint : ht>解码恢复EC压缩公钥,支持Base64和Hex编码,(基于BouncyCastle)
	ARRAY [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.decodeECPoint($expr$, $arg$) 
	java.lang.String [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.decodeECPoint($expr$, $arg$) 

.toPkcs1 : ht>Java中的PKCS#8格式私钥转换为OpenSSL支持的PKCS#1格式
	java.security.PrivateKey [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toPkcs1($expr$) 
	java.security.PublicKey [cn.hutool.crypto.BCUtil]  →  cn.hutool.crypto.BCUtil.toPkcs1($expr$) 



######## hutool-db-5.8.10.postfixTemplates ######## 
######## cn.hutool.db.StatementUtil
.getGeneratedKeyOfLong : ht>获得自增键的值
	java.sql.Statement [cn.hutool.db.StatementUtil]  →  cn.hutool.db.StatementUtil.getGeneratedKeyOfLong($expr$) 

.getTypeOfNull : ht>获取null字段对应位置的数据类型
	java.sql.PreparedStatement [cn.hutool.db.StatementUtil]  →  cn.hutool.db.StatementUtil.getTypeOfNull($expr$, $arg$) 

.getGeneratedKeys : ht>获取主键,并使用RsHandler处理后返回
	java.sql.Statement [cn.hutool.db.StatementUtil]  →  cn.hutool.db.StatementUtil.getGeneratedKeys($expr$, $arg$) 

.prepareStatementForBatch : ht>创建批量操作的PreparedStatement
	java.sql.Connection [cn.hutool.db.StatementUtil]  →  cn.hutool.db.StatementUtil.prepareStatementForBatch($expr$, $arg$) 

.setParam : ht>为PreparedStatement设置单个参数
	java.sql.PreparedStatement [cn.hutool.db.StatementUtil]  →  cn.hutool.db.StatementUtil.setParam($expr$, $arg$) 

.prepareStatement : ht>创建PreparedStatement
	java.sql.Connection [cn.hutool.db.StatementUtil]  →  cn.hutool.db.StatementUtil.prepareStatement($expr$, $arg$) 

.fillParams : ht>填充SQL的参数
	java.sql.PreparedStatement [cn.hutool.db.StatementUtil]  →  cn.hutool.db.StatementUtil.fillParams($expr$, $arg$) 

.prepareCall : ht>创建CallableStatement
	java.sql.Connection [cn.hutool.db.StatementUtil]  →  cn.hutool.db.StatementUtil.prepareCall($expr$, $arg$) 



######## cn.hutool.db.DbUtil
.setDbSettingPathGlobal : ht>自定义数据库配置文件路径(绝对路径或相对classpath路径)
	java.lang.String [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.setDbSettingPathGlobal($expr$) 

.newSession : ht>新建数据库会话
	javax.sql.DataSource [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.newSession($expr$) 

.use : ht>实例化一个新的Db对象
	javax.sql.DataSource [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.use($expr$, $arg$) 

.setReturnGeneratedKeyGlobal : ht>设置全局是否INSERT语句中默认返回主键(默认返回主键)
	BOOLEAN [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.setReturnGeneratedKeyGlobal($expr$) 

.newSqlConnRunner : ht>实例化一个新的SQL运行对象
	java.sql.Connection [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.newSqlConnRunner($expr$) 
	javax.sql.DataSource [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.newSqlConnRunner($expr$) 
	cn.hutool.db.dialect.Dialect [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.newSqlConnRunner($expr$) 

.getJndiDs : ht>获得JNDI数据源
	java.lang.String [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.getJndiDs($expr$) 

.setShowSqlGlobal : ht>设置全局配置:是否通过debug日志显示SQL
	cn.hutool.setting.Setting [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.setShowSqlGlobal($expr$) 
	BOOLEAN [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.setShowSqlGlobal($expr$, $arg$) 

.getJndiDsWithLog : ht>获得JNDI数据源
	java.lang.String [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.getJndiDsWithLog($expr$) 

.close : ht>连续关闭一系列的SQL相关对象
	ARRAY [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.close($expr$) 

.setCaseInsensitiveGlobal : ht>设置全局是否在结果中忽略大小写
	BOOLEAN [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.setCaseInsensitiveGlobal($expr$) 

.removeShowSqlParams : ht>移除配置文件中的ShowSQL相关配置项
	cn.hutool.setting.Setting [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.removeShowSqlParams($expr$) 

.getDs : ht>获取指定分组的数据源
	java.lang.String [cn.hutool.db.DbUtil]  →  cn.hutool.db.DbUtil.getDs($expr$) 



######## cn.hutool.db.sql.SqlUtil
.buildConditions : ht>通过实体对象构建条件对象
	cn.hutool.db.Entity [cn.hutool.db.sql.SqlUtil]  →  cn.hutool.db.sql.SqlUtil.buildConditions($expr$) 

.toSqlTimestamp : ht>转换为{@linkjava.sql.Timestamp}
	java.util.Date [cn.hutool.db.sql.SqlUtil]  →  cn.hutool.db.sql.SqlUtil.toSqlTimestamp($expr$) 

.buildLikeValue : ht>创建LIKE语句中的值,创建的结果为
	java.lang.String [cn.hutool.db.sql.SqlUtil]  →  cn.hutool.db.sql.SqlUtil.buildLikeValue($expr$, $arg$) 

.buildEqualsWhere : ht>构件相等条件的where语句
	cn.hutool.db.Entity [cn.hutool.db.sql.SqlUtil]  →  cn.hutool.db.sql.SqlUtil.buildEqualsWhere($expr$, $arg$) 

.blobToStr : ht>Blob字段值转字符串
	java.sql.Blob [cn.hutool.db.sql.SqlUtil]  →  cn.hutool.db.sql.SqlUtil.blobToStr($expr$, $arg$) 

.rowIdToString : ht>将RowId转为字符串
	java.sql.RowId [cn.hutool.db.sql.SqlUtil]  →  cn.hutool.db.sql.SqlUtil.rowIdToString($expr$) 

.formatSql : ht>格式化SQL
	java.lang.String [cn.hutool.db.sql.SqlUtil]  →  cn.hutool.db.sql.SqlUtil.formatSql($expr$) 

.createBlob : ht>创建Blob对象
	java.sql.Connection [cn.hutool.db.sql.SqlUtil]  →  cn.hutool.db.sql.SqlUtil.createBlob($expr$, $arg$) 

.clobToStr : ht>Clob字段值转字符串
	java.sql.Clob [cn.hutool.db.sql.SqlUtil]  →  cn.hutool.db.sql.SqlUtil.clobToStr($expr$) 

.toSqlDate : ht>转换为{@linkjava.sql.Date}
	java.util.Date [cn.hutool.db.sql.SqlUtil]  →  cn.hutool.db.sql.SqlUtil.toSqlDate($expr$) 



######## cn.hutool.db.dialect.DriverUtil
.identifyDriver : ht>通过JDBCURL等信息识别JDBC驱动名
	java.sql.Connection [cn.hutool.db.dialect.DriverUtil]  →  cn.hutool.db.dialect.DriverUtil.identifyDriver($expr$) 
	javax.sql.DataSource [cn.hutool.db.dialect.DriverUtil]  →  cn.hutool.db.dialect.DriverUtil.identifyDriver($expr$) 
	java.lang.String [cn.hutool.db.dialect.DriverUtil]  →  cn.hutool.db.dialect.DriverUtil.identifyDriver($expr$) 



######## cn.hutool.db.meta.MetaUtil
.getColumnNames : ht>获得结果集的所有列名
	java.sql.ResultSet [cn.hutool.db.meta.MetaUtil]  →  cn.hutool.db.meta.MetaUtil.getColumnNames($expr$) 
	javax.sql.DataSource [cn.hutool.db.meta.MetaUtil]  →  cn.hutool.db.meta.MetaUtil.getColumnNames($expr$, $arg$) 

.getTables : ht>获得所有表名
	javax.sql.DataSource [cn.hutool.db.meta.MetaUtil]  →  cn.hutool.db.meta.MetaUtil.getTables($expr$, $arg$) 

.getTableMeta : ht>获得表的元信息
	javax.sql.DataSource [cn.hutool.db.meta.MetaUtil]  →  cn.hutool.db.meta.MetaUtil.getTableMeta($expr$, $arg$) 

.getSchema : ht>获取schema,获取失败返回null
	java.sql.Connection [cn.hutool.db.meta.MetaUtil]  →  cn.hutool.db.meta.MetaUtil.getSchema($expr$) 

.getCatalog : ht>获取catalog,获取失败返回null
	java.sql.Connection [cn.hutool.db.meta.MetaUtil]  →  cn.hutool.db.meta.MetaUtil.getCatalog($expr$) 

.createLimitedEntity : ht>创建带有字段限制的Entity对象
	javax.sql.DataSource [cn.hutool.db.meta.MetaUtil]  →  cn.hutool.db.meta.MetaUtil.createLimitedEntity($expr$, $arg$) 



######## hutool-dfa-5.8.10.postfixTemplates ######## 
######## cn.hutool.dfa.SensitiveUtil
.sensitiveFilter : ht>敏感词过滤
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  cn.hutool.dfa.SensitiveUtil.sensitiveFilter($expr$, $arg$) 
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  cn.hutool.dfa.SensitiveUtil.sensitiveFilter($expr$, $arg$) 

.init : ht>初始化敏感词树
	java.util.Collection [cn.hutool.dfa.SensitiveUtil]  →  cn.hutool.dfa.SensitiveUtil.init($expr$, $arg$) 
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  cn.hutool.dfa.SensitiveUtil.init($expr$, $arg$) 

.getFoundAllSensitive : ht>查找敏感词,返回找到的所有敏感词
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  cn.hutool.dfa.SensitiveUtil.getFoundAllSensitive($expr$, $arg$) 
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  cn.hutool.dfa.SensitiveUtil.getFoundAllSensitive($expr$, $arg$) 

.getFoundFirstSensitive : ht>查找敏感词,返回找到的第一个敏感词
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  cn.hutool.dfa.SensitiveUtil.getFoundFirstSensitive($expr$) 
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  cn.hutool.dfa.SensitiveUtil.getFoundFirstSensitive($expr$) 

.containsSensitive : ht>是否包含敏感词
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  cn.hutool.dfa.SensitiveUtil.containsSensitive($expr$) 
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  cn.hutool.dfa.SensitiveUtil.containsSensitive($expr$) 

.setCharFilter : ht>设置字符过滤规则,通过定义字符串过滤规则,过滤不需要的字符
	cn.hutool.core.lang.Filter [cn.hutool.dfa.SensitiveUtil]  →  cn.hutool.dfa.SensitiveUtil.setCharFilter($expr$) 



######## hutool-extra-5.8.10.postfixTemplates ######## 
######## cn.hutool.extra.expression.ExpressionUtil
.eval : ht>执行表达式
	java.lang.String [cn.hutool.extra.expression.ExpressionUtil]  →  cn.hutool.extra.expression.ExpressionUtil.eval($expr$, $arg$) 



######## cn.hutool.extra.emoji.EmojiUtil
.toUnicode : ht>将子串中的Emoji别名(两个":"包围的格式)和其HTML表示形式替换为为UnicodeEmoji符号
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  cn.hutool.extra.emoji.EmojiUtil.toUnicode($expr$) 

.containsEmoji : ht>是否包含Emoji表情的Unicode符
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  cn.hutool.extra.emoji.EmojiUtil.containsEmoji($expr$) 

.toHtml : ht>将字符串中的UnicodeEmoji字符转换为HTML表现形式(Hex方式)
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  cn.hutool.extra.emoji.EmojiUtil.toHtml($expr$, $arg$) 

.toAlias : ht>将字符串中的UnicodeEmoji字符转换为别名表现形式(两个":"包围的格式)
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  cn.hutool.extra.emoji.EmojiUtil.toAlias($expr$, $arg$) 

.removeAllEmojis : ht>去除字符串中所有的EmojiUnicode字符
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  cn.hutool.extra.emoji.EmojiUtil.removeAllEmojis($expr$) 

.isEmoji : ht>是否为Emoji表情的Unicode符
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  cn.hutool.extra.emoji.EmojiUtil.isEmoji($expr$) 

.getByTag : ht>通过tag方式获取对应的所有Emoji表情
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  cn.hutool.extra.emoji.EmojiUtil.getByTag($expr$) 

.get : ht>通过别名获取Emoji
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  cn.hutool.extra.emoji.EmojiUtil.get($expr$) 

.extractEmojis : ht>提取字符串中所有的EmojiUnicode
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  cn.hutool.extra.emoji.EmojiUtil.extractEmojis($expr$) 

.toHtmlHex : ht>将字符串中的UnicodeEmoji字符转换为HTML16进制表现形式
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  cn.hutool.extra.emoji.EmojiUtil.toHtmlHex($expr$) 



######## cn.hutool.extra.mail.MailUtil
.sendHtml : ht>使用配置文件中设置的账户发送HTML邮件,发送给单个或多个收件人
	java.util.Collection [cn.hutool.extra.mail.MailUtil]  →  cn.hutool.extra.mail.MailUtil.sendHtml($expr$, $arg$) 
	java.lang.String [cn.hutool.extra.mail.MailUtil]  →  cn.hutool.extra.mail.MailUtil.sendHtml($expr$, $arg$) 

.send : ht>发送邮件给多人
	cn.hutool.extra.mail.MailAccount [cn.hutool.extra.mail.MailUtil]  →  cn.hutool.extra.mail.MailUtil.send($expr$, $arg$) 
	java.util.Collection [cn.hutool.extra.mail.MailUtil]  →  cn.hutool.extra.mail.MailUtil.send($expr$, $arg$) 
	java.lang.String [cn.hutool.extra.mail.MailUtil]  →  cn.hutool.extra.mail.MailUtil.send($expr$, $arg$) 

.getSession : ht>根据配置文件,获取邮件客户端会话
	cn.hutool.extra.mail.MailAccount [cn.hutool.extra.mail.MailUtil]  →  cn.hutool.extra.mail.MailUtil.getSession($expr$, $arg$) 

.sendText : ht>使用配置文件中设置的账户发送文本邮件,发送给单个或多个收件人
	java.util.Collection [cn.hutool.extra.mail.MailUtil]  →  cn.hutool.extra.mail.MailUtil.sendText($expr$, $arg$) 
	java.lang.String [cn.hutool.extra.mail.MailUtil]  →  cn.hutool.extra.mail.MailUtil.sendText($expr$, $arg$) 



######## cn.hutool.extra.servlet.JakartaServletUtil
.getBody : ht>获取请求体
	jakarta.servlet.ServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.getBody($expr$) 

.toBean : ht>ServletRequest参数转Bean
	jakarta.servlet.ServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.toBean($expr$, $arg$) 

.getParamMap : ht>获得所有请求参数
	jakarta.servlet.ServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.getParamMap($expr$) 

.getCookie : ht>获得指定的Cookie
	jakarta.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.getCookie($expr$, $arg$) 

.setHeader : ht>设置响应的Header
	jakarta.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.setHeader($expr$, $arg$) 

.getHeaderMap : ht>获取请求所有的头(header)信息
	jakarta.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.getHeaderMap($expr$) 

.getHeader : ht>获得请求header中的信息
	jakarta.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.getHeader($expr$, $arg$) 

.fillBean : ht>ServletRequest参数转Bean
	jakarta.servlet.ServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.fillBean($expr$, $arg$) 

.readCookieMap : ht>将cookie封装到Map里面
	jakarta.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.readCookieMap($expr$) 

.getHeaderIgnoreCase : ht>忽略大小写获得请求header中的信息
	jakarta.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.getHeaderIgnoreCase($expr$, $arg$) 

.getClientIPByHeader : ht>获取客户端IP
	jakarta.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.getClientIPByHeader($expr$, $arg$) 

.addCookie : ht>设定返回给客户端的Cookie
	jakarta.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.addCookie($expr$, $arg$) 

.getBodyBytes : ht>获取请求体byte[]
	jakarta.servlet.ServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.getBodyBytes($expr$) 

.isPostMethod : ht>是否为POST请求
	jakarta.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.isPostMethod($expr$) 

.getWriter : ht>获得PrintWriter
	jakarta.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.getWriter($expr$) 

.isIE : ht>客户浏览器是否为IE
	jakarta.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.isIE($expr$) 

.isGetMethod : ht>是否为GET请求
	jakarta.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.isGetMethod($expr$) 

.getClientIP : ht>获取客户端IP
	jakarta.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.getClientIP($expr$, $arg$) 

.isMultipart : ht>是否为Multipart类型表单,此类型表单用于文件上传
	jakarta.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.isMultipart($expr$) 

.write : ht>返回数据给客户端
	jakarta.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.write($expr$, $arg$) 

.getParams : ht>获得所有请求参数
	jakarta.servlet.ServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.getParams($expr$) 

.getMultipart : ht>获得MultiPart表单内容,多用于获得上传的文件在同一次请求中,此方法只能被执行一次
	jakarta.servlet.ServletRequest [cn.hutool.extra.servlet.JakartaServletUtil]  →  cn.hutool.extra.servlet.JakartaServletUtil.getMultipart($expr$, $arg$) 



######## cn.hutool.extra.compress.CompressUtil
.getOut : ht>获取压缩输出流,用于压缩指定内容,支持的格式例如
	java.lang.String [cn.hutool.extra.compress.CompressUtil]  →  cn.hutool.extra.compress.CompressUtil.getOut($expr$, $arg$) 

.getIn : ht>获取压缩输入流,用于解压缩指定内容,支持的格式例如
	java.lang.String [cn.hutool.extra.compress.CompressUtil]  →  cn.hutool.extra.compress.CompressUtil.getIn($expr$, $arg$) 

.createExtractor : ht>创建归档解包器,支持
	java.nio.charset.Charset [cn.hutool.extra.compress.CompressUtil]  →  cn.hutool.extra.compress.CompressUtil.createExtractor($expr$, $arg$) 

.createArchiver : ht>创建归档器,支持
	java.nio.charset.Charset [cn.hutool.extra.compress.CompressUtil]  →  cn.hutool.extra.compress.CompressUtil.createArchiver($expr$, $arg$) 



######## cn.hutool.extra.template.TemplateUtil
.createEngine : ht>根据用户引入的模板引擎jar,自动创建对应的模板引擎对象
	cn.hutool.extra.template.TemplateConfig [cn.hutool.extra.template.TemplateUtil]  →  cn.hutool.extra.template.TemplateUtil.createEngine($expr$) 



######## cn.hutool.extra.cglib.CglibUtil
.fillBean : ht>将Map中的内容填充至Bean中
	java.util.Map [cn.hutool.extra.cglib.CglibUtil]  →  cn.hutool.extra.cglib.CglibUtil.fillBean($expr$, $arg$) 

.toBean : ht>将Map转换为Bean
	java.util.Map [cn.hutool.extra.cglib.CglibUtil]  →  cn.hutool.extra.cglib.CglibUtil.toBean($expr$, $arg$) 

.toMap : ht>将Bean转换为Map
	java.lang.Object [cn.hutool.extra.cglib.CglibUtil]  →  cn.hutool.extra.cglib.CglibUtil.toMap($expr$) 

.copyList : ht>拷贝ListBean对象属性
	java.util.Collection [cn.hutool.extra.cglib.CglibUtil]  →  cn.hutool.extra.cglib.CglibUtil.copyList($expr$, $arg$) 

.copy : ht>拷贝Bean对象属性
	java.lang.Object [cn.hutool.extra.cglib.CglibUtil]  →  cn.hutool.extra.cglib.CglibUtil.copy($expr$, $arg$) 



######## cn.hutool.extra.validation.ValidationUtil
.validateProperty : ht>校验bean的某一个属性
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  cn.hutool.extra.validation.ValidationUtil.validateProperty($expr$, $arg$) 

.warpValidate : ht>校验对象
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  cn.hutool.extra.validation.ValidationUtil.warpValidate($expr$, $arg$) 

.warpValidateProperty : ht>校验bean的某一个属性
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  cn.hutool.extra.validation.ValidationUtil.warpValidateProperty($expr$, $arg$) 

.validate : ht>校验对象
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  cn.hutool.extra.validation.ValidationUtil.validate($expr$, $arg$) 



######## cn.hutool.extra.servlet.ServletUtil
.getBody : ht>获取请求体
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.getBody($expr$) 

.toBean : ht>ServletRequest参数转Bean
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.toBean($expr$, $arg$) 

.getParamMap : ht>获得所有请求参数
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.getParamMap($expr$) 

.getCookie : ht>获得指定的Cookie
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.getCookie($expr$, $arg$) 

.setHeader : ht>设置响应的Header
	javax.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.setHeader($expr$, $arg$) 

.getHeaderMap : ht>获取请求所有的头(header)信息
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.getHeaderMap($expr$) 

.getHeader : ht>获得请求header中的信息
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.getHeader($expr$, $arg$) 

.fillBean : ht>ServletRequest参数转Bean
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.fillBean($expr$, $arg$) 

.readCookieMap : ht>将cookie封装到Map里面
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.readCookieMap($expr$) 

.getHeaderIgnoreCase : ht>忽略大小写获得请求header中的信息
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.getHeaderIgnoreCase($expr$, $arg$) 

.getClientIPByHeader : ht>获取客户端IP
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.getClientIPByHeader($expr$, $arg$) 

.addCookie : ht>设定返回给客户端的Cookie
	javax.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.addCookie($expr$, $arg$) 

.getBodyBytes : ht>获取请求体byte[]
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.getBodyBytes($expr$) 

.isPostMethod : ht>是否为POST请求
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.isPostMethod($expr$) 

.getWriter : ht>获得PrintWriter
	javax.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.getWriter($expr$) 

.isIE : ht>客户浏览器是否为IE
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.isIE($expr$) 

.isGetMethod : ht>是否为GET请求
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.isGetMethod($expr$) 

.getClientIP : ht>获取客户端IP
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.getClientIP($expr$, $arg$) 

.isMultipart : ht>是否为Multipart类型表单,此类型表单用于文件上传
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.isMultipart($expr$) 

.write : ht>返回数据给客户端
	javax.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.write($expr$, $arg$) 

.getParams : ht>获得所有请求参数
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.getParams($expr$) 

.getMultipart : ht>获得MultiPart表单内容,多用于获得上传的文件在同一次请求中,此方法只能被执行一次
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  cn.hutool.extra.servlet.ServletUtil.getMultipart($expr$, $arg$) 



######## cn.hutool.extra.ssh.JschUtil
.bindPort : ht>绑定端口到本地。一个会话可绑定多个端口
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.bindPort($expr$, $arg$) 

.unBindPort : ht>解除端口映射
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.unBindPort($expr$, $arg$) 

.openChannel : ht>打开Channel连接
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.openChannel($expr$, $arg$) 

.createSession : ht>创建一个SSH会话,重用已经使用的会话
	com.jcraft.jsch.JSch [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.createSession($expr$, $arg$) 
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.createSession($expr$, $arg$) 

.openSftp : ht>打开SFTP连接
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.openSftp($expr$, $arg$) 

.createChannel : ht>创建Channel连接
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.createChannel($expr$, $arg$) 

.bindRemotePort : ht>绑定ssh服务端的serverPort端口,到host主机的port端口上.
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.bindRemotePort($expr$, $arg$) 

.createSftp : ht>创建Sftp
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.createSftp($expr$) 
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.createSftp($expr$, $arg$) 

.openAndBindPortToLocal : ht>打开SSH会话,并绑定远程端口到本地的一个随机端口
	cn.hutool.extra.ssh.Connector [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.openAndBindPortToLocal($expr$, $arg$) 

.openSession : ht>打开一个新的SSH会话
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.openSession($expr$, $arg$) 

.openShell : ht>打开Shell连接
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.openShell($expr$) 

.execByShell : ht>执行Shell命令
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.execByShell($expr$, $arg$) 

.getSession : ht>获得一个SSH会话,重用已经使用的会话
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.getSession($expr$, $arg$) 

.close : ht>关闭会话通道
	com.jcraft.jsch.Channel [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.close($expr$) 
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.close($expr$) 
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.close($expr$) 

.exec : ht>执行Shell命令(使用EXEC方式)
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  cn.hutool.extra.ssh.JschUtil.exec($expr$, $arg$) 



######## cn.hutool.extra.mail.InternalMailUtil
.encodeText : ht>编码中文字符
	java.lang.String [cn.hutool.extra.mail.InternalMailUtil]  →  cn.hutool.extra.mail.InternalMailUtil.encodeText($expr$, $arg$) 

.parseAddress : ht>将一个地址字符串解析为多个地址
	java.lang.String [cn.hutool.extra.mail.InternalMailUtil]  →  cn.hutool.extra.mail.InternalMailUtil.parseAddress($expr$, $arg$) 

.parseAddressFromStrs : ht>将多个字符串邮件地址转为InternetAddress列表
	ARRAY [cn.hutool.extra.mail.InternalMailUtil]  →  cn.hutool.extra.mail.InternalMailUtil.parseAddressFromStrs($expr$, $arg$) 

.parseFirstAddress : ht>解析第一个地址
	java.lang.String [cn.hutool.extra.mail.InternalMailUtil]  →  cn.hutool.extra.mail.InternalMailUtil.parseFirstAddress($expr$, $arg$) 



######## cn.hutool.extra.qrcode.QrCodeUtil
.generateAsSvg : ht>generateAsSvg
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  cn.hutool.extra.qrcode.QrCodeUtil.generateAsSvg($expr$, $arg$) 

.encode : ht>将文本内容编码为二维码
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  cn.hutool.extra.qrcode.QrCodeUtil.encode($expr$, $arg$) 

.toImage : ht>BitMatrix转BufferedImage
	com.google.zxing.common.BitMatrix [cn.hutool.extra.qrcode.QrCodeUtil]  →  cn.hutool.extra.qrcode.QrCodeUtil.toImage($expr$, $arg$) 

.generateAsAsciiArt : ht>generateAsAsciiArt
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  cn.hutool.extra.qrcode.QrCodeUtil.generateAsAsciiArt($expr$, $arg$) 

.toAsciiArt : ht>BitMatrix转ASCIIArt字符画形式的二维码
	com.google.zxing.common.BitMatrix [cn.hutool.extra.qrcode.QrCodeUtil]  →  cn.hutool.extra.qrcode.QrCodeUtil.toAsciiArt($expr$, $arg$) 

.generateAsBase64 : ht>生成Base64编码格式的二维码,以String形式表示
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  cn.hutool.extra.qrcode.QrCodeUtil.generateAsBase64($expr$, $arg$) 

.decode : ht>将二维码或条形码图片解码为文本
	java.awt.Image [cn.hutool.extra.qrcode.QrCodeUtil]  →  cn.hutool.extra.qrcode.QrCodeUtil.decode($expr$, $arg$) 
	java.io.File [cn.hutool.extra.qrcode.QrCodeUtil]  →  cn.hutool.extra.qrcode.QrCodeUtil.decode($expr$) 
	java.io.InputStream [cn.hutool.extra.qrcode.QrCodeUtil]  →  cn.hutool.extra.qrcode.QrCodeUtil.decode($expr$) 

.generate : ht>生成二维码到文件,二维码图片格式取决于文件的扩展名
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  cn.hutool.extra.qrcode.QrCodeUtil.generate($expr$, $arg$) 

.generatePng : ht>生成PNG格式的二维码图片,以byte[]形式表示
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  cn.hutool.extra.qrcode.QrCodeUtil.generatePng($expr$, $arg$) 

.toSVG : ht>BitMatrix转SVG(字符串)
	com.google.zxing.common.BitMatrix [cn.hutool.extra.qrcode.QrCodeUtil]  →  cn.hutool.extra.qrcode.QrCodeUtil.toSVG($expr$, $arg$) 



######## cn.hutool.extra.pinyin.PinyinUtil
.isChinese : ht>是否为中文字符
	CHAR [cn.hutool.extra.pinyin.PinyinUtil]  →  cn.hutool.extra.pinyin.PinyinUtil.isChinese($expr$) 

.getPinyin : ht>如果c为汉字,则返回大写拼音；如果c不是汉字,则返回String.valueOf(c)
	CHAR [cn.hutool.extra.pinyin.PinyinUtil]  →  cn.hutool.extra.pinyin.PinyinUtil.getPinyin($expr$) 
	java.lang.String [cn.hutool.extra.pinyin.PinyinUtil]  →  cn.hutool.extra.pinyin.PinyinUtil.getPinyin($expr$, $arg$) 

.getFirstLetter : ht>将输入字符串转为拼音首字母,其它字符原样返回
	CHAR [cn.hutool.extra.pinyin.PinyinUtil]  →  cn.hutool.extra.pinyin.PinyinUtil.getFirstLetter($expr$) 
	java.lang.String [cn.hutool.extra.pinyin.PinyinUtil]  →  cn.hutool.extra.pinyin.PinyinUtil.getFirstLetter($expr$, $arg$) 



######## cn.hutool.extra.spring.SpringUtil
.getBeansOfType : ht>获取指定类型对应的所有Bean,包括子类
	java.lang.Class [cn.hutool.extra.spring.SpringUtil]  →  cn.hutool.extra.spring.SpringUtil.getBeansOfType($expr$) 

.getProperty : ht>获取配置文件配置项的值
	java.lang.String [cn.hutool.extra.spring.SpringUtil]  →  cn.hutool.extra.spring.SpringUtil.getProperty($expr$) 

.publishEvent : ht>发布事件
	org.springframework.context.ApplicationEvent [cn.hutool.extra.spring.SpringUtil]  →  cn.hutool.extra.spring.SpringUtil.publishEvent($expr$) 
	java.lang.Object [cn.hutool.extra.spring.SpringUtil]  →  cn.hutool.extra.spring.SpringUtil.publishEvent($expr$) 

.getBeanNamesForType : ht>获取指定类型对应的Bean名称,包括子类
	java.lang.Class [cn.hutool.extra.spring.SpringUtil]  →  cn.hutool.extra.spring.SpringUtil.getBeanNamesForType($expr$) 

.unregisterBean : ht>注销bean
	java.lang.String [cn.hutool.extra.spring.SpringUtil]  →  cn.hutool.extra.spring.SpringUtil.unregisterBean($expr$) 

.getBean : ht>通过类型参考返回带泛型参数的Bean
	cn.hutool.core.lang.TypeReference [cn.hutool.extra.spring.SpringUtil]  →  cn.hutool.extra.spring.SpringUtil.getBean($expr$) 
	java.lang.Class [cn.hutool.extra.spring.SpringUtil]  →  cn.hutool.extra.spring.SpringUtil.getBean($expr$) 
	java.lang.String [cn.hutool.extra.spring.SpringUtil]  →  cn.hutool.extra.spring.SpringUtil.getBean($expr$, $arg$) 

.registerBean : ht>动态向Spring注册Bean
	java.lang.String [cn.hutool.extra.spring.SpringUtil]  →  cn.hutool.extra.spring.SpringUtil.registerBean($expr$, $arg$) 



######## cn.hutool.extra.ssh.GanymedUtil
.openSession : ht>打开远程会话
	java.lang.String [cn.hutool.extra.ssh.GanymedUtil]  →  cn.hutool.extra.ssh.GanymedUtil.openSession($expr$, $arg$) 

.execByShell : ht>执行Shell命令
	ch.ethz.ssh2.Session [cn.hutool.extra.ssh.GanymedUtil]  →  cn.hutool.extra.ssh.GanymedUtil.execByShell($expr$, $arg$) 

.close : ht>关闭会话
	ch.ethz.ssh2.Session [cn.hutool.extra.ssh.GanymedUtil]  →  cn.hutool.extra.ssh.GanymedUtil.close($expr$) 

.exec : ht>执行Shell命令(使用EXEC方式)
	ch.ethz.ssh2.Session [cn.hutool.extra.ssh.GanymedUtil]  →  cn.hutool.extra.ssh.GanymedUtil.exec($expr$, $arg$) 

.connect : ht>连接到服务器
	java.lang.String [cn.hutool.extra.ssh.GanymedUtil]  →  cn.hutool.extra.ssh.GanymedUtil.connect($expr$, $arg$) 



######## hutool-http-5.8.10.postfixTemplates ######## 
######## cn.hutool.http.webservice.SoapUtil
.createClient : ht>创建SOAP客户端
	java.lang.String [cn.hutool.http.webservice.SoapUtil]  →  cn.hutool.http.webservice.SoapUtil.createClient($expr$, $arg$) 

.toString : ht>SOAPMessage转为字符串
	javax.xml.soap.SOAPMessage [cn.hutool.http.webservice.SoapUtil]  →  cn.hutool.http.webservice.SoapUtil.toString($expr$, $arg$) 



######## cn.hutool.http.HttpUtil
.downloadFileFromUrl : ht>下载远程文件
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.downloadFileFromUrl($expr$, $arg$) 

.urlWithForm : ht>将表单数据加到URL中(用于GET表单提交)
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.urlWithForm($expr$, $arg$) 

.getMimeType : ht>根据文件扩展名获得MimeType
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.getMimeType($expr$, $arg$) 

.createRequest : ht>创建Http请求对象
	cn.hutool.http.Method [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.createRequest($expr$, $arg$) 

.createPost : ht>创建HttpPOST请求对象
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.createPost($expr$) 

.createServer : ht>创建简易的Http服务器
	INT [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.createServer($expr$) 

.toParams : ht>将Map形式的Form表单数据转换为Url参数形式
	java.util.Map [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.toParams($expr$, $arg$) 

.normalizeParams : ht>标准化参数字符串,即URL中？后的部分
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.normalizeParams($expr$, $arg$) 

.getString : ht>从流中读取内容
	ARRAY [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.getString($expr$, $arg$) 
	java.io.InputStream [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.getString($expr$, $arg$) 

.getCharset : ht>从Http连接的头信息中获得字符集
	java.net.HttpURLConnection [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.getCharset($expr$) 
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.getCharset($expr$) 

.getContentTypeByRequestBody : ht>从请求参数的body中判断请求的Content-Type类型,支持的类型有
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.getContentTypeByRequestBody($expr$) 

.downloadFile : ht>下载远程文件
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.downloadFile($expr$, $arg$) 

.decodeParamMap : ht>将URL参数解析为Map(也可以解析Post中的键值对参数)
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.decodeParamMap($expr$, $arg$) 

.createGet : ht>创建HttpGET请求对象
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.createGet($expr$, $arg$) 

.isHttp : ht>检测是否http
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.isHttp($expr$) 

.download : ht>下载远程文件
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.download($expr$, $arg$) 

.downloadBytes : ht>下载远程文件数据,支持30x跳转
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.downloadBytes($expr$) 

.post : ht>发送post请求
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.post($expr$, $arg$) 

.encodeParams : ht>对URL参数做编码,只编码键和值
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.encodeParams($expr$, $arg$) 

.get : ht>发送get请求
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.get($expr$, $arg$) 

.downloadString : ht>下载远程文本
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.downloadString($expr$, $arg$) 

.decodeParams : ht>将URL参数解析为Map(也可以解析Post中的键值对参数)
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.decodeParams($expr$, $arg$) 

.isHttps : ht>检测是否https
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.isHttps($expr$) 

.buildBasicAuth : ht>构建简单的账号秘密验证信息,构建后类似于
	java.lang.String [cn.hutool.http.HttpUtil]  →  cn.hutool.http.HttpUtil.buildBasicAuth($expr$, $arg$) 



######## cn.hutool.http.HtmlUtil
.filter : ht>过滤HTML文本,防止XSS攻击
	java.lang.String [cn.hutool.http.HtmlUtil]  →  cn.hutool.http.HtmlUtil.filter($expr$) 

.removeAllHtmlAttr : ht>去除指定标签的所有属性
	java.lang.String [cn.hutool.http.HtmlUtil]  →  cn.hutool.http.HtmlUtil.removeAllHtmlAttr($expr$, $arg$) 

.removeHtmlTag : ht>清除指定HTML标签
	java.lang.String [cn.hutool.http.HtmlUtil]  →  cn.hutool.http.HtmlUtil.removeHtmlTag($expr$, $arg$) 

.removeHtmlAttr : ht>去除HTML标签中的属性,如果多个标签有相同属性,都去除
	java.lang.String [cn.hutool.http.HtmlUtil]  →  cn.hutool.http.HtmlUtil.removeHtmlAttr($expr$, $arg$) 

.unescape : ht>还原被转义的HTML特殊字符
	java.lang.String [cn.hutool.http.HtmlUtil]  →  cn.hutool.http.HtmlUtil.unescape($expr$) 

.cleanHtmlTag : ht>清除所有HTML标签,但是不删除标签内的内容
	java.lang.String [cn.hutool.http.HtmlUtil]  →  cn.hutool.http.HtmlUtil.cleanHtmlTag($expr$) 

.unwrapHtmlTag : ht>清除指定HTML标签,不包括内容
	java.lang.String [cn.hutool.http.HtmlUtil]  →  cn.hutool.http.HtmlUtil.unwrapHtmlTag($expr$, $arg$) 

.escape : ht>转义文本中的HTML字符为安全的字符,以下字符被转义
	java.lang.String [cn.hutool.http.HtmlUtil]  →  cn.hutool.http.HtmlUtil.escape($expr$) 



######## cn.hutool.http.useragent.UserAgentUtil
.parse : ht>解析User-Agent
	java.lang.String [cn.hutool.http.useragent.UserAgentUtil]  →  cn.hutool.http.useragent.UserAgentUtil.parse($expr$) 



######## hutool-json-5.8.10.postfixTemplates ######## 
######## cn.hutool.json.JSONUtil
.putDeserializer : ht>加入自定义的反序列化器
	java.lang.reflect.Type [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.putDeserializer($expr$, $arg$) 

.parseArray : ht>JSON字符串转JSONArray
	java.lang.Object [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.parseArray($expr$, $arg$) 
	java.lang.String [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.parseArray($expr$) 

.parseObj : ht>JSON字符串转JSONObject对象
	java.lang.Object [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.parseObj($expr$, $arg$) 
	java.lang.String [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.parseObj($expr$) 

.toList : ht>将JSONArray转换为Bean的List,默认为ArrayList
	cn.hutool.json.JSONArray [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.toList($expr$, $arg$) 
	java.lang.String [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.toList($expr$, $arg$) 

.toXmlStr : ht>转换为XML字符串
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.toXmlStr($expr$) 

.isTypeJSON : ht>是否为JSON类型字符串,首尾都为大括号或中括号判定为JSON字符串
	java.lang.String [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.isTypeJSON($expr$) 

.toJsonStr : ht>转为JSON字符串
	java.lang.Object [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.toJsonStr($expr$, $arg$) 
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.toJsonStr($expr$, $arg$) 

.readJSONObject : ht>读取JSONObject
	java.io.File [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.readJSONObject($expr$, $arg$) 

.putSerializer : ht>加入自定义的序列化器
	java.lang.reflect.Type [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.putSerializer($expr$, $arg$) 

.putByPath : ht>设置表达式指定位置(或filed对应)的值
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.putByPath($expr$, $arg$) 

.createArray : ht>创建JSONArray
	cn.hutool.json.JSONConfig [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.createArray($expr$) 

.xmlToJson : ht>XML转JSONObject
	java.lang.String [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.xmlToJson($expr$) 

.quote : ht>对所有双引号做转义处理(使用双反斜杠做转义)
	java.lang.String [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.quote($expr$, $arg$) 

.formatJsonStr : ht>格式化JSON字符串,此方法并不严格检查JSON的格式正确与否
	java.lang.String [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.formatJsonStr($expr$) 

.isTypeJSONArray : ht>是否为JSONArray类型的字符串,首尾都为中括号判定为JSONArray字符串
	java.lang.String [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.isTypeJSONArray($expr$) 

.escape : ht>转义显示不可见字符
	java.lang.String [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.escape($expr$) 

.toJsonPrettyStr : ht>转为JSON字符串
	java.lang.Object [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.toJsonPrettyStr($expr$) 
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.toJsonPrettyStr($expr$) 

.toBean : ht>转为实体类对象
	cn.hutool.json.JSONObject [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.toBean($expr$, $arg$) 
	java.lang.String [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.toBean($expr$, $arg$) 
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.toBean($expr$, $arg$) 

.parse : ht>转换对象为JSON,如果用户不配置JSONConfig,则JSON的有序与否与传入对象有关
	java.lang.Object [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.parse($expr$, $arg$) 

.parseFromXml : ht>XML字符串转为JSONObject
	java.lang.String [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.parseFromXml($expr$) 

.createObj : ht>创建JSONObject
	cn.hutool.json.JSONConfig [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.createObj($expr$) 

.getByPath : ht>通过表达式获取JSON中嵌套的对象
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.getByPath($expr$, $arg$) 

.isTypeJSONObject : ht>是否为JSONObject类型字符串,首尾都为大括号判定为JSONObject字符串
	java.lang.String [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.isTypeJSONObject($expr$) 

.isNull : ht>是否为null对象,null的情况包括
	java.lang.Object [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.isNull($expr$) 

.readJSONArray : ht>读取JSONArray
	java.io.File [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.readJSONArray($expr$, $arg$) 

.readJSON : ht>读取JSON
	java.io.File [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.readJSON($expr$, $arg$) 

.wrap : ht>在需要的时候包装对象
	java.lang.Object [cn.hutool.json.JSONUtil]  →  cn.hutool.json.JSONUtil.wrap($expr$, $arg$) 



######## cn.hutool.json.InternalJSONUtil
.stringToValue : ht>尝试转换字符串为number,boolean,ornull,无法转换返回String
	java.lang.String [cn.hutool.json.InternalJSONUtil]  →  cn.hutool.json.InternalJSONUtil.stringToValue($expr$) 



######## hutool-jwt-5.8.10.postfixTemplates ######## 
######## cn.hutool.jwt.signers.AlgorithmUtil
.getAlgorithm : ht>获取算法,用户传入算法ID返回算法名,传入算法名返回本身
	java.lang.String [cn.hutool.jwt.signers.AlgorithmUtil]  →  cn.hutool.jwt.signers.AlgorithmUtil.getAlgorithm($expr$) 

.getId : ht>获取算法ID,用户传入算法名返回ID,传入算法ID返回本身
	java.lang.String [cn.hutool.jwt.signers.AlgorithmUtil]  →  cn.hutool.jwt.signers.AlgorithmUtil.getId($expr$) 



######## cn.hutool.jwt.signers.JWTSignerUtil
.es256 : ht>ES256(SHA256withECDSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.es256($expr$) 

.hsha1 : ht>HSHA1(HmacSHA1)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.hsha1($expr$) 

.hs512 : ht>HS512(HmacSHA512)签名器
	ARRAY [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.hs512($expr$) 

.es384 : ht>ES384(SHA383withECDSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.es384($expr$) 

.hs256 : ht>HS256(HmacSHA256)签名器
	ARRAY [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.hs256($expr$) 

.hmd5 : ht>HMD5(HmacMD5)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.hmd5($expr$) 

.dnone : ht>DNONE(NONEwithDSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.dnone($expr$) 

.rs256 : ht>RS256(SHA256withRSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.rs256($expr$) 

.hs384 : ht>HS384(HmacSHA384)签名器
	ARRAY [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.hs384($expr$) 

.rsha1 : ht>RSHA1(SHA1withRSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.rsha1($expr$) 

.es512 : ht>ES512(SHA512withECDSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.es512($expr$) 

.createSigner : ht>创建签名器
	java.lang.String [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.createSigner($expr$, $arg$) 

.rs512 : ht>RS512(SHA512withRSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.rs512($expr$) 

.esha1 : ht>ESHA1(SHA1withECDSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.esha1($expr$) 

.rs384 : ht>RS384(SHA384withRSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.rs384($expr$) 

.rmd5 : ht>RMD5(MD5withRSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.rmd5($expr$) 

.rmd2 : ht>RMD2(MD2withRSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.rmd2($expr$) 

.sm4cmac : ht>SM4CMAC(SM4CMAC)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.sm4cmac($expr$) 

.dsha1 : ht>DSHA1(SHA1withDSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.dsha1($expr$) 

.enone : ht>ENONE(NONEwithECDSA)签名器
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  cn.hutool.jwt.signers.JWTSignerUtil.enone($expr$) 



######## cn.hutool.jwt.JWTUtil
.verify : ht>验证JWTToken有效性
	java.lang.String [cn.hutool.jwt.JWTUtil]  →  cn.hutool.jwt.JWTUtil.verify($expr$, $arg$) 

.parseToken : ht>解析JWTToken
	java.lang.String [cn.hutool.jwt.JWTUtil]  →  cn.hutool.jwt.JWTUtil.parseToken($expr$) 

.createToken : ht>创建HS256(HmacSHA256)JWTToken
	java.util.Map [cn.hutool.jwt.JWTUtil]  →  cn.hutool.jwt.JWTUtil.createToken($expr$, $arg$) 



######## hutool-log-5.8.10.postfixTemplates ######## 
######## cn.hutool.log.GlobalLogFactory
.set : ht>自定义日志实现
	java.lang.Class [cn.hutool.log.GlobalLogFactory]  →  cn.hutool.log.GlobalLogFactory.set($expr$) 
	cn.hutool.log.LogFactory [cn.hutool.log.GlobalLogFactory]  →  cn.hutool.log.GlobalLogFactory.set($expr$) 



######## hutool-poi-5.8.10.postfixTemplates ######## 
######## cn.hutool.poi.excel.ExcelDateUtil
.isDateFormat : ht>判断日期格式
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.ExcelDateUtil]  →  cn.hutool.poi.excel.ExcelDateUtil.isDateFormat($expr$, $arg$) 
	org.apache.poi.ss.usermodel.ExcelNumberFormat [cn.hutool.poi.excel.ExcelDateUtil]  →  cn.hutool.poi.excel.ExcelDateUtil.isDateFormat($expr$) 
	INT [cn.hutool.poi.excel.ExcelDateUtil]  →  cn.hutool.poi.excel.ExcelDateUtil.isDateFormat($expr$, $arg$) 



######## cn.hutool.poi.excel.cell.CellUtil
.getOrCreateCell : ht>获取已有单元格或创建新单元格
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.getOrCreateCell($expr$, $arg$) 

.getCell : ht>获取单元格,如果单元格不存在,返回NullCell
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.getCell($expr$, $arg$) 

.isMergedRegion : ht>判断指定的单元格是否是合并单元格
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.isMergedRegion($expr$, $arg$) 
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.isMergedRegion($expr$) 

.getMergedRegionValue : ht>获取合并单元格的值
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.getMergedRegionValue($expr$, $arg$) 

.getCellValue : ht>获取单元格值
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.getCellValue($expr$, $arg$) 

.setComment : ht>为特定单元格添加批注
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.setComment($expr$, $arg$) 

.setCellValue : ht>设置单元格值
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.setCellValue($expr$, $arg$) 

.getMergedRegionCell : ht>获取合并单元格
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.getMergedRegionCell($expr$, $arg$) 
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.getMergedRegionCell($expr$) 

.getCellRangeAddress : ht>获取合并单元格CellRangeAddress,如果不是返回null
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.getCellRangeAddress($expr$, $arg$) 
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.getCellRangeAddress($expr$) 

.mergingCells : ht>合并单元格,可以根据设置的值来合并行和列
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.mergingCells($expr$, $arg$) 

.setMergedRegionStyle : ht>设置合并单元格样式,如果不是则不设置
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  cn.hutool.poi.excel.cell.CellUtil.setMergedRegionStyle($expr$, $arg$) 



######## cn.hutool.poi.excel.RowUtil
.readRow : ht>读取一行
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.RowUtil]  →  cn.hutool.poi.excel.RowUtil.readRow($expr$, $arg$) 

.insertRow : ht>插入行
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.RowUtil]  →  cn.hutool.poi.excel.RowUtil.insertRow($expr$, $arg$) 

.getOrCreateRow : ht>获取已有行或创建新行
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.RowUtil]  →  cn.hutool.poi.excel.RowUtil.getOrCreateRow($expr$, $arg$) 

.removeRow : ht>从工作表中删除指定的行,此方法修复sheet.shiftRows删除行时会拆分合并的单元格的问题
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.RowUtil]  →  cn.hutool.poi.excel.RowUtil.removeRow($expr$) 

.writeRow : ht>写一行数据
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.RowUtil]  →  cn.hutool.poi.excel.RowUtil.writeRow($expr$, $arg$) 



######## cn.hutool.poi.excel.style.StyleUtil
.isNullOrDefaultStyle : ht>给定样式是否为null(无样式)或默认样式,默认样式为{@codeworkbook.getCellStyleAt(0)}
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  cn.hutool.poi.excel.style.StyleUtil.isNullOrDefaultStyle($expr$, $arg$) 

.setColor : ht>给cell设置颜色
	org.apache.poi.ss.usermodel.CellStyle [cn.hutool.poi.excel.style.StyleUtil]  →  cn.hutool.poi.excel.style.StyleUtil.setColor($expr$, $arg$) 

.setBorder : ht>设置cell的四个边框粗细和颜色
	org.apache.poi.ss.usermodel.CellStyle [cn.hutool.poi.excel.style.StyleUtil]  →  cn.hutool.poi.excel.style.StyleUtil.setBorder($expr$, $arg$) 

.setAlign : ht>设置cell文本对齐样式
	org.apache.poi.ss.usermodel.CellStyle [cn.hutool.poi.excel.style.StyleUtil]  →  cn.hutool.poi.excel.style.StyleUtil.setAlign($expr$, $arg$) 

.cloneCellStyle : ht>克隆新的CellStyle
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  cn.hutool.poi.excel.style.StyleUtil.cloneCellStyle($expr$, $arg$) 
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.style.StyleUtil]  →  cn.hutool.poi.excel.style.StyleUtil.cloneCellStyle($expr$, $arg$) 

.getFormat : ht>创建数据格式并获取格式
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  cn.hutool.poi.excel.style.StyleUtil.getFormat($expr$, $arg$) 

.createFont : ht>创建字体
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  cn.hutool.poi.excel.style.StyleUtil.createFont($expr$, $arg$) 

.createDefaultCellStyle : ht>创建默认普通单元格样式
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  cn.hutool.poi.excel.style.StyleUtil.createDefaultCellStyle($expr$) 

.createCellStyle : ht>创建单元格样式
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  cn.hutool.poi.excel.style.StyleUtil.createCellStyle($expr$) 

.createHeadCellStyle : ht>创建默认头部样式
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  cn.hutool.poi.excel.style.StyleUtil.createHeadCellStyle($expr$) 

.setFontStyle : ht>设置字体样式
	org.apache.poi.ss.usermodel.Font [cn.hutool.poi.excel.style.StyleUtil]  →  cn.hutool.poi.excel.style.StyleUtil.setFontStyle($expr$, $arg$) 



######## cn.hutool.poi.excel.ExcelFileUtil
.isXlsx : ht>是否为XLSX格式的Excel文件(XSSF)
	java.io.File [cn.hutool.poi.excel.ExcelFileUtil]  →  cn.hutool.poi.excel.ExcelFileUtil.isXlsx($expr$) 
	java.io.InputStream [cn.hutool.poi.excel.ExcelFileUtil]  →  cn.hutool.poi.excel.ExcelFileUtil.isXlsx($expr$) 

.isXls : ht>是否为XLS格式的Excel文件(HSSF)
	java.io.InputStream [cn.hutool.poi.excel.ExcelFileUtil]  →  cn.hutool.poi.excel.ExcelFileUtil.isXls($expr$) 



######## cn.hutool.poi.word.WordUtil
.getWriter : ht>创建Word07格式的生成器
	java.io.File [cn.hutool.poi.word.WordUtil]  →  cn.hutool.poi.word.WordUtil.getWriter($expr$) 



######## cn.hutool.poi.excel.WorkbookUtil
.getOrCreateSheet : ht>获取或者创建sheet表
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.WorkbookUtil]  →  cn.hutool.poi.excel.WorkbookUtil.getOrCreateSheet($expr$, $arg$) 

.createBookForWriter : ht>创建工作簿,用于Excel写出(读写模式)
	java.io.File [cn.hutool.poi.excel.WorkbookUtil]  →  cn.hutool.poi.excel.WorkbookUtil.createBookForWriter($expr$) 

.createBook : ht>创建新的空白Excel工作簿
	java.lang.String [cn.hutool.poi.excel.WorkbookUtil]  →  cn.hutool.poi.excel.WorkbookUtil.createBook($expr$, $arg$) 
	java.io.File [cn.hutool.poi.excel.WorkbookUtil]  →  cn.hutool.poi.excel.WorkbookUtil.createBook($expr$, $arg$) 
	BOOLEAN [cn.hutool.poi.excel.WorkbookUtil]  →  cn.hutool.poi.excel.WorkbookUtil.createBook($expr$) 
	java.io.InputStream [cn.hutool.poi.excel.WorkbookUtil]  →  cn.hutool.poi.excel.WorkbookUtil.createBook($expr$, $arg$) 

.isEmpty : ht>sheet是否为空
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.WorkbookUtil]  →  cn.hutool.poi.excel.WorkbookUtil.isEmpty($expr$) 

.writeBook : ht>将ExcelWorkbook刷出到输出流,不关闭流
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.WorkbookUtil]  →  cn.hutool.poi.excel.WorkbookUtil.writeBook($expr$, $arg$) 

.createSXSSFBook : ht>创建空的SXSSFWorkbook,用于大批量数据写出
	java.lang.String [cn.hutool.poi.excel.WorkbookUtil]  →  cn.hutool.poi.excel.WorkbookUtil.createSXSSFBook($expr$, $arg$) 
	java.io.File [cn.hutool.poi.excel.WorkbookUtil]  →  cn.hutool.poi.excel.WorkbookUtil.createSXSSFBook($expr$, $arg$) 
	INT [cn.hutool.poi.excel.WorkbookUtil]  →  cn.hutool.poi.excel.WorkbookUtil.createSXSSFBook($expr$, $arg$) 
	java.io.InputStream [cn.hutool.poi.excel.WorkbookUtil]  →  cn.hutool.poi.excel.WorkbookUtil.createSXSSFBook($expr$, $arg$) 



######## cn.hutool.poi.word.TableUtil
.getOrCreateCell : ht>获取或创建新单元格
	org.apache.poi.xwpf.usermodel.XWPFTableRow [cn.hutool.poi.word.TableUtil]  →  cn.hutool.poi.word.TableUtil.getOrCreateCell($expr$, $arg$) 

.createTable : ht>创建空表,只有一行
	org.apache.poi.xwpf.usermodel.XWPFDocument [cn.hutool.poi.word.TableUtil]  →  cn.hutool.poi.word.TableUtil.createTable($expr$, $arg$) 

.getOrCreateRow : ht>获取或创建新行
	org.apache.poi.xwpf.usermodel.XWPFTable [cn.hutool.poi.word.TableUtil]  →  cn.hutool.poi.word.TableUtil.getOrCreateRow($expr$, $arg$) 

.writeRow : ht>写一行数据
	org.apache.poi.xwpf.usermodel.XWPFTableRow [cn.hutool.poi.word.TableUtil]  →  cn.hutool.poi.word.TableUtil.writeRow($expr$, $arg$) 

.writeTable : ht>为table填充数据
	org.apache.poi.xwpf.usermodel.XWPFTable [cn.hutool.poi.word.TableUtil]  →  cn.hutool.poi.word.TableUtil.writeTable($expr$, $arg$) 



######## cn.hutool.poi.excel.ExcelUtil
.getReader : ht>获取Excel读取器,通过调用ExcelReader的read或readXXX方法读取Excel内容
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.getReader($expr$, $arg$) 
	java.io.File [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.getReader($expr$, $arg$) 
	java.io.InputStream [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.getReader($expr$, $arg$) 

.readBySax : ht>通过Sax方式读取Excel,同时支持03和07格式
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.readBySax($expr$, $arg$) 
	java.io.File [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.readBySax($expr$, $arg$) 
	java.io.InputStream [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.readBySax($expr$, $arg$) 

.getWriter : ht>获得ExcelWriter,默认写出到第一个sheet
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.getWriter($expr$, $arg$) 
	java.io.File [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.getWriter($expr$, $arg$) 
	BOOLEAN [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.getWriter($expr$) 

.indexToColName : ht>将Sheet列号变为列名
	INT [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.indexToColName($expr$) 

.getBigWriter : ht>获得BigExcelWriter,默认写出到第一个sheet
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.getBigWriter($expr$, $arg$) 
	java.io.File [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.getBigWriter($expr$, $arg$) 
	INT [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.getBigWriter($expr$) 

.getWriterWithSheet : ht>获得ExcelWriter,默认写出到第一个sheet
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.getWriterWithSheet($expr$) 

.colNameToIndex : ht>根据表元的列名转换为列号
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.colNameToIndex($expr$) 

.toLocation : ht>将Excel中地址标识符(例如A11,B5)等转换为行列表示
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  cn.hutool.poi.excel.ExcelUtil.toLocation($expr$) 



######## cn.hutool.poi.word.DocUtil
.create : ht>创建XWPFDocument,如果文件已存在则读取之,否则创建新的
	java.io.File [cn.hutool.poi.word.DocUtil]  →  cn.hutool.poi.word.DocUtil.create($expr$) 



######## cn.hutool.poi.excel.sax.ExcelSaxUtil
.createSaxReader : ht>创建ExcelSaxReader
	BOOLEAN [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  cn.hutool.poi.excel.sax.ExcelSaxUtil.createSaxReader($expr$, $arg$) 

.countNullCell : ht>计算两个单元格之间的单元格数目(同一行)
	java.lang.String [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  cn.hutool.poi.excel.sax.ExcelSaxUtil.countNullCell($expr$, $arg$) 

.readFrom : ht>从Excel的XML文档中读取内容,并使用ContentHandler处理
	java.io.InputStream [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  cn.hutool.poi.excel.sax.ExcelSaxUtil.readFrom($expr$, $arg$) 

.isDateFormat : ht>判断日期格式
	org.apache.poi.hssf.record.CellValueRecordInterface [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  cn.hutool.poi.excel.sax.ExcelSaxUtil.isDateFormat($expr$, $arg$) 
	INT [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  cn.hutool.poi.excel.sax.ExcelSaxUtil.isDateFormat($expr$, $arg$) 

.getNumberOrDateValue : ht>在Excel03sax读取中获取日期或数字类型的结果值
	org.apache.poi.hssf.record.CellValueRecordInterface [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  cn.hutool.poi.excel.sax.ExcelSaxUtil.getNumberOrDateValue($expr$, $arg$) 

.formatCellContent : ht>格式化数字或日期值
	java.lang.String [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  cn.hutool.poi.excel.sax.ExcelSaxUtil.formatCellContent($expr$, $arg$) 

.getDataValue : ht>根据数据类型获取数据
	cn.hutool.poi.excel.sax.CellDataType [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  cn.hutool.poi.excel.sax.ExcelSaxUtil.getDataValue($expr$, $arg$) 

.getDateValue : ht>获取日期
	java.lang.String [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  cn.hutool.poi.excel.sax.ExcelSaxUtil.getDateValue($expr$) 
	DOUBLE [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  cn.hutool.poi.excel.sax.ExcelSaxUtil.getDateValue($expr$) 



######## cn.hutool.poi.excel.ExcelPicUtil
.getPicMap : ht>获取工作簿指定sheet中图片列表
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.ExcelPicUtil]  →  cn.hutool.poi.excel.ExcelPicUtil.getPicMap($expr$, $arg$) 



######## cn.hutool.poi.excel.ExcelExtractorUtil
.getExtractor : ht>获取ExcelExtractor对象
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.ExcelExtractorUtil]  →  cn.hutool.poi.excel.ExcelExtractorUtil.getExtractor($expr$) 

.readAsText : ht>读取为文本格式
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.ExcelExtractorUtil]  →  cn.hutool.poi.excel.ExcelExtractorUtil.readAsText($expr$, $arg$) 



######## hutool-script-5.8.10.postfixTemplates ######## 
######## cn.hutool.script.ScriptUtil
.eval : ht>执行有返回值的Javascript脚本
	java.lang.String [cn.hutool.script.ScriptUtil]  →  cn.hutool.script.ScriptUtil.eval($expr$, $arg$) 

.compile : ht>编译Javascript脚本
	javax.script.ScriptEngine [cn.hutool.script.ScriptUtil]  →  cn.hutool.script.ScriptUtil.compile($expr$, $arg$) 
	java.lang.String [cn.hutool.script.ScriptUtil]  →  cn.hutool.script.ScriptUtil.compile($expr$) 

.evalInvocable : ht>执行Javascript脚本,返回Invocable,此方法分为两种情况
	java.lang.String [cn.hutool.script.ScriptUtil]  →  cn.hutool.script.ScriptUtil.evalInvocable($expr$) 

.invoke : ht>执行JS脚本中的指定方法
	java.lang.String [cn.hutool.script.ScriptUtil]  →  cn.hutool.script.ScriptUtil.invoke($expr$, $arg$) 

.getScript : ht>获得单例的ScriptEngine实例
	java.lang.String [cn.hutool.script.ScriptUtil]  →  cn.hutool.script.ScriptUtil.getScript($expr$) 

.createScript : ht>创建ScriptEngine实例
	java.lang.String [cn.hutool.script.ScriptUtil]  →  cn.hutool.script.ScriptUtil.createScript($expr$) 



######## hutool-setting-5.8.10.postfixTemplates ######## 
######## cn.hutool.setting.SettingUtil
.getFirstFound : ht>获取给定路径找到的第一个配置文件
	ARRAY [cn.hutool.setting.SettingUtil]  →  cn.hutool.setting.SettingUtil.getFirstFound($expr$) 

.get : ht>获取当前环境下的配置文件
	java.lang.String [cn.hutool.setting.SettingUtil]  →  cn.hutool.setting.SettingUtil.get($expr$) 



######## cn.hutool.setting.yaml.YamlUtil
.load : ht>从流中加载YAML
	java.io.Reader [cn.hutool.setting.yaml.YamlUtil]  →  cn.hutool.setting.yaml.YamlUtil.load($expr$, $arg$) 
	java.io.InputStream [cn.hutool.setting.yaml.YamlUtil]  →  cn.hutool.setting.yaml.YamlUtil.load($expr$, $arg$) 

.loadByPath : ht>从classpath或绝对路径加载YAML文件
	java.lang.String [cn.hutool.setting.yaml.YamlUtil]  →  cn.hutool.setting.yaml.YamlUtil.loadByPath($expr$, $arg$) 

.dump : ht>将Bean对象或者Map写出到Writer
	java.lang.Object [cn.hutool.setting.yaml.YamlUtil]  →  cn.hutool.setting.yaml.YamlUtil.dump($expr$, $arg$) 



######## cn.hutool.setting.dialect.PropsUtil
.getFirstFound : ht>获取给定路径找到的第一个配置文件
	ARRAY [cn.hutool.setting.dialect.PropsUtil]  →  cn.hutool.setting.dialect.PropsUtil.getFirstFound($expr$) 

.get : ht>获取当前环境下的配置文件
	java.lang.String [cn.hutool.setting.dialect.PropsUtil]  →  cn.hutool.setting.dialect.PropsUtil.get($expr$) 



######## hutool-socket-5.8.10.postfixTemplates ######## 
######## cn.hutool.socket.SocketUtil
.isConnected : ht>远程主机是否处于连接状态
	java.nio.channels.AsynchronousSocketChannel [cn.hutool.socket.SocketUtil]  →  cn.hutool.socket.SocketUtil.isConnected($expr$) 

.getRemoteAddress : ht>获取远程端的地址信息,包括host和端口
	java.nio.channels.AsynchronousSocketChannel [cn.hutool.socket.SocketUtil]  →  cn.hutool.socket.SocketUtil.getRemoteAddress($expr$) 

.connect : ht>创建Socket并连接到指定地址的服务器
	java.lang.String [cn.hutool.socket.SocketUtil]  →  cn.hutool.socket.SocketUtil.connect($expr$, $arg$) 
	java.net.InetSocketAddress [cn.hutool.socket.SocketUtil]  →  cn.hutool.socket.SocketUtil.connect($expr$, $arg$) 



######## cn.hutool.socket.ChannelUtil
.createFixedGroup : ht>创建AsynchronousChannelGroup
	INT [cn.hutool.socket.ChannelUtil]  →  cn.hutool.socket.ChannelUtil.createFixedGroup($expr$) 

.connect : ht>连接到指定地址
	java.nio.channels.AsynchronousChannelGroup [cn.hutool.socket.ChannelUtil]  →  cn.hutool.socket.ChannelUtil.connect($expr$, $arg$) 



######## cn.hutool.socket.nio.NioUtil
.registerChannel : ht>注册通道的指定操作到指定Selector上
	java.nio.channels.Selector [cn.hutool.socket.nio.NioUtil]  →  cn.hutool.socket.nio.NioUtil.registerChannel($expr$, $arg$) 



######## hutool-system-5.8.10.postfixTemplates ######## 
######## cn.hutool.system.oshi.OshiUtil
.getCpuInfo : ht>获取系统CPU系统使用率、用户使用率、利用率等等相关信息
	LONG [cn.hutool.system.oshi.OshiUtil]  →  cn.hutool.system.oshi.OshiUtil.getCpuInfo($expr$) 



######## cn.hutool.system.SystemUtil
.dumpSystemInfo : ht>将系统信息输出到指定PrintWriter中
	java.io.PrintWriter [cn.hutool.system.SystemUtil]  →  cn.hutool.system.SystemUtil.dumpSystemInfo($expr$) 


